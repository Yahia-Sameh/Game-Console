
game_console.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08003f4c  08003f4c  00004f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  00006074  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080044e8  080044e8  000054e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f0  080044f0  00006074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000054f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044f4  080044f4  000054f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080044f8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e0  20000074  0800456c  00006074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000354  0800456c  00006354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000045db  00000000  00000000  000060a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001546  00000000  00000000  0000a67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  0000bbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000496  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000163cd  00000000  00000000  0000c6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006395  00000000  00000000  00022a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000854b1  00000000  00000000  00028e20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae2d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020d0  00000000  00000000  000ae314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000b03e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003f34 	.word	0x08003f34

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08003f34 	.word	0x08003f34

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <GUI_Main_voidRun>:
static void Sound_voidBeep(u16 frequency, u16 duration_ms);
static void Sound_voidPlayNavigate(void);
static void Sound_voidPlaySelect(void);


void GUI_Main_voidRun(void) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
    s8 current_selection = GAME_XO;
 8000296:	2300      	movs	r3, #0
 8000298:	71fb      	strb	r3, [r7, #7]

    Sound_voidInit(); // NEW: Initialize sound system
 800029a:	f000 fa79 	bl	8000790 <Sound_voidInit>
    GUI_voidDrawMenu(current_selection);
 800029e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f8fa 	bl	800049c <GUI_voidDrawMenu>

    while (1) {
        u8 selection_changed = 0;
 80002a8:	2300      	movs	r3, #0
 80002aa:	71bb      	strb	r3, [r7, #6]
        s8 previous_selection = current_selection;
 80002ac:	79fb      	ldrb	r3, [r7, #7]
 80002ae:	717b      	strb	r3, [r7, #5]

        if (debounce(NAV_NEXT_PORT, NAV_NEXT_PIN)) {
 80002b0:	2108      	movs	r1, #8
 80002b2:	2001      	movs	r0, #1
 80002b4:	f000 fa3e 	bl	8000734 <debounce>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d00d      	beq.n	80002da <GUI_Main_voidRun+0x4a>
            Sound_voidPlayNavigate(); // NEW: Play navigation sound
 80002be:	f000 fabd 	bl	800083c <Sound_voidPlayNavigate>
            current_selection = (current_selection + 1) % TOTAL_GAMES;
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	3301      	adds	r3, #1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	bfb8      	it	lt
 80002d0:	425b      	neglt	r3, r3
 80002d2:	71fb      	strb	r3, [r7, #7]
            selection_changed = 1;
 80002d4:	2301      	movs	r3, #1
 80002d6:	71bb      	strb	r3, [r7, #6]
 80002d8:	e015      	b.n	8000306 <GUI_Main_voidRun+0x76>
        } else if (debounce(NAV_PREV_PORT, NAV_PREV_PIN)) {
 80002da:	2106      	movs	r1, #6
 80002dc:	2001      	movs	r0, #1
 80002de:	f000 fa29 	bl	8000734 <debounce>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d00e      	beq.n	8000306 <GUI_Main_voidRun+0x76>
            Sound_voidPlayNavigate(); // NEW: Play navigation sound
 80002e8:	f000 faa8 	bl	800083c <Sound_voidPlayNavigate>
            current_selection = (current_selection == 0) ? (TOTAL_GAMES - 1) : (current_selection - 1);
 80002ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d004      	beq.n	80002fe <GUI_Main_voidRun+0x6e>
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	3b01      	subs	r3, #1
 80002f8:	b2db      	uxtb	r3, r3
 80002fa:	b25b      	sxtb	r3, r3
 80002fc:	e000      	b.n	8000300 <GUI_Main_voidRun+0x70>
 80002fe:	2301      	movs	r3, #1
 8000300:	71fb      	strb	r3, [r7, #7]
            selection_changed = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	71bb      	strb	r3, [r7, #6]
        }

        if (selection_changed) {
 8000306:	79bb      	ldrb	r3, [r7, #6]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d007      	beq.n	800031c <GUI_Main_voidRun+0x8c>
            GUI_voidUpdateSelection(previous_selection, current_selection);
 800030c:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000310:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000314:	4611      	mov	r1, r2
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f936 	bl	8000588 <GUI_voidUpdateSelection>
        }

        if (debounce(SELECT_PORT, SELECT_PIN)) {
 800031c:	2107      	movs	r1, #7
 800031e:	2001      	movs	r0, #1
 8000320:	f000 fa08 	bl	8000734 <debounce>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d016      	beq.n	8000358 <GUI_Main_voidRun+0xc8>
            Sound_voidPlaySelect(); // NEW: Play selection sound
 800032a:	f000 fa90 	bl	800084e <Sound_voidPlaySelect>
            MSTK_voidDelayms(100); // Small delay to let the sound play
 800032e:	2064      	movs	r0, #100	@ 0x64
 8000330:	f000 fec2 	bl	80010b8 <MSTK_voidDelayms>

            if (current_selection == GAME_XO) {
 8000334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d102      	bne.n	8000342 <GUI_Main_voidRun+0xb2>
                XO_Game_voidRun();
 800033c:	f001 fc7e 	bl	8001c3c <XO_Game_voidRun>
 8000340:	e005      	b.n	800034e <GUI_Main_voidRun+0xbe>
            } else if (current_selection == GAME_SNAKE) {
 8000342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000346:	2b01      	cmp	r3, #1
 8000348:	d101      	bne.n	800034e <GUI_Main_voidRun+0xbe>
                Snake_Game_voidRun();
 800034a:	f000 ff03 	bl	8001154 <Snake_Game_voidRun>
            }
            // After returning from a game, redraw the menu
            GUI_voidDrawMenu(current_selection);
 800034e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000352:	4618      	mov	r0, r3
 8000354:	f000 f8a2 	bl	800049c <GUI_voidDrawMenu>
        }
        MSTK_voidDelayms(50);
 8000358:	2032      	movs	r0, #50	@ 0x32
 800035a:	f000 fead 	bl	80010b8 <MSTK_voidDelayms>
    while (1) {
 800035e:	e7a3      	b.n	80002a8 <GUI_Main_voidRun+0x18>

08000360 <GUI_voidDrawGameCard>:
    }
}

void GUI_voidDrawGameCard(u8 index, u8 is_selected) {
 8000360:	b590      	push	{r4, r7, lr}
 8000362:	b08d      	sub	sp, #52	@ 0x34
 8000364:	af02      	add	r7, sp, #8
 8000366:	4603      	mov	r3, r0
 8000368:	460a      	mov	r2, r1
 800036a:	71fb      	strb	r3, [r7, #7]
 800036c:	4613      	mov	r3, r2
 800036e:	71bb      	strb	r3, [r7, #6]
    const u16 card_w = 110; const u16 card_h = 32; const u16 gap_between_cards = 15; const u16 title_h = 8; const u16 gap_after_title = 18;
 8000370:	236e      	movs	r3, #110	@ 0x6e
 8000372:	843b      	strh	r3, [r7, #32]
 8000374:	2320      	movs	r3, #32
 8000376:	83fb      	strh	r3, [r7, #30]
 8000378:	230f      	movs	r3, #15
 800037a:	83bb      	strh	r3, [r7, #28]
 800037c:	2308      	movs	r3, #8
 800037e:	837b      	strh	r3, [r7, #26]
 8000380:	2312      	movs	r3, #18
 8000382:	833b      	strh	r3, [r7, #24]
    u16 total_content_height = title_h + gap_after_title + (TOTAL_GAMES * card_h) + ((TOTAL_GAMES - 1) * gap_between_cards);
 8000384:	8b7a      	ldrh	r2, [r7, #26]
 8000386:	8b3b      	ldrh	r3, [r7, #24]
 8000388:	4413      	add	r3, r2
 800038a:	b29a      	uxth	r2, r3
 800038c:	8bfb      	ldrh	r3, [r7, #30]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	b29b      	uxth	r3, r3
 8000392:	4413      	add	r3, r2
 8000394:	b29a      	uxth	r2, r3
 8000396:	8bbb      	ldrh	r3, [r7, #28]
 8000398:	4413      	add	r3, r2
 800039a:	82fb      	strh	r3, [r7, #22]
    u16 start_y_block = (SCREEN_HEIGHT - total_content_height) / 2;
 800039c:	8afb      	ldrh	r3, [r7, #22]
 800039e:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 80003a2:	0fda      	lsrs	r2, r3, #31
 80003a4:	4413      	add	r3, r2
 80003a6:	105b      	asrs	r3, r3, #1
 80003a8:	82bb      	strh	r3, [r7, #20]
    u16 card_y = start_y_block + title_h + gap_after_title + (index * (card_h + gap_between_cards));
 80003aa:	8aba      	ldrh	r2, [r7, #20]
 80003ac:	8b7b      	ldrh	r3, [r7, #26]
 80003ae:	4413      	add	r3, r2
 80003b0:	b29a      	uxth	r2, r3
 80003b2:	8b3b      	ldrh	r3, [r7, #24]
 80003b4:	4413      	add	r3, r2
 80003b6:	b29a      	uxth	r2, r3
 80003b8:	79fb      	ldrb	r3, [r7, #7]
 80003ba:	b299      	uxth	r1, r3
 80003bc:	8bf8      	ldrh	r0, [r7, #30]
 80003be:	8bbb      	ldrh	r3, [r7, #28]
 80003c0:	4403      	add	r3, r0
 80003c2:	b29b      	uxth	r3, r3
 80003c4:	fb11 f303 	smulbb	r3, r1, r3
 80003c8:	b29b      	uxth	r3, r3
 80003ca:	4413      	add	r3, r2
 80003cc:	827b      	strh	r3, [r7, #18]
    u16 card_x = (SCREEN_WIDTH - card_w) / 2;
 80003ce:	8c3b      	ldrh	r3, [r7, #32]
 80003d0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80003d4:	0fda      	lsrs	r2, r3, #31
 80003d6:	4413      	add	r3, r2
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	823b      	strh	r3, [r7, #16]
    u16 card_bg, border_color, text_color;
    if (is_selected) { card_bg = VIBRANT_ORANGE; border_color = OFF_WHITE; text_color = OFF_WHITE;
 80003dc:	79bb      	ldrb	r3, [r7, #6]
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d009      	beq.n	80003f6 <GUI_voidDrawGameCard+0x96>
 80003e2:	f64c 2380 	movw	r3, #51840	@ 0xca80
 80003e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80003e8:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80003ec:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80003ee:	f64f 73fb 	movw	r3, #65531	@ 0xfffb
 80003f2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80003f4:	e008      	b.n	8000408 <GUI_voidDrawGameCard+0xa8>
    } else { card_bg = LIGHT_TAN; border_color = DARK_WOOD; text_color = DARK_WOOD; }
 80003f6:	f24d 53aa 	movw	r3, #54698	@ 0xd5aa
 80003fa:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80003fc:	f645 2306 	movw	r3, #23046	@ 0x5a06
 8000400:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000402:	f645 2306 	movw	r3, #23046	@ 0x5a06
 8000406:	847b      	strh	r3, [r7, #34]	@ 0x22
    HTFT_voidFillRect(card_x, card_y, card_w, card_h, card_bg);
 8000408:	8a3b      	ldrh	r3, [r7, #16]
 800040a:	b2d8      	uxtb	r0, r3
 800040c:	8a7b      	ldrh	r3, [r7, #18]
 800040e:	b2d9      	uxtb	r1, r3
 8000410:	8c3b      	ldrh	r3, [r7, #32]
 8000412:	b2da      	uxtb	r2, r3
 8000414:	8bfb      	ldrh	r3, [r7, #30]
 8000416:	b2dc      	uxtb	r4, r3
 8000418:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800041a:	9300      	str	r3, [sp, #0]
 800041c:	4623      	mov	r3, r4
 800041e:	f000 faf1 	bl	8000a04 <HTFT_voidFillRect>
    HILI_voidDrawRect(card_x, card_y, card_w, card_h, border_color);
 8000422:	8bfc      	ldrh	r4, [r7, #30]
 8000424:	8c3a      	ldrh	r2, [r7, #32]
 8000426:	8a79      	ldrh	r1, [r7, #18]
 8000428:	8a38      	ldrh	r0, [r7, #16]
 800042a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800042c:	9300      	str	r3, [sp, #0]
 800042e:	4623      	mov	r3, r4
 8000430:	f000 f8c0 	bl	80005b4 <HILI_voidDrawRect>
    if (is_selected) { HILI_voidDrawRect(card_x + 1, card_y + 1, card_w - 2, card_h - 2, DARK_WOOD); }
 8000434:	79bb      	ldrb	r3, [r7, #6]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d010      	beq.n	800045c <GUI_voidDrawGameCard+0xfc>
 800043a:	8a3b      	ldrh	r3, [r7, #16]
 800043c:	3301      	adds	r3, #1
 800043e:	b298      	uxth	r0, r3
 8000440:	8a7b      	ldrh	r3, [r7, #18]
 8000442:	3301      	adds	r3, #1
 8000444:	b299      	uxth	r1, r3
 8000446:	8c3b      	ldrh	r3, [r7, #32]
 8000448:	3b02      	subs	r3, #2
 800044a:	b29a      	uxth	r2, r3
 800044c:	8bfb      	ldrh	r3, [r7, #30]
 800044e:	3b02      	subs	r3, #2
 8000450:	b29b      	uxth	r3, r3
 8000452:	f645 2406 	movw	r4, #23046	@ 0x5a06
 8000456:	9400      	str	r4, [sp, #0]
 8000458:	f000 f8ac 	bl	80005b4 <HILI_voidDrawRect>
    u16 text_x = card_x + 10; u16 text_y = card_y + (card_h - 8) / 2;
 800045c:	8a3b      	ldrh	r3, [r7, #16]
 800045e:	330a      	adds	r3, #10
 8000460:	81fb      	strh	r3, [r7, #14]
 8000462:	8bfb      	ldrh	r3, [r7, #30]
 8000464:	3b08      	subs	r3, #8
 8000466:	0fda      	lsrs	r2, r3, #31
 8000468:	4413      	add	r3, r2
 800046a:	105b      	asrs	r3, r3, #1
 800046c:	b29a      	uxth	r2, r3
 800046e:	8a7b      	ldrh	r3, [r7, #18]
 8000470:	4413      	add	r3, r2
 8000472:	81bb      	strh	r3, [r7, #12]
    GUI_voidDrawString(text_x, text_y, game_names[index], text_color, card_bg, 1);
 8000474:	79fb      	ldrb	r3, [r7, #7]
 8000476:	4a08      	ldr	r2, [pc, #32]	@ (8000498 <GUI_voidDrawGameCard+0x138>)
 8000478:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800047c:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800047e:	89b9      	ldrh	r1, [r7, #12]
 8000480:	89f8      	ldrh	r0, [r7, #14]
 8000482:	2301      	movs	r3, #1
 8000484:	9301      	str	r3, [sp, #4]
 8000486:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000488:	9300      	str	r3, [sp, #0]
 800048a:	4623      	mov	r3, r4
 800048c:	f000 f8e0 	bl	8000650 <GUI_voidDrawString>
}
 8000490:	bf00      	nop
 8000492:	372c      	adds	r7, #44	@ 0x2c
 8000494:	46bd      	mov	sp, r7
 8000496:	bd90      	pop	{r4, r7, pc}
 8000498:	20000000 	.word	0x20000000

0800049c <GUI_voidDrawMenu>:

void GUI_voidDrawMenu(s8 selected_game) {
 800049c:	b580      	push	{r7, lr}
 800049e:	b08c      	sub	sp, #48	@ 0x30
 80004a0:	af02      	add	r7, sp, #8
 80004a2:	4603      	mov	r3, r0
 80004a4:	71fb      	strb	r3, [r7, #7]
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, CLASSIC_BEIGE);
 80004a6:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	23a0      	movs	r3, #160	@ 0xa0
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	2100      	movs	r1, #0
 80004b2:	2000      	movs	r0, #0
 80004b4:	f000 faa6 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, 3, DARK_WOOD);
 80004b8:	f645 2306 	movw	r3, #23046	@ 0x5a06
 80004bc:	9300      	str	r3, [sp, #0]
 80004be:	2303      	movs	r3, #3
 80004c0:	2280      	movs	r2, #128	@ 0x80
 80004c2:	2100      	movs	r1, #0
 80004c4:	2000      	movs	r0, #0
 80004c6:	f000 fa9d 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(0, SCREEN_HEIGHT - 3, SCREEN_WIDTH, 3, DARK_WOOD);
 80004ca:	f645 2306 	movw	r3, #23046	@ 0x5a06
 80004ce:	9300      	str	r3, [sp, #0]
 80004d0:	2303      	movs	r3, #3
 80004d2:	2280      	movs	r2, #128	@ 0x80
 80004d4:	219d      	movs	r1, #157	@ 0x9d
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fa94 	bl	8000a04 <HTFT_voidFillRect>
    const u16 card_h = 32; const u16 title_h = 8; const u16 gap_after_title = 18; const u16 gap_between_cards = 15;
 80004dc:	2320      	movs	r3, #32
 80004de:	847b      	strh	r3, [r7, #34]	@ 0x22
 80004e0:	2308      	movs	r3, #8
 80004e2:	843b      	strh	r3, [r7, #32]
 80004e4:	2312      	movs	r3, #18
 80004e6:	83fb      	strh	r3, [r7, #30]
 80004e8:	230f      	movs	r3, #15
 80004ea:	83bb      	strh	r3, [r7, #28]
    u16 total_content_height = title_h + gap_after_title + (TOTAL_GAMES * card_h) + ((TOTAL_GAMES - 1) * gap_between_cards);
 80004ec:	8c3a      	ldrh	r2, [r7, #32]
 80004ee:	8bfb      	ldrh	r3, [r7, #30]
 80004f0:	4413      	add	r3, r2
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	4413      	add	r3, r2
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	8bbb      	ldrh	r3, [r7, #28]
 8000500:	4413      	add	r3, r2
 8000502:	837b      	strh	r3, [r7, #26]
    u16 start_y_block = (SCREEN_HEIGHT - total_content_height) / 2;
 8000504:	8b7b      	ldrh	r3, [r7, #26]
 8000506:	f1c3 03a0 	rsb	r3, r3, #160	@ 0xa0
 800050a:	0fda      	lsrs	r2, r3, #31
 800050c:	4413      	add	r3, r2
 800050e:	105b      	asrs	r3, r3, #1
 8000510:	833b      	strh	r3, [r7, #24]
    const char* title = "SELECT GAME";
 8000512:	4b1c      	ldr	r3, [pc, #112]	@ (8000584 <GUI_voidDrawMenu+0xe8>)
 8000514:	617b      	str	r3, [r7, #20]
    u16 title_width = strlen(title) * 8; u16 title_x = (SCREEN_WIDTH - title_width) / 2; u16 title_y = start_y_block;
 8000516:	6978      	ldr	r0, [r7, #20]
 8000518:	f7ff fe62 	bl	80001e0 <strlen>
 800051c:	4603      	mov	r3, r0
 800051e:	b29b      	uxth	r3, r3
 8000520:	00db      	lsls	r3, r3, #3
 8000522:	827b      	strh	r3, [r7, #18]
 8000524:	8a7b      	ldrh	r3, [r7, #18]
 8000526:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800052a:	0fda      	lsrs	r2, r3, #31
 800052c:	4413      	add	r3, r2
 800052e:	105b      	asrs	r3, r3, #1
 8000530:	823b      	strh	r3, [r7, #16]
 8000532:	8b3b      	ldrh	r3, [r7, #24]
 8000534:	81fb      	strh	r3, [r7, #14]
    GUI_voidDrawString(title_x, title_y, title, VIBRANT_ORANGE, CLASSIC_BEIGE, 1);
 8000536:	89f9      	ldrh	r1, [r7, #14]
 8000538:	8a38      	ldrh	r0, [r7, #16]
 800053a:	2301      	movs	r3, #1
 800053c:	9301      	str	r3, [sp, #4]
 800053e:	f64f 73dc 	movw	r3, #65500	@ 0xffdc
 8000542:	9300      	str	r3, [sp, #0]
 8000544:	f64c 2380 	movw	r3, #51840	@ 0xca80
 8000548:	697a      	ldr	r2, [r7, #20]
 800054a:	f000 f881 	bl	8000650 <GUI_voidDrawString>
    for (int i = 0; i < TOTAL_GAMES; i++) { GUI_voidDrawGameCard(i, (i == selected_game)); }
 800054e:	2300      	movs	r3, #0
 8000550:	627b      	str	r3, [r7, #36]	@ 0x24
 8000552:	e00f      	b.n	8000574 <GUI_voidDrawMenu+0xd8>
 8000554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000556:	b2d8      	uxtb	r0, r3
 8000558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800055e:	429a      	cmp	r2, r3
 8000560:	bf0c      	ite	eq
 8000562:	2301      	moveq	r3, #1
 8000564:	2300      	movne	r3, #0
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4619      	mov	r1, r3
 800056a:	f7ff fef9 	bl	8000360 <GUI_voidDrawGameCard>
 800056e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000570:	3301      	adds	r3, #1
 8000572:	627b      	str	r3, [r7, #36]	@ 0x24
 8000574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000576:	2b01      	cmp	r3, #1
 8000578:	ddec      	ble.n	8000554 <GUI_voidDrawMenu+0xb8>
}
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	3728      	adds	r7, #40	@ 0x28
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	08003f60 	.word	0x08003f60

08000588 <GUI_voidUpdateSelection>:

void GUI_voidUpdateSelection(s8 old_selection, s8 new_selection) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	71fb      	strb	r3, [r7, #7]
 8000594:	4613      	mov	r3, r2
 8000596:	71bb      	strb	r3, [r7, #6]
    GUI_voidDrawGameCard(old_selection, 0);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	2100      	movs	r1, #0
 800059c:	4618      	mov	r0, r3
 800059e:	f7ff fedf 	bl	8000360 <GUI_voidDrawGameCard>
    GUI_voidDrawGameCard(new_selection, 1);
 80005a2:	79bb      	ldrb	r3, [r7, #6]
 80005a4:	2101      	movs	r1, #1
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff feda 	bl	8000360 <GUI_voidDrawGameCard>
}
 80005ac:	bf00      	nop
 80005ae:	3708      	adds	r7, #8
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HILI_voidDrawRect>:

void HILI_voidDrawRect(u16 x, u16 y, u16 w, u16 h, u16 color) {
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	4604      	mov	r4, r0
 80005bc:	4608      	mov	r0, r1
 80005be:	4611      	mov	r1, r2
 80005c0:	461a      	mov	r2, r3
 80005c2:	4623      	mov	r3, r4
 80005c4:	80fb      	strh	r3, [r7, #6]
 80005c6:	4603      	mov	r3, r0
 80005c8:	80bb      	strh	r3, [r7, #4]
 80005ca:	460b      	mov	r3, r1
 80005cc:	807b      	strh	r3, [r7, #2]
 80005ce:	4613      	mov	r3, r2
 80005d0:	803b      	strh	r3, [r7, #0]
    HTFT_voidFillRect(x, y, w, 1, color);
 80005d2:	88fb      	ldrh	r3, [r7, #6]
 80005d4:	b2d8      	uxtb	r0, r3
 80005d6:	88bb      	ldrh	r3, [r7, #4]
 80005d8:	b2d9      	uxtb	r1, r3
 80005da:	887b      	ldrh	r3, [r7, #2]
 80005dc:	b2da      	uxtb	r2, r3
 80005de:	8b3b      	ldrh	r3, [r7, #24]
 80005e0:	9300      	str	r3, [sp, #0]
 80005e2:	2301      	movs	r3, #1
 80005e4:	f000 fa0e 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(x, y + h - 1, w, 1, color);
 80005e8:	88fb      	ldrh	r3, [r7, #6]
 80005ea:	b2d8      	uxtb	r0, r3
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	883b      	ldrh	r3, [r7, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4413      	add	r3, r2
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	3b01      	subs	r3, #1
 80005fa:	b2d9      	uxtb	r1, r3
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	b2da      	uxtb	r2, r3
 8000600:	8b3b      	ldrh	r3, [r7, #24]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	f000 f9fd 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(x, y, 1, h, color);
 800060a:	88fb      	ldrh	r3, [r7, #6]
 800060c:	b2d8      	uxtb	r0, r3
 800060e:	88bb      	ldrh	r3, [r7, #4]
 8000610:	b2d9      	uxtb	r1, r3
 8000612:	883b      	ldrh	r3, [r7, #0]
 8000614:	b2da      	uxtb	r2, r3
 8000616:	8b3b      	ldrh	r3, [r7, #24]
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	4613      	mov	r3, r2
 800061c:	2201      	movs	r2, #1
 800061e:	f000 f9f1 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(x + w - 1, y, 1, h, color);
 8000622:	88fb      	ldrh	r3, [r7, #6]
 8000624:	b2da      	uxtb	r2, r3
 8000626:	887b      	ldrh	r3, [r7, #2]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	4413      	add	r3, r2
 800062c:	b2db      	uxtb	r3, r3
 800062e:	3b01      	subs	r3, #1
 8000630:	b2d8      	uxtb	r0, r3
 8000632:	88bb      	ldrh	r3, [r7, #4]
 8000634:	b2d9      	uxtb	r1, r3
 8000636:	883b      	ldrh	r3, [r7, #0]
 8000638:	b2da      	uxtb	r2, r3
 800063a:	8b3b      	ldrh	r3, [r7, #24]
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4613      	mov	r3, r2
 8000640:	2201      	movs	r2, #1
 8000642:	f000 f9df 	bl	8000a04 <HTFT_voidFillRect>
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bd90      	pop	{r4, r7, pc}
	...

08000650 <GUI_voidDrawString>:

void GUI_voidDrawString(u16 x, u16 y, const char *str, u16 color, u16 bg, u8 transparent) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b08a      	sub	sp, #40	@ 0x28
 8000654:	af02      	add	r7, sp, #8
 8000656:	60ba      	str	r2, [r7, #8]
 8000658:	461a      	mov	r2, r3
 800065a:	4603      	mov	r3, r0
 800065c:	81fb      	strh	r3, [r7, #14]
 800065e:	460b      	mov	r3, r1
 8000660:	81bb      	strh	r3, [r7, #12]
 8000662:	4613      	mov	r3, r2
 8000664:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 8000666:	e059      	b.n	800071c <GUI_voidDrawString+0xcc>
        if (*str >= 32 && *str <= 122) {
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	2b1f      	cmp	r3, #31
 800066e:	d94f      	bls.n	8000710 <GUI_voidDrawString+0xc0>
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b7a      	cmp	r3, #122	@ 0x7a
 8000676:	d84b      	bhi.n	8000710 <GUI_voidDrawString+0xc0>
            const u8* glyph = font8x8 + (*str - 32) * 8;
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	3b20      	subs	r3, #32
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	461a      	mov	r2, r3
 8000682:	4b2b      	ldr	r3, [pc, #172]	@ (8000730 <GUI_voidDrawString+0xe0>)
 8000684:	4413      	add	r3, r2
 8000686:	61bb      	str	r3, [r7, #24]
            for (u8 row = 0; row < 8; row++) {
 8000688:	2300      	movs	r3, #0
 800068a:	77fb      	strb	r3, [r7, #31]
 800068c:	e03d      	b.n	800070a <GUI_voidDrawString+0xba>
                u8 row_data = glyph[row];
 800068e:	7ffb      	ldrb	r3, [r7, #31]
 8000690:	69ba      	ldr	r2, [r7, #24]
 8000692:	4413      	add	r3, r2
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	75fb      	strb	r3, [r7, #23]
                for (u8 col = 0; col < 8; col++) {
 8000698:	2300      	movs	r3, #0
 800069a:	77bb      	strb	r3, [r7, #30]
 800069c:	e02f      	b.n	80006fe <GUI_voidDrawString+0xae>
                    if ((row_data >> col) & 1) {
 800069e:	7dfa      	ldrb	r2, [r7, #23]
 80006a0:	7fbb      	ldrb	r3, [r7, #30]
 80006a2:	fa42 f303 	asr.w	r3, r2, r3
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d010      	beq.n	80006d0 <GUI_voidDrawString+0x80>
                        HTFT_voidFillRect(x + col, y + row, 1, 1, color);
 80006ae:	89fb      	ldrh	r3, [r7, #14]
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	7fbb      	ldrb	r3, [r7, #30]
 80006b4:	4413      	add	r3, r2
 80006b6:	b2d8      	uxtb	r0, r3
 80006b8:	89bb      	ldrh	r3, [r7, #12]
 80006ba:	b2da      	uxtb	r2, r3
 80006bc:	7ffb      	ldrb	r3, [r7, #31]
 80006be:	4413      	add	r3, r2
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2301      	movs	r3, #1
 80006c8:	2201      	movs	r2, #1
 80006ca:	f000 f99b 	bl	8000a04 <HTFT_voidFillRect>
 80006ce:	e013      	b.n	80006f8 <GUI_voidDrawString+0xa8>
                    } else if (!transparent) {
 80006d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10f      	bne.n	80006f8 <GUI_voidDrawString+0xa8>
                        HTFT_voidFillRect(x + col, y + row, 1, 1, bg);
 80006d8:	89fb      	ldrh	r3, [r7, #14]
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	7fbb      	ldrb	r3, [r7, #30]
 80006de:	4413      	add	r3, r2
 80006e0:	b2d8      	uxtb	r0, r3
 80006e2:	89bb      	ldrh	r3, [r7, #12]
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	7ffb      	ldrb	r3, [r7, #31]
 80006e8:	4413      	add	r3, r2
 80006ea:	b2d9      	uxtb	r1, r3
 80006ec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80006ee:	9300      	str	r3, [sp, #0]
 80006f0:	2301      	movs	r3, #1
 80006f2:	2201      	movs	r2, #1
 80006f4:	f000 f986 	bl	8000a04 <HTFT_voidFillRect>
                for (u8 col = 0; col < 8; col++) {
 80006f8:	7fbb      	ldrb	r3, [r7, #30]
 80006fa:	3301      	adds	r3, #1
 80006fc:	77bb      	strb	r3, [r7, #30]
 80006fe:	7fbb      	ldrb	r3, [r7, #30]
 8000700:	2b07      	cmp	r3, #7
 8000702:	d9cc      	bls.n	800069e <GUI_voidDrawString+0x4e>
            for (u8 row = 0; row < 8; row++) {
 8000704:	7ffb      	ldrb	r3, [r7, #31]
 8000706:	3301      	adds	r3, #1
 8000708:	77fb      	strb	r3, [r7, #31]
 800070a:	7ffb      	ldrb	r3, [r7, #31]
 800070c:	2b07      	cmp	r3, #7
 800070e:	d9be      	bls.n	800068e <GUI_voidDrawString+0x3e>
                    }
                }
            }
        }
        x += 8;
 8000710:	89fb      	ldrh	r3, [r7, #14]
 8000712:	3308      	adds	r3, #8
 8000714:	81fb      	strh	r3, [r7, #14]
        str++;
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	3301      	adds	r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
    while (*str) {
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d1a1      	bne.n	8000668 <GUI_voidDrawString+0x18>
    }
}
 8000724:	bf00      	nop
 8000726:	bf00      	nop
 8000728:	3720      	adds	r7, #32
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	08003fe0 	.word	0x08003fe0

08000734 <debounce>:

static u8 debounce(Port_t port, PIN_t pin) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	460a      	mov	r2, r1
 800073e:	71fb      	strb	r3, [r7, #7]
 8000740:	4613      	mov	r3, r2
 8000742:	71bb      	strb	r3, [r7, #6]
    if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 8000744:	79ba      	ldrb	r2, [r7, #6]
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4611      	mov	r1, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f000 faf0 	bl	8000d30 <MGPIO_u8GetPinValue>
 8000750:	4603      	mov	r3, r0
 8000752:	2b01      	cmp	r3, #1
 8000754:	d117      	bne.n	8000786 <debounce+0x52>
        MSTK_voidDelayms(50);
 8000756:	2032      	movs	r0, #50	@ 0x32
 8000758:	f000 fcae 	bl	80010b8 <MSTK_voidDelayms>
        if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	79fb      	ldrb	r3, [r7, #7]
 8000760:	4611      	mov	r1, r2
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fae4 	bl	8000d30 <MGPIO_u8GetPinValue>
 8000768:	4603      	mov	r3, r0
 800076a:	2b01      	cmp	r3, #1
 800076c:	d10b      	bne.n	8000786 <debounce+0x52>
            while (MGPIO_u8GetPinValue(port, pin) == HIGH);
 800076e:	bf00      	nop
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	4611      	mov	r1, r2
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fada 	bl	8000d30 <MGPIO_u8GetPinValue>
 800077c:	4603      	mov	r3, r0
 800077e:	2b01      	cmp	r3, #1
 8000780:	d0f6      	beq.n	8000770 <debounce+0x3c>
            return 1;
 8000782:	2301      	movs	r3, #1
 8000784:	e000      	b.n	8000788 <debounce+0x54>
        }
    }
    return 0;
 8000786:	2300      	movs	r3, #0
}
 8000788:	4618      	mov	r0, r3
 800078a:	3708      	adds	r7, #8
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}

08000790 <Sound_voidInit>:

/*******************************************************************************
* NEW & CORRECTED SOUND FUNCTIONS                                              *
*******************************************************************************/

static void Sound_voidInit(void) {
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
    MGPIO_voidSetMode(BUZZER_PORT, BUZZER_PIN, OUTPUT);
 8000794:	2201      	movs	r2, #1
 8000796:	210a      	movs	r1, #10
 8000798:	2001      	movs	r0, #1
 800079a:	f000 f961 	bl	8000a60 <MGPIO_voidSetMode>
    MGPIO_voidSetOutputConfig(BUZZER_PORT, BUZZER_PIN, Push_Pull, Low_Speed);
 800079e:	2300      	movs	r3, #0
 80007a0:	2200      	movs	r2, #0
 80007a2:	210a      	movs	r1, #10
 80007a4:	2001      	movs	r0, #1
 80007a6:	f000 f9af 	bl	8000b08 <MGPIO_voidSetOutputConfig>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <Sound_voidBeep>:

static void Sound_voidBeep(u16 frequency, u16 duration_ms) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b086      	sub	sp, #24
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4603      	mov	r3, r0
 80007b8:	460a      	mov	r2, r1
 80007ba:	80fb      	strh	r3, [r7, #6]
 80007bc:	4613      	mov	r3, r2
 80007be:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) return;
 80007c0:	88fb      	ldrh	r3, [r7, #6]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d031      	beq.n	800082a <Sound_voidBeep+0x7a>
    u32 half_period_us = 500000 / frequency;
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000838 <Sound_voidBeep+0x88>)
 80007ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80007ce:	613b      	str	r3, [r7, #16]
    if (half_period_us == 0) return;
 80007d0:	693b      	ldr	r3, [r7, #16]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d02b      	beq.n	800082e <Sound_voidBeep+0x7e>
    u32 total_cycles = ((u32)duration_ms * 1000) / (half_period_us * 2);
 80007d6:	88bb      	ldrh	r3, [r7, #4]
 80007d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007dc:	fb03 f202 	mul.w	r2, r3, r2
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e8:	60fb      	str	r3, [r7, #12]
    for (u32 i = 0; i < total_cycles; i++) {
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e012      	b.n	8000816 <Sound_voidBeep+0x66>
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
 80007f0:	2201      	movs	r2, #1
 80007f2:	210a      	movs	r1, #10
 80007f4:	2001      	movs	r0, #1
 80007f6:	f000 f9fd 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 80007fa:	6938      	ldr	r0, [r7, #16]
 80007fc:	f000 fc7e 	bl	80010fc <MSTK_voidDelayus>
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 8000800:	2200      	movs	r2, #0
 8000802:	210a      	movs	r1, #10
 8000804:	2001      	movs	r0, #1
 8000806:	f000 f9f5 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 800080a:	6938      	ldr	r0, [r7, #16]
 800080c:	f000 fc76 	bl	80010fc <MSTK_voidDelayus>
    for (u32 i = 0; i < total_cycles; i++) {
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	3301      	adds	r3, #1
 8000814:	617b      	str	r3, [r7, #20]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	429a      	cmp	r2, r3
 800081c:	d3e8      	bcc.n	80007f0 <Sound_voidBeep+0x40>
    }
    MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 800081e:	2200      	movs	r2, #0
 8000820:	210a      	movs	r1, #10
 8000822:	2001      	movs	r0, #1
 8000824:	f000 f9e6 	bl	8000bf4 <MGPIO_voidSetPinValue>
 8000828:	e002      	b.n	8000830 <Sound_voidBeep+0x80>
    if (frequency == 0) return;
 800082a:	bf00      	nop
 800082c:	e000      	b.n	8000830 <Sound_voidBeep+0x80>
    if (half_period_us == 0) return;
 800082e:	bf00      	nop
}
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	0007a120 	.word	0x0007a120

0800083c <Sound_voidPlayNavigate>:

// صوت للتنقل بين الخيارات
static void Sound_voidPlayNavigate(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
    Sound_voidBeep(2800, 35); // نغمة قصيرة وحادة
 8000840:	2123      	movs	r1, #35	@ 0x23
 8000842:	f44f 602f 	mov.w	r0, #2800	@ 0xaf0
 8000846:	f7ff ffb3 	bl	80007b0 <Sound_voidBeep>
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}

0800084e <Sound_voidPlaySelect>:

// صوت لتأكيد الاختيار
static void Sound_voidPlaySelect(void) {
 800084e:	b580      	push	{r7, lr}
 8000850:	af00      	add	r7, sp, #0
    Sound_voidBeep(1800, 80); // نغمة أطول وأكثر صلابة
 8000852:	2150      	movs	r1, #80	@ 0x50
 8000854:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8000858:	f7ff ffaa 	bl	80007b0 <Sound_voidBeep>
}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}

08000860 <HTFT_voidInit>:
#include "HTFT_Config.h"

// ... (كود HTFT_voidInit, HTFT_voidWriteData, HTFT_voidWriteCMD الحالي الخاص بك يظل كما هو) ...

void HTFT_voidInit()
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	MGPIO_voidSetMode(TFT_PORT,RST_PIN,OUTPUT);
 8000864:	2201      	movs	r2, #1
 8000866:	2100      	movs	r1, #0
 8000868:	2000      	movs	r0, #0
 800086a:	f000 f8f9 	bl	8000a60 <MGPIO_voidSetMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,RST_PIN,Push_Pull,Low_Speed);
 800086e:	2300      	movs	r3, #0
 8000870:	2200      	movs	r2, #0
 8000872:	2100      	movs	r1, #0
 8000874:	2000      	movs	r0, #0
 8000876:	f000 f947 	bl	8000b08 <MGPIO_voidSetOutputConfig>
	MGPIO_voidSetMode(TFT_PORT,CONTROL_PIN,OUTPUT);
 800087a:	2201      	movs	r2, #1
 800087c:	2101      	movs	r1, #1
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f8ee 	bl	8000a60 <MGPIO_voidSetMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,CONTROL_PIN,Push_Pull,Low_Speed);
 8000884:	2300      	movs	r3, #0
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	2000      	movs	r0, #0
 800088c:	f000 f93c 	bl	8000b08 <MGPIO_voidSetOutputConfig>
	
	//Reset Sequence 
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 8000890:	2201      	movs	r2, #1
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f000 f9ad 	bl	8000bf4 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 800089a:	2064      	movs	r0, #100	@ 0x64
 800089c:	f000 fc2e 	bl	80010fc <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2100      	movs	r1, #0
 80008a4:	2000      	movs	r0, #0
 80008a6:	f000 f9a5 	bl	8000bf4 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fc26 	bl	80010fc <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 80008b0:	2201      	movs	r2, #1
 80008b2:	2100      	movs	r1, #0
 80008b4:	2000      	movs	r0, #0
 80008b6:	f000 f99d 	bl	8000bf4 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 80008ba:	2064      	movs	r0, #100	@ 0x64
 80008bc:	f000 fc1e 	bl	80010fc <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2000      	movs	r0, #0
 80008c6:	f000 f995 	bl	8000bf4 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 80008ca:	2064      	movs	r0, #100	@ 0x64
 80008cc:	f000 fc16 	bl	80010fc <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 f98d 	bl	8000bf4 <MGPIO_voidSetPinValue>
	MSTK_voidDelayms(120);
 80008da:	2078      	movs	r0, #120	@ 0x78
 80008dc:	f000 fbec 	bl	80010b8 <MSTK_voidDelayms>
	
	//Sleep Out
	HTFT_voidWriteCMD(SLEEP_OUT);
 80008e0:	2011      	movs	r0, #17
 80008e2:	f000 f821 	bl	8000928 <HTFT_voidWriteCMD>
	MSTK_voidDelayms(10);
 80008e6:	200a      	movs	r0, #10
 80008e8:	f000 fbe6 	bl	80010b8 <MSTK_voidDelayms>
	
	//Select color mode
	HTFT_voidWriteCMD(COLOR_MODE);
 80008ec:	203a      	movs	r0, #58	@ 0x3a
 80008ee:	f000 f81b 	bl	8000928 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(RGB565);
 80008f2:	2005      	movs	r0, #5
 80008f4:	f000 f805 	bl	8000902 <HTFT_voidWriteData>
	
	//Diplay on
	HTFT_voidWriteCMD(DISPLAY_ON);
 80008f8:	2029      	movs	r0, #41	@ 0x29
 80008fa:	f000 f815 	bl	8000928 <HTFT_voidWriteCMD>
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <HTFT_voidWriteData>:

void HTFT_voidWriteData(u8 Copy_u8Data)
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b082      	sub	sp, #8
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,HIGH);
 800090c:	2201      	movs	r2, #1
 800090e:	2101      	movs	r1, #1
 8000910:	2000      	movs	r0, #0
 8000912:	f000 f96f 	bl	8000bf4 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8Data);
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	b29b      	uxth	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f000 fb58 	bl	8000fd0 <MSPI_u16Tranceive>
}
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}

08000928 <HTFT_voidWriteCMD>:

void HTFT_voidWriteCMD(u8 Copy_u8CMD)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,LOW);
 8000932:	2200      	movs	r2, #0
 8000934:	2101      	movs	r1, #1
 8000936:	2000      	movs	r0, #0
 8000938:	f000 f95c 	bl	8000bf4 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8CMD);
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	b29b      	uxth	r3, r3
 8000940:	4618      	mov	r0, r3
 8000942:	f000 fb45 	bl	8000fd0 <MSPI_u16Tranceive>
}
 8000946:	bf00      	nop
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}

0800094e <HTFT_voidSetWindow>:
/************************************************/
/* تنفيذ دوال الرسم الجديدة              */
/************************************************/

void HTFT_voidSetWindow(u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 800094e:	b590      	push	{r4, r7, lr}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	4604      	mov	r4, r0
 8000956:	4608      	mov	r0, r1
 8000958:	4611      	mov	r1, r2
 800095a:	461a      	mov	r2, r3
 800095c:	4623      	mov	r3, r4
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	4603      	mov	r3, r0
 8000962:	71bb      	strb	r3, [r7, #6]
 8000964:	460b      	mov	r3, r1
 8000966:	717b      	strb	r3, [r7, #5]
 8000968:	4613      	mov	r3, r2
 800096a:	713b      	strb	r3, [r7, #4]
	// Set X address
	HTFT_voidWriteCMD(X_Direction);
 800096c:	202a      	movs	r0, #42	@ 0x2a
 800096e:	f7ff ffdb 	bl	8000928 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(0);
 8000972:	2000      	movs	r0, #0
 8000974:	f7ff ffc5 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8X0);
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	4618      	mov	r0, r3
 800097c:	f7ff ffc1 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(0);
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ffbe 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8X1);
 8000986:	79bb      	ldrb	r3, [r7, #6]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ffba 	bl	8000902 <HTFT_voidWriteData>
	
	// Set Y address
	HTFT_voidWriteCMD(Y_Direction);
 800098e:	202b      	movs	r0, #43	@ 0x2b
 8000990:	f7ff ffca 	bl	8000928 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(0);
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ffb4 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8Y0);
 800099a:	797b      	ldrb	r3, [r7, #5]
 800099c:	4618      	mov	r0, r3
 800099e:	f7ff ffb0 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(0);
 80009a2:	2000      	movs	r0, #0
 80009a4:	f7ff ffad 	bl	8000902 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8Y1);
 80009a8:	793b      	ldrb	r3, [r7, #4]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f7ff ffa9 	bl	8000902 <HTFT_voidWriteData>
	
	// Start memory write command
	HTFT_voidWriteCMD(SCREEN_WRITE);
 80009b0:	202c      	movs	r0, #44	@ 0x2c
 80009b2:	f7ff ffb9 	bl	8000928 <HTFT_voidWriteCMD>
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd90      	pop	{r4, r7, pc}

080009be <HTFT_voidFillColor>:

void HTFT_voidFillColor(u16 Copy_u16Color, u32 Copy_u32Size)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b084      	sub	sp, #16
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	4603      	mov	r3, r0
 80009c6:	6039      	str	r1, [r7, #0]
 80009c8:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8HighPart = (u8)(Copy_u16Color >> 8);
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	b29b      	uxth	r3, r3
 80009d0:	72fb      	strb	r3, [r7, #11]
	u8 Local_u8LowPart  = (u8)(Copy_u16Color);
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	72bb      	strb	r3, [r7, #10]

	for(u32 Local_u32Iterator = 0; Local_u32Iterator < Copy_u32Size; Local_u32Iterator++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e00a      	b.n	80009f2 <HTFT_voidFillColor+0x34>
	{
		HTFT_voidWriteData(Local_u8HighPart);
 80009dc:	7afb      	ldrb	r3, [r7, #11]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff ff8f 	bl	8000902 <HTFT_voidWriteData>
		HTFT_voidWriteData(Local_u8LowPart);
 80009e4:	7abb      	ldrb	r3, [r7, #10]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff8b 	bl	8000902 <HTFT_voidWriteData>
	for(u32 Local_u32Iterator = 0; Local_u32Iterator < Copy_u32Size; Local_u32Iterator++)
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3301      	adds	r3, #1
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d3f0      	bcc.n	80009dc <HTFT_voidFillColor+0x1e>
	}
}
 80009fa:	bf00      	nop
 80009fc:	bf00      	nop
 80009fe:	3710      	adds	r7, #16
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <HTFT_voidFillRect>:

void HTFT_voidFillRect(u8 Copy_u8X, u8 Copy_u8Y, u8 Copy_u8Width, u8 Copy_u8Height, u16 Copy_u16Color)
{
 8000a04:	b590      	push	{r4, r7, lr}
 8000a06:	b085      	sub	sp, #20
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	4604      	mov	r4, r0
 8000a0c:	4608      	mov	r0, r1
 8000a0e:	4611      	mov	r1, r2
 8000a10:	461a      	mov	r2, r3
 8000a12:	4623      	mov	r3, r4
 8000a14:	71fb      	strb	r3, [r7, #7]
 8000a16:	4603      	mov	r3, r0
 8000a18:	71bb      	strb	r3, [r7, #6]
 8000a1a:	460b      	mov	r3, r1
 8000a1c:	717b      	strb	r3, [r7, #5]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	713b      	strb	r3, [r7, #4]
    u32 Local_u32Area = (u32)Copy_u8Width * Copy_u8Height;
 8000a22:	797b      	ldrb	r3, [r7, #5]
 8000a24:	793a      	ldrb	r2, [r7, #4]
 8000a26:	fb02 f303 	mul.w	r3, r2, r3
 8000a2a:	60fb      	str	r3, [r7, #12]
    HTFT_voidSetWindow(Copy_u8X, Copy_u8X + Copy_u8Width - 1, Copy_u8Y, Copy_u8Y + Copy_u8Height - 1);
 8000a2c:	79fa      	ldrb	r2, [r7, #7]
 8000a2e:	797b      	ldrb	r3, [r7, #5]
 8000a30:	4413      	add	r3, r2
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	3b01      	subs	r3, #1
 8000a36:	b2d9      	uxtb	r1, r3
 8000a38:	79ba      	ldrb	r2, [r7, #6]
 8000a3a:	793b      	ldrb	r3, [r7, #4]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	b2db      	uxtb	r3, r3
 8000a40:	3b01      	subs	r3, #1
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	79ba      	ldrb	r2, [r7, #6]
 8000a46:	79f8      	ldrb	r0, [r7, #7]
 8000a48:	f7ff ff81 	bl	800094e <HTFT_voidSetWindow>
    HTFT_voidFillColor(Copy_u16Color, Local_u32Area);
 8000a4c:	8c3b      	ldrh	r3, [r7, #32]
 8000a4e:	68f9      	ldr	r1, [r7, #12]
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ffb4 	bl	80009be <HTFT_voidFillColor>
}
 8000a56:	bf00      	nop
 8000a58:	3714      	adds	r7, #20
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd90      	pop	{r4, r7, pc}
	...

08000a60 <MGPIO_voidSetMode>:
#include "MGPIO_Private.h"
#include "MGPIO_Config.h"


void MGPIO_voidSetMode(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Modes_t Copy_uddtMode)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	4603      	mov	r3, r0
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	460b      	mov	r3, r1
 8000a6c:	71bb      	strb	r3, [r7, #6]
 8000a6e:	4613      	mov	r3, r2
 8000a70:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d108      	bne.n	8000a8a <MGPIO_voidSetMode+0x2a>
 8000a78:	79bb      	ldrb	r3, [r7, #6]
 8000a7a:	2b0d      	cmp	r3, #13
 8000a7c:	d038      	beq.n	8000af0 <MGPIO_voidSetMode+0x90>
 8000a7e:	79bb      	ldrb	r3, [r7, #6]
 8000a80:	2b0e      	cmp	r3, #14
 8000a82:	d035      	beq.n	8000af0 <MGPIO_voidSetMode+0x90>
 8000a84:	79bb      	ldrb	r3, [r7, #6]
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	d032      	beq.n	8000af0 <MGPIO_voidSetMode+0x90>
	{
		return;
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b01      	cmp	r3, #1
 8000a8e:	d108      	bne.n	8000aa2 <MGPIO_voidSetMode+0x42>
 8000a90:	79bb      	ldrb	r3, [r7, #6]
 8000a92:	2b03      	cmp	r3, #3
 8000a94:	d02e      	beq.n	8000af4 <MGPIO_voidSetMode+0x94>
 8000a96:	79bb      	ldrb	r3, [r7, #6]
 8000a98:	2b04      	cmp	r3, #4
 8000a9a:	d02b      	beq.n	8000af4 <MGPIO_voidSetMode+0x94>
 8000a9c:	79bb      	ldrb	r3, [r7, #6]
 8000a9e:	2b05      	cmp	r3, #5
 8000aa0:	d028      	beq.n	8000af4 <MGPIO_voidSetMode+0x94>
	{
		return;
	}
	else if (Copy_uddtPort < 0 || Copy_uddtPort >= sizeof(ARRAY_BASE_ADDRESS) / sizeof(ARRAY_BASE_ADDRESS[0])) {
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d827      	bhi.n	8000af8 <MGPIO_voidSetMode+0x98>
        // Handle error (invalid port)
        return;
    }
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->MODER&=~(MUSK<<(Copy_uddtPin*2));
 8000aa8:	79fb      	ldrb	r3, [r7, #7]
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <MGPIO_voidSetMode+0xa4>)
 8000aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	79bb      	ldrb	r3, [r7, #6]
 8000ab4:	005b      	lsls	r3, r3, #1
 8000ab6:	2103      	movs	r1, #3
 8000ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	4910      	ldr	r1, [pc, #64]	@ (8000b04 <MGPIO_voidSetMode+0xa4>)
 8000ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac8:	4002      	ands	r2, r0
 8000aca:	601a      	str	r2, [r3, #0]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->MODER|=(Copy_uddtMode<<(Copy_uddtPin*2));
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a0d      	ldr	r2, [pc, #52]	@ (8000b04 <MGPIO_voidSetMode+0xa4>)
 8000ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	7979      	ldrb	r1, [r7, #5]
 8000ad8:	79bb      	ldrb	r3, [r7, #6]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	4907      	ldr	r1, [pc, #28]	@ (8000b04 <MGPIO_voidSetMode+0xa4>)
 8000ae6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000aea:	4302      	orrs	r2, r0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	e004      	b.n	8000afa <MGPIO_voidSetMode+0x9a>
		return;
 8000af0:	bf00      	nop
 8000af2:	e002      	b.n	8000afa <MGPIO_voidSetMode+0x9a>
		return;
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <MGPIO_voidSetMode+0x9a>
        return;
 8000af8:	bf00      	nop
	}
		
}
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	20000008 	.word	0x20000008

08000b08 <MGPIO_voidSetOutputConfig>:


void MGPIO_voidSetOutputConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Output_t Copy_uddtType,Speed_t Copy_uddtSpeed)
{
 8000b08:	b490      	push	{r4, r7}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	4611      	mov	r1, r2
 8000b14:	461a      	mov	r2, r3
 8000b16:	4623      	mov	r3, r4
 8000b18:	71fb      	strb	r3, [r7, #7]
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71bb      	strb	r3, [r7, #6]
 8000b1e:	460b      	mov	r3, r1
 8000b20:	717b      	strb	r3, [r7, #5]
 8000b22:	4613      	mov	r3, r2
 8000b24:	713b      	strb	r3, [r7, #4]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d108      	bne.n	8000b3e <MGPIO_voidSetOutputConfig+0x36>
 8000b2c:	79bb      	ldrb	r3, [r7, #6]
 8000b2e:	2b0d      	cmp	r3, #13
 8000b30:	d056      	beq.n	8000be0 <MGPIO_voidSetOutputConfig+0xd8>
 8000b32:	79bb      	ldrb	r3, [r7, #6]
 8000b34:	2b0e      	cmp	r3, #14
 8000b36:	d053      	beq.n	8000be0 <MGPIO_voidSetOutputConfig+0xd8>
 8000b38:	79bb      	ldrb	r3, [r7, #6]
 8000b3a:	2b0f      	cmp	r3, #15
 8000b3c:	d050      	beq.n	8000be0 <MGPIO_voidSetOutputConfig+0xd8>
	{
		return;
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d108      	bne.n	8000b56 <MGPIO_voidSetOutputConfig+0x4e>
 8000b44:	79bb      	ldrb	r3, [r7, #6]
 8000b46:	2b03      	cmp	r3, #3
 8000b48:	d04c      	beq.n	8000be4 <MGPIO_voidSetOutputConfig+0xdc>
 8000b4a:	79bb      	ldrb	r3, [r7, #6]
 8000b4c:	2b04      	cmp	r3, #4
 8000b4e:	d049      	beq.n	8000be4 <MGPIO_voidSetOutputConfig+0xdc>
 8000b50:	79bb      	ldrb	r3, [r7, #6]
 8000b52:	2b05      	cmp	r3, #5
 8000b54:	d046      	beq.n	8000be4 <MGPIO_voidSetOutputConfig+0xdc>
	{
		return;
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OTYPER&=~(1<<(Copy_uddtPin));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	4a25      	ldr	r2, [pc, #148]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	79bb      	ldrb	r3, [r7, #6]
 8000b62:	2101      	movs	r1, #1
 8000b64:	fa01 f303 	lsl.w	r3, r1, r3
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4920      	ldr	r1, [pc, #128]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000b70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b74:	4002      	ands	r2, r0
 8000b76:	605a      	str	r2, [r3, #4]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OTYPER|=(Copy_uddtType<<(Copy_uddtPin));
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	7979      	ldrb	r1, [r7, #5]
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	4918      	ldr	r1, [pc, #96]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b94:	4302      	orrs	r2, r0
 8000b96:	605a      	str	r2, [r3, #4]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OSPEEDER&=~(MUSK<<(Copy_uddtPin*2));
 8000b98:	79fb      	ldrb	r3, [r7, #7]
 8000b9a:	4a15      	ldr	r2, [pc, #84]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000b9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	79bb      	ldrb	r3, [r7, #6]
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	2103      	movs	r1, #3
 8000ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bac:	43db      	mvns	r3, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	490f      	ldr	r1, [pc, #60]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000bb4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bb8:	4002      	ands	r2, r0
 8000bba:	609a      	str	r2, [r3, #8]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OSPEEDER|=(Copy_uddtSpeed<<(Copy_uddtPin*2));
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000bc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	7939      	ldrb	r1, [r7, #4]
 8000bc8:	79bb      	ldrb	r3, [r7, #6]
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	4906      	ldr	r1, [pc, #24]	@ (8000bf0 <MGPIO_voidSetOutputConfig+0xe8>)
 8000bd6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bda:	4302      	orrs	r2, r0
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	e002      	b.n	8000be6 <MGPIO_voidSetOutputConfig+0xde>
		return;
 8000be0:	bf00      	nop
 8000be2:	e000      	b.n	8000be6 <MGPIO_voidSetOutputConfig+0xde>
		return;
 8000be4:	bf00      	nop
//			GPIOC->OSPEEDER|=(Copy_uddtSpeed<<(Copy_uddtPin*2));
//
//			break;
//		}
	}
}
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bc90      	pop	{r4, r7}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008

08000bf4 <MGPIO_voidSetPinValue>:
void MGPIO_voidSetPinValue(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,PinValue_t Copy_uddtPinValue)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
 8000bfe:	460b      	mov	r3, r1
 8000c00:	71bb      	strb	r3, [r7, #6]
 8000c02:	4613      	mov	r3, r2
 8000c04:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d108      	bne.n	8000c1e <MGPIO_voidSetPinValue+0x2a>
 8000c0c:	79bb      	ldrb	r3, [r7, #6]
 8000c0e:	2b0d      	cmp	r3, #13
 8000c10:	d033      	beq.n	8000c7a <MGPIO_voidSetPinValue+0x86>
 8000c12:	79bb      	ldrb	r3, [r7, #6]
 8000c14:	2b0e      	cmp	r3, #14
 8000c16:	d030      	beq.n	8000c7a <MGPIO_voidSetPinValue+0x86>
 8000c18:	79bb      	ldrb	r3, [r7, #6]
 8000c1a:	2b0f      	cmp	r3, #15
 8000c1c:	d02d      	beq.n	8000c7a <MGPIO_voidSetPinValue+0x86>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000c1e:	79fb      	ldrb	r3, [r7, #7]
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d108      	bne.n	8000c36 <MGPIO_voidSetPinValue+0x42>
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d029      	beq.n	8000c7e <MGPIO_voidSetPinValue+0x8a>
 8000c2a:	79bb      	ldrb	r3, [r7, #6]
 8000c2c:	2b04      	cmp	r3, #4
 8000c2e:	d026      	beq.n	8000c7e <MGPIO_voidSetPinValue+0x8a>
 8000c30:	79bb      	ldrb	r3, [r7, #6]
 8000c32:	2b05      	cmp	r3, #5
 8000c34:	d023      	beq.n	8000c7e <MGPIO_voidSetPinValue+0x8a>
	{
		
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->ODR&=~(1<<(Copy_uddtPin));
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4a14      	ldr	r2, [pc, #80]	@ (8000c8c <MGPIO_voidSetPinValue+0x98>)
 8000c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c3e:	695a      	ldr	r2, [r3, #20]
 8000c40:	79bb      	ldrb	r3, [r7, #6]
 8000c42:	2101      	movs	r1, #1
 8000c44:	fa01 f303 	lsl.w	r3, r1, r3
 8000c48:	43db      	mvns	r3, r3
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	490f      	ldr	r1, [pc, #60]	@ (8000c8c <MGPIO_voidSetPinValue+0x98>)
 8000c50:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c54:	4002      	ands	r2, r0
 8000c56:	615a      	str	r2, [r3, #20]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->ODR|=(Copy_uddtPinValue<<(Copy_uddtPin));
 8000c58:	79fb      	ldrb	r3, [r7, #7]
 8000c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8000c8c <MGPIO_voidSetPinValue+0x98>)
 8000c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c60:	695a      	ldr	r2, [r3, #20]
 8000c62:	7979      	ldrb	r1, [r7, #5]
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
 8000c6e:	4907      	ldr	r1, [pc, #28]	@ (8000c8c <MGPIO_voidSetPinValue+0x98>)
 8000c70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000c74:	4302      	orrs	r2, r0
 8000c76:	615a      	str	r2, [r3, #20]
//			GPIOC->ODR&=~(1<<Copy_uddtPin);
//			GPIOC->ODR|=(Copy_uddtPinValue<<Copy_uddtPin);
//			break;
//		}
	}
}
 8000c78:	e002      	b.n	8000c80 <MGPIO_voidSetPinValue+0x8c>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000c7a:	bf00      	nop
 8000c7c:	e000      	b.n	8000c80 <MGPIO_voidSetPinValue+0x8c>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000c7e:	bf00      	nop
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	20000008 	.word	0x20000008

08000c90 <MGPIO_voidSetInputConfig>:
//		}
	}
}

void MGPIO_voidSetInputConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Input_t Copy_uddtType)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	71fb      	strb	r3, [r7, #7]
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	71bb      	strb	r3, [r7, #6]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000ca2:	79fb      	ldrb	r3, [r7, #7]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d108      	bne.n	8000cba <MGPIO_voidSetInputConfig+0x2a>
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	2b0d      	cmp	r3, #13
 8000cac:	d035      	beq.n	8000d1a <MGPIO_voidSetInputConfig+0x8a>
 8000cae:	79bb      	ldrb	r3, [r7, #6]
 8000cb0:	2b0e      	cmp	r3, #14
 8000cb2:	d032      	beq.n	8000d1a <MGPIO_voidSetInputConfig+0x8a>
 8000cb4:	79bb      	ldrb	r3, [r7, #6]
 8000cb6:	2b0f      	cmp	r3, #15
 8000cb8:	d02f      	beq.n	8000d1a <MGPIO_voidSetInputConfig+0x8a>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <MGPIO_voidSetInputConfig+0x42>
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	2b03      	cmp	r3, #3
 8000cc4:	d02b      	beq.n	8000d1e <MGPIO_voidSetInputConfig+0x8e>
 8000cc6:	79bb      	ldrb	r3, [r7, #6]
 8000cc8:	2b04      	cmp	r3, #4
 8000cca:	d028      	beq.n	8000d1e <MGPIO_voidSetInputConfig+0x8e>
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	d025      	beq.n	8000d1e <MGPIO_voidSetInputConfig+0x8e>
	{
		
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->PUPDR&=~(MUSK<<(Copy_uddtPin*2));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	4a15      	ldr	r2, [pc, #84]	@ (8000d2c <MGPIO_voidSetInputConfig+0x9c>)
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	68da      	ldr	r2, [r3, #12]
 8000cdc:	79bb      	ldrb	r3, [r7, #6]
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	2103      	movs	r1, #3
 8000ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	490f      	ldr	r1, [pc, #60]	@ (8000d2c <MGPIO_voidSetInputConfig+0x9c>)
 8000cee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000cf2:	4002      	ands	r2, r0
 8000cf4:	60da      	str	r2, [r3, #12]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->PUPDR|=(Copy_uddtType<<(Copy_uddtPin*2));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8000d2c <MGPIO_voidSetInputConfig+0x9c>)
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	68da      	ldr	r2, [r3, #12]
 8000d00:	7979      	ldrb	r1, [r7, #5]
 8000d02:	79bb      	ldrb	r3, [r7, #6]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	79fb      	ldrb	r3, [r7, #7]
 8000d0e:	4907      	ldr	r1, [pc, #28]	@ (8000d2c <MGPIO_voidSetInputConfig+0x9c>)
 8000d10:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000d14:	4302      	orrs	r2, r0
 8000d16:	60da      	str	r2, [r3, #12]
//			GPIOC->PUPDR&=~(MUSK<<(Copy_uddtPin*2));
//			GPIOC->PUPDR|=(Copy_uddtType<<(Copy_uddtPin*2));
//			break;
//		}
	}
}
 8000d18:	e002      	b.n	8000d20 <MGPIO_voidSetInputConfig+0x90>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000d1a:	bf00      	nop
 8000d1c:	e000      	b.n	8000d20 <MGPIO_voidSetInputConfig+0x90>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000d1e:	bf00      	nop
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr
 8000d2c:	20000008 	.word	0x20000008

08000d30 <MGPIO_u8GetPinValue>:
u8 MGPIO_u8GetPinValue(Port_t Copy_uddtPort,PIN_t Copy_uddtPin)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b085      	sub	sp, #20
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	71fb      	strb	r3, [r7, #7]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	71bb      	strb	r3, [r7, #6]
	u8 Copy_u8PinValue=0;
 8000d40:	2300      	movs	r3, #0
 8000d42:	73fb      	strb	r3, [r7, #15]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d108      	bne.n	8000d5c <MGPIO_u8GetPinValue+0x2c>
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b0d      	cmp	r3, #13
 8000d4e:	d01e      	beq.n	8000d8e <MGPIO_u8GetPinValue+0x5e>
 8000d50:	79bb      	ldrb	r3, [r7, #6]
 8000d52:	2b0e      	cmp	r3, #14
 8000d54:	d01b      	beq.n	8000d8e <MGPIO_u8GetPinValue+0x5e>
 8000d56:	79bb      	ldrb	r3, [r7, #6]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d018      	beq.n	8000d8e <MGPIO_u8GetPinValue+0x5e>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d108      	bne.n	8000d74 <MGPIO_u8GetPinValue+0x44>
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	2b03      	cmp	r3, #3
 8000d66:	d014      	beq.n	8000d92 <MGPIO_u8GetPinValue+0x62>
 8000d68:	79bb      	ldrb	r3, [r7, #6]
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	d011      	beq.n	8000d92 <MGPIO_u8GetPinValue+0x62>
 8000d6e:	79bb      	ldrb	r3, [r7, #6]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	d00e      	beq.n	8000d92 <MGPIO_u8GetPinValue+0x62>
	{
		
	}
	else
	{
		Copy_u8PinValue=GET_BIT(ARRAY_BASE_ADDRESS[Copy_uddtPort]->IDR,Copy_uddtPin);
 8000d74:	79fb      	ldrb	r3, [r7, #7]
 8000d76:	4a0b      	ldr	r2, [pc, #44]	@ (8000da4 <MGPIO_u8GetPinValue+0x74>)
 8000d78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d7c:	691a      	ldr	r2, [r3, #16]
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	fa22 f303 	lsr.w	r3, r2, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	73fb      	strb	r3, [r7, #15]
 8000d8c:	e002      	b.n	8000d94 <MGPIO_u8GetPinValue+0x64>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000d8e:	bf00      	nop
 8000d90:	e000      	b.n	8000d94 <MGPIO_u8GetPinValue+0x64>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000d92:	bf00      	nop
//			case PORTC:
//			Copy_u8PinValue=GET_BIT(GPIOC->IDR,Copy_uddtPin);
//			break;
//		}
	}
	return Copy_u8PinValue;
 8000d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3714      	adds	r7, #20
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	20000008 	.word	0x20000008

08000da8 <MGPIO_voidSetAlternativeConfig>:

void MGPIO_voidSetAlternativeConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Alternative_t Copy_uddtType)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
 8000db2:	460b      	mov	r3, r1
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	4613      	mov	r3, r2
 8000db8:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d108      	bne.n	8000dd2 <MGPIO_voidSetAlternativeConfig+0x2a>
 8000dc0:	79bb      	ldrb	r3, [r7, #6]
 8000dc2:	2b0d      	cmp	r3, #13
 8000dc4:	d062      	beq.n	8000e8c <MGPIO_voidSetAlternativeConfig+0xe4>
 8000dc6:	79bb      	ldrb	r3, [r7, #6]
 8000dc8:	2b0e      	cmp	r3, #14
 8000dca:	d05f      	beq.n	8000e8c <MGPIO_voidSetAlternativeConfig+0xe4>
 8000dcc:	79bb      	ldrb	r3, [r7, #6]
 8000dce:	2b0f      	cmp	r3, #15
 8000dd0:	d05c      	beq.n	8000e8c <MGPIO_voidSetAlternativeConfig+0xe4>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d108      	bne.n	8000dea <MGPIO_voidSetAlternativeConfig+0x42>
 8000dd8:	79bb      	ldrb	r3, [r7, #6]
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d058      	beq.n	8000e90 <MGPIO_voidSetAlternativeConfig+0xe8>
 8000dde:	79bb      	ldrb	r3, [r7, #6]
 8000de0:	2b04      	cmp	r3, #4
 8000de2:	d055      	beq.n	8000e90 <MGPIO_voidSetAlternativeConfig+0xe8>
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	2b05      	cmp	r3, #5
 8000de8:	d052      	beq.n	8000e90 <MGPIO_voidSetAlternativeConfig+0xe8>
	{
		
	}
	else
	{
		if(Copy_uddtPin<8)
 8000dea:	79bb      	ldrb	r3, [r7, #6]
 8000dec:	2b07      	cmp	r3, #7
 8000dee:	d823      	bhi.n	8000e38 <MGPIO_voidSetAlternativeConfig+0x90>
		{
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRL&=~(ALT_MUSK<<(Copy_uddtPin*4));
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	4a2b      	ldr	r2, [pc, #172]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000df8:	6a1a      	ldr	r2, [r3, #32]
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	009b      	lsls	r3, r3, #2
 8000dfe:	210f      	movs	r1, #15
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4618      	mov	r0, r3
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	4925      	ldr	r1, [pc, #148]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e0c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e10:	4002      	ands	r2, r0
 8000e12:	621a      	str	r2, [r3, #32]
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRL|=(Copy_uddtType<<(Copy_uddtPin*4));
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	4a22      	ldr	r2, [pc, #136]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	7979      	ldrb	r1, [r7, #5]
 8000e20:	79bb      	ldrb	r3, [r7, #6]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4618      	mov	r0, r3
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	491c      	ldr	r1, [pc, #112]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e32:	4302      	orrs	r2, r0
 8000e34:	621a      	str	r2, [r3, #32]
//				GPIOC->AFRH|=(Copy_uddtType<<(Copy_uddtPin*4));
//			}
//			break;
//		}
	}
}
 8000e36:	e02c      	b.n	8000e92 <MGPIO_voidSetAlternativeConfig+0xea>
		else if(Copy_uddtPin<16)
 8000e38:	79bb      	ldrb	r3, [r7, #6]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	d829      	bhi.n	8000e92 <MGPIO_voidSetAlternativeConfig+0xea>
			Copy_uddtPin-=8;
 8000e3e:	79bb      	ldrb	r3, [r7, #6]
 8000e40:	3b08      	subs	r3, #8
 8000e42:	71bb      	strb	r3, [r7, #6]
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRH&=~(ALT_MUSK<<(Copy_uddtPin*4));
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	4a16      	ldr	r2, [pc, #88]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e4c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e4e:	79bb      	ldrb	r3, [r7, #6]
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	210f      	movs	r1, #15
 8000e54:	fa01 f303 	lsl.w	r3, r1, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	4910      	ldr	r1, [pc, #64]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e64:	4002      	ands	r2, r0
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRH|=(Copy_uddtType<<(Copy_uddtPin*4));
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e72:	7979      	ldrb	r1, [r7, #5]
 8000e74:	79bb      	ldrb	r3, [r7, #6]
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4907      	ldr	r1, [pc, #28]	@ (8000ea0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000e82:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e86:	4302      	orrs	r2, r0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000e8a:	e002      	b.n	8000e92 <MGPIO_voidSetAlternativeConfig+0xea>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000e8c:	bf00      	nop
 8000e8e:	e000      	b.n	8000e92 <MGPIO_voidSetAlternativeConfig+0xea>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 8000e90:	bf00      	nop
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000008 	.word	0x20000008

08000ea4 <MRCC_voidInit>:
#include "MRCC_Interface.h"
#include "MRCC_Private.h"


void MRCC_voidInit(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	#if (SYSTEM_CLOCK==HSI_CLOCK)
		//HSI ON
	     RCC->CR|=(1<<HSION);
 8000ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]
	    //Wait till HSI ready
		while(!GET_BIT(RCC->CR,HSIRDY));
 8000eb4:	bf00      	nop
 8000eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	085b      	lsrs	r3, r3, #1
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0f8      	beq.n	8000eb6 <MRCC_voidInit+0x12>
		//Switch to HSI
		RCC->CFGR&=(MUSK<<SW0);
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4a06      	ldr	r2, [pc, #24]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000eca:	f003 0303 	and.w	r3, r3, #3
 8000ece:	6093      	str	r3, [r2, #8]
		RCC->CFGR|=(HSI_Oscillator<<SW0);
 8000ed0:	4b04      	ldr	r3, [pc, #16]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000ed2:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <MRCC_voidInit+0x40>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	6093      	str	r3, [r2, #8]
		RCC->CR|=(1<<PLLON);
		while(!GET_BIT(RCC->CR,PLLRDY));
		RCC->CFGR&=(MUSK<<SW0);
		RCC->CFGR|=(PLL<<SW0);
	#endif
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800

08000ee8 <MRCC_voidEnablePeripheralClock>:

void MRCC_voidEnablePeripheralClock(System_Bus Copy_uddtBus,u32 Copy_u32Peripheral)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	6039      	str	r1, [r7, #0]
 8000ef2:	71fb      	strb	r3, [r7, #7]
	if(Copy_u32Peripheral<32)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	2b1f      	cmp	r3, #31
 8000ef8:	d83a      	bhi.n	8000f70 <MRCC_voidEnablePeripheralClock+0x88>
	{
		switch(Copy_uddtBus)
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d837      	bhi.n	8000f70 <MRCC_voidEnablePeripheralClock+0x88>
 8000f00:	a201      	add	r2, pc, #4	@ (adr r2, 8000f08 <MRCC_voidEnablePeripheralClock+0x20>)
 8000f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f06:	bf00      	nop
 8000f08:	08000f19 	.word	0x08000f19
 8000f0c:	08000f2f 	.word	0x08000f2f
 8000f10:	08000f45 	.word	0x08000f45
 8000f14:	08000f5b 	.word	0x08000f5b
		{
			case AHB1_BUS: RCC->AHB1ENR|=(1<<Copy_u32Peripheral);        break;
 8000f18:	4b18      	ldr	r3, [pc, #96]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	fa01 f202 	lsl.w	r2, r1, r2
 8000f24:	4611      	mov	r1, r2
 8000f26:	4a15      	ldr	r2, [pc, #84]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f28:	430b      	orrs	r3, r1
 8000f2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2c:	e020      	b.n	8000f70 <MRCC_voidEnablePeripheralClock+0x88>
			case AHB2_BUS: RCC->AHB2ENR|=(1<<Copy_u32Peripheral);        break;
 8000f2e:	4b13      	ldr	r3, [pc, #76]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f32:	2101      	movs	r1, #1
 8000f34:	683a      	ldr	r2, [r7, #0]
 8000f36:	fa01 f202 	lsl.w	r2, r1, r2
 8000f3a:	4611      	mov	r1, r2
 8000f3c:	4a0f      	ldr	r2, [pc, #60]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	6353      	str	r3, [r2, #52]	@ 0x34
 8000f42:	e015      	b.n	8000f70 <MRCC_voidEnablePeripheralClock+0x88>
			case APB1_BUS: RCC->APB1ENR|=(1<<Copy_u32Peripheral);        break;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f48:	2101      	movs	r1, #1
 8000f4a:	683a      	ldr	r2, [r7, #0]
 8000f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f50:	4611      	mov	r1, r2
 8000f52:	4a0a      	ldr	r2, [pc, #40]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f54:	430b      	orrs	r3, r1
 8000f56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f58:	e00a      	b.n	8000f70 <MRCC_voidEnablePeripheralClock+0x88>
			case APB2_BUS: RCC->APB2ENR|=(1<<Copy_u32Peripheral);        break;
 8000f5a:	4b08      	ldr	r3, [pc, #32]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	2101      	movs	r1, #1
 8000f60:	683a      	ldr	r2, [r7, #0]
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	4611      	mov	r1, r2
 8000f68:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <MRCC_voidEnablePeripheralClock+0x94>)
 8000f6a:	430b      	orrs	r3, r1
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	bf00      	nop
	}
	else
	{
		//Do Nothing
	}
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800

08000f80 <MSPI_voidMasterInit>:
#include "MSPI_Interface.h"
#include "MSPI_Private.h"
#include "MSPI_Config.h"

void MSPI_voidMasterInit()
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
	SPI1->CR1|=(1<<SSM);
 8000f84:	4b11      	ldr	r3, [pc, #68]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8e:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=(1<<SSI);
 8000f90:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000f96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f9a:	6013      	str	r3, [r2, #0]
	
	SPI1->CR1|=(1<<MSTR);
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0a      	ldr	r2, [pc, #40]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000fa2:	f043 0304 	orr.w	r3, r3, #4
 8000fa6:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=(1<<CPOL);
 8000fa8:	4b08      	ldr	r3, [pc, #32]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a07      	ldr	r2, [pc, #28]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000fae:	f043 0302 	orr.w	r3, r3, #2
 8000fb2:	6013      	str	r3, [r2, #0]
	
	SPI1->CR1|=(1<<SPE);
 8000fb4:	4b05      	ldr	r3, [pc, #20]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	@ (8000fcc <MSPI_voidMasterInit+0x4c>)
 8000fba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000fbe:	6013      	str	r3, [r2, #0]
	
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	40013000 	.word	0x40013000

08000fd0 <MSPI_u16Tranceive>:
	SPI1->CR1|=(1<<CPOL);
	
	SPI1->CR1|=(1<<SPE);
}
u16 MSPI_u16Tranceive(u16 Copy_u16Data)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
	while(!GET_BIT(SPI1->SR,TXE));
 8000fda:	bf00      	nop
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MSPI_u16Tranceive+0x40>)
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	085b      	lsrs	r3, r3, #1
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d0f8      	beq.n	8000fdc <MSPI_u16Tranceive+0xc>
	SPI1->DR=Copy_u16Data;
 8000fea:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <MSPI_u16Tranceive+0x40>)
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	60d3      	str	r3, [r2, #12]
	while(!GET_BIT(SPI1->SR,RXNE));
 8000ff0:	bf00      	nop
 8000ff2:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MSPI_u16Tranceive+0x40>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d0f9      	beq.n	8000ff2 <MSPI_u16Tranceive+0x22>
	return (u16)(SPI1->DR);
 8000ffe:	4b04      	ldr	r3, [pc, #16]	@ (8001010 <MSPI_u16Tranceive+0x40>)
 8001000:	68db      	ldr	r3, [r3, #12]
 8001002:	b29b      	uxth	r3, r3
}
 8001004:	4618      	mov	r0, r3
 8001006:	370c      	adds	r7, #12
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	40013000 	.word	0x40013000

08001014 <MSTK_voidInit>:


static volatile u32 G_u32TickCounter = 0;

void MSTK_voidInit()
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
	#if (STK_SYSTEM_CLK==STK_AHB_8)
		STK->CTRL&=~(1<<CLOCK_SOURCE);
 8001018:	4b08      	ldr	r3, [pc, #32]	@ (800103c <MSTK_voidInit+0x28>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a07      	ldr	r2, [pc, #28]	@ (800103c <MSTK_voidInit+0x28>)
 800101e:	f023 0304 	bic.w	r3, r3, #4
 8001022:	6013      	str	r3, [r2, #0]
	    STK->CTRL&=~(1<<STK_ENABLE);
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <MSTK_voidInit+0x28>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <MSTK_voidInit+0x28>)
 800102a:	f023 0301 	bic.w	r3, r3, #1
 800102e:	6013      	str	r3, [r2, #0]
	#elif (STK_SYSTEM_CLK==STK_AHB)
		STK->CTRL|=(1<<CLOCK_SOURCE);
	STK->CTRL&=~(1<<STK_ENABLE);
	#endif
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <MSTK_voidStartTimer>:
void MSTK_voidStartTimer(u32 Copy_u32ReloadValue)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
	STK->LOAD=Copy_u32ReloadValue;
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <MSTK_voidStartTimer+0x2c>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 800104e:	4b07      	ldr	r3, [pc, #28]	@ (800106c <MSTK_voidStartTimer+0x2c>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
	STK->CTRL|=(1<<STK_ENABLE);
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <MSTK_voidStartTimer+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a04      	ldr	r2, [pc, #16]	@ (800106c <MSTK_voidStartTimer+0x2c>)
 800105a:	f043 0301 	orr.w	r3, r3, #1
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	e000e010 	.word	0xe000e010

08001070 <MSTK_voidCtrlIntState>:
void MSTK_voidCtrlIntState(STK_IntState Copy_uddtIntState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
	STK->CTRL|=(Copy_uddtIntState<<TICKINT);
 800107a:	4b06      	ldr	r3, [pc, #24]	@ (8001094 <MSTK_voidCtrlIntState+0x24>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	4904      	ldr	r1, [pc, #16]	@ (8001094 <MSTK_voidCtrlIntState+0x24>)
 8001084:	4313      	orrs	r3, r2
 8001086:	600b      	str	r3, [r1, #0]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e010 	.word	0xe000e010

08001098 <MSTK_u8ReadFlag>:
u8 MSTK_u8ReadFlag()
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
	return GET_BIT(STK->CTRL,COUNT_FLAG);
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <MSTK_u8ReadFlag+0x1c>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	0c1b      	lsrs	r3, r3, #16
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	b2db      	uxtb	r3, r3
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <MSTK_voidDelayms>:
{
	return (STK->VAL);
}

void MSTK_voidDelayms(u32 Copy_u32Delayms)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 80010c0:	2000      	movs	r0, #0
 80010c2:	f7ff ffd5 	bl	8001070 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayms*2000);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80010cc:	fb02 f303 	mul.w	r3, r2, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ffb5 	bl	8001040 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 80010d6:	bf00      	nop
 80010d8:	f7ff ffde 	bl	8001098 <MSTK_u8ReadFlag>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d0fa      	beq.n	80010d8 <MSTK_voidDelayms+0x20>
	STK->CTRL&=~(1<<STK_ENABLE);
 80010e2:	4b05      	ldr	r3, [pc, #20]	@ (80010f8 <MSTK_voidDelayms+0x40>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <MSTK_voidDelayms+0x40>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6013      	str	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	e000e010 	.word	0xe000e010

080010fc <MSTK_voidDelayus>:
void MSTK_voidDelayus(u32 Copy_u32Delayus)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 8001104:	2000      	movs	r0, #0
 8001106:	f7ff ffb3 	bl	8001070 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayus*2);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff96 	bl	8001040 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 8001114:	bf00      	nop
 8001116:	f7ff ffbf 	bl	8001098 <MSTK_u8ReadFlag>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d0fa      	beq.n	8001116 <MSTK_voidDelayus+0x1a>
	STK->CTRL&=~(1<<STK_ENABLE);
 8001120:	4b04      	ldr	r3, [pc, #16]	@ (8001134 <MSTK_voidDelayus+0x38>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a03      	ldr	r2, [pc, #12]	@ (8001134 <MSTK_voidDelayus+0x38>)
 8001126:	f023 0301 	bic.w	r3, r3, #1
 800112a:	6013      	str	r3, [r2, #0]
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	e000e010 	.word	0xe000e010

08001138 <MSTK_voidIncrementTicks>:

// في ملف MSTK_Program.c، أضف هذه الدالة في آخره
void MSTK_voidIncrementTicks(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
    G_u32TickCounter++;
 800113c:	4b04      	ldr	r3, [pc, #16]	@ (8001150 <MSTK_voidIncrementTicks+0x18>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	3301      	adds	r3, #1
 8001142:	4a03      	ldr	r2, [pc, #12]	@ (8001150 <MSTK_voidIncrementTicks+0x18>)
 8001144:	6013      	str	r3, [r2, #0]
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	20000090 	.word	0x20000090

08001154 <Snake_Game_voidRun>:
};

/*******************************************************************************
* THE MODIFIED GAME LOOP                             *
*******************************************************************************/
void Snake_Game_voidRun(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
    Snake_voidInit();
 800115a:	f000 fb75 	bl	8001848 <Snake_voidInit>
    Sound_voidInit(); /* NEW - Initialize Buzzer Pin */
 800115e:	f000 fa9d 	bl	800169c <Sound_voidInit>
    GUI_voidDrawInitialState();
 8001162:	f000 f933 	bl	80013cc <GUI_voidDrawInitialState>

    u32 move_interval = 300; // ms, a smaller value means a faster snake
 8001166:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800116a:	607b      	str	r3, [r7, #4]

    while (1) {
        if (debounce(CLOCKWISE_BUTTON_PORT, CLOCKWISE_BUTTON_PIN)) {
 800116c:	2108      	movs	r1, #8
 800116e:	2001      	movs	r0, #1
 8001170:	f000 f9de 	bl	8001530 <debounce>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <Snake_Game_voidRun+0x30>
            Sound_voidPlayClick(); /* NEW - Play click sound */
 800117a:	f000 fae5 	bl	8001748 <Sound_voidPlayClick>
            Snake_voidChangeDirection(TURN_CLOCKWISE);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fba6 	bl	80018d0 <Snake_voidChangeDirection>
        }
        if (debounce(COUNTER_CW_BUTTON_PORT, COUNTER_CW_BUTTON_PIN)) {
 8001184:	2106      	movs	r1, #6
 8001186:	2001      	movs	r0, #1
 8001188:	f000 f9d2 	bl	8001530 <debounce>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d004      	beq.n	800119c <Snake_Game_voidRun+0x48>
            Sound_voidPlayClick(); /* NEW - Play click sound */
 8001192:	f000 fad9 	bl	8001748 <Sound_voidPlayClick>
            Snake_voidChangeDirection(TURN_COUNTER_CLOCKWISE);
 8001196:	2002      	movs	r0, #2
 8001198:	f000 fb9a 	bl	80018d0 <Snake_voidChangeDirection>
        }

        if (Snake_u8Move() == SNAKE_GAME_OVER) {
 800119c:	f000 fbea 	bl	8001974 <Snake_u8Move>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d108      	bne.n	80011b8 <Snake_Game_voidRun+0x64>
            Sound_voidPlayGameOver(); /* NEW - Play game over sound */
 80011a6:	f000 fae9 	bl	800177c <Sound_voidPlayGameOver>
            GUI_voidShowGameOver();
 80011aa:	f000 f97b 	bl	80014a4 <GUI_voidShowGameOver>
            MSTK_voidDelayms(4000);
 80011ae:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80011b2:	f7ff ff81 	bl	80010b8 <MSTK_voidDelayms>
            return;
 80011b6:	e01f      	b.n	80011f8 <Snake_Game_voidRun+0xa4>
        }

        GUI_voidUpdateScreen();
 80011b8:	f000 f937 	bl	800142a <GUI_voidUpdateScreen>

        if (Snake_u16GetScore() > 0 && Snake_u16GetScore() % 5 == 0 && move_interval > 100) {
 80011bc:	f000 fd1a 	bl	8001bf4 <Snake_u16GetScore>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d014      	beq.n	80011f0 <Snake_Game_voidRun+0x9c>
 80011c6:	f000 fd15 	bl	8001bf4 <Snake_u16GetScore>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001200 <Snake_Game_voidRun+0xac>)
 80011d0:	fba3 1302 	umull	r1, r3, r3, r2
 80011d4:	0899      	lsrs	r1, r3, #2
 80011d6:	460b      	mov	r3, r1
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	440b      	add	r3, r1
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d105      	bne.n	80011f0 <Snake_Game_voidRun+0x9c>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b64      	cmp	r3, #100	@ 0x64
 80011e8:	d902      	bls.n	80011f0 <Snake_Game_voidRun+0x9c>
             move_interval -= 20;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3b14      	subs	r3, #20
 80011ee:	607b      	str	r3, [r7, #4]
        }

        MSTK_voidDelayms(move_interval);
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff61 	bl	80010b8 <MSTK_voidDelayms>
        if (debounce(CLOCKWISE_BUTTON_PORT, CLOCKWISE_BUTTON_PIN)) {
 80011f6:	e7b9      	b.n	800116c <Snake_Game_voidRun+0x18>
    }
}
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	cccccccd 	.word	0xcccccccd

08001204 <GUI_voidDrawSnakeSegment>:

/*******************************************************************************
* DRAWING FUNCTIONS                                                            *
*******************************************************************************/
static void GUI_voidDrawSnakeSegment(u8 x_grid, u8 y_grid, u16 color) {
 8001204:	b590      	push	{r4, r7, lr}
 8001206:	b087      	sub	sp, #28
 8001208:	af02      	add	r7, sp, #8
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	80bb      	strh	r3, [r7, #4]
    u16 x_pos = x_grid * SNAKE_CELL_SIZE;
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	b29b      	uxth	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4413      	add	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	81fb      	strh	r3, [r7, #14]
    u16 y_pos = GAME_AREA_Y + (y_grid * SNAKE_CELL_SIZE);
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	b29b      	uxth	r3, r3
 8001228:	461a      	mov	r2, r3
 800122a:	0092      	lsls	r2, r2, #2
 800122c:	4413      	add	r3, r2
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	3314      	adds	r3, #20
 8001234:	81bb      	strh	r3, [r7, #12]
    u8 size = SNAKE_CELL_SIZE;
 8001236:	230a      	movs	r3, #10
 8001238:	72fb      	strb	r3, [r7, #11]

    if (size < 5) {
 800123a:	7afb      	ldrb	r3, [r7, #11]
 800123c:	2b04      	cmp	r3, #4
 800123e:	d80b      	bhi.n	8001258 <GUI_voidDrawSnakeSegment+0x54>
        HTFT_voidFillRect(x_pos, y_pos, size, size, color);
 8001240:	89fb      	ldrh	r3, [r7, #14]
 8001242:	b2d8      	uxtb	r0, r3
 8001244:	89bb      	ldrh	r3, [r7, #12]
 8001246:	b2d9      	uxtb	r1, r3
 8001248:	7afc      	ldrb	r4, [r7, #11]
 800124a:	7afa      	ldrb	r2, [r7, #11]
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	4623      	mov	r3, r4
 8001252:	f7ff fbd7 	bl	8000a04 <HTFT_voidFillRect>
        return;
 8001256:	e024      	b.n	80012a2 <GUI_voidDrawSnakeSegment+0x9e>
    }

    u8 offset = size / 4;
 8001258:	7afb      	ldrb	r3, [r7, #11]
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	72bb      	strb	r3, [r7, #10]
    u8 length = size - (2 * offset);
 800125e:	7abb      	ldrb	r3, [r7, #10]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	b2db      	uxtb	r3, r3
 8001264:	7afa      	ldrb	r2, [r7, #11]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	727b      	strb	r3, [r7, #9]
    HTFT_voidFillRect(x_pos + offset, y_pos, length, size, color);
 800126a:	89fb      	ldrh	r3, [r7, #14]
 800126c:	b2da      	uxtb	r2, r3
 800126e:	7abb      	ldrb	r3, [r7, #10]
 8001270:	4413      	add	r3, r2
 8001272:	b2d8      	uxtb	r0, r3
 8001274:	89bb      	ldrh	r3, [r7, #12]
 8001276:	b2d9      	uxtb	r1, r3
 8001278:	7afc      	ldrb	r4, [r7, #11]
 800127a:	7a7a      	ldrb	r2, [r7, #9]
 800127c:	88bb      	ldrh	r3, [r7, #4]
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	4623      	mov	r3, r4
 8001282:	f7ff fbbf 	bl	8000a04 <HTFT_voidFillRect>
    HTFT_voidFillRect(x_pos, y_pos + offset, size, length, color);
 8001286:	89fb      	ldrh	r3, [r7, #14]
 8001288:	b2d8      	uxtb	r0, r3
 800128a:	89bb      	ldrh	r3, [r7, #12]
 800128c:	b2da      	uxtb	r2, r3
 800128e:	7abb      	ldrb	r3, [r7, #10]
 8001290:	4413      	add	r3, r2
 8001292:	b2d9      	uxtb	r1, r3
 8001294:	7a7c      	ldrb	r4, [r7, #9]
 8001296:	7afa      	ldrb	r2, [r7, #11]
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	4623      	mov	r3, r4
 800129e:	f7ff fbb1 	bl	8000a04 <HTFT_voidFillRect>
}
 80012a2:	3714      	adds	r7, #20
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd90      	pop	{r4, r7, pc}

080012a8 <GUI_voidDrawFood>:

static void GUI_voidDrawFood(u8 x_grid, u8 y_grid, u16 color) {
 80012a8:	b590      	push	{r4, r7, lr}
 80012aa:	b087      	sub	sp, #28
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	460b      	mov	r3, r1
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	4613      	mov	r3, r2
 80012b8:	80bb      	strh	r3, [r7, #4]
    GUI_voidDrawSnakeSegment(x_grid, y_grid, color);
 80012ba:	88ba      	ldrh	r2, [r7, #4]
 80012bc:	79b9      	ldrb	r1, [r7, #6]
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff9f 	bl	8001204 <GUI_voidDrawSnakeSegment>
    u16 x_pos = x_grid * SNAKE_CELL_SIZE;
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	461a      	mov	r2, r3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	81fb      	strh	r3, [r7, #14]
    u16 y_pos = GAME_AREA_Y + (y_grid * SNAKE_CELL_SIZE);
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	461a      	mov	r2, r3
 80012da:	0092      	lsls	r2, r2, #2
 80012dc:	4413      	add	r3, r2
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	3314      	adds	r3, #20
 80012e4:	81bb      	strh	r3, [r7, #12]
    u8 size = SNAKE_CELL_SIZE;
 80012e6:	230a      	movs	r3, #10
 80012e8:	72fb      	strb	r3, [r7, #11]

    if (size > 6) {
 80012ea:	7afb      	ldrb	r3, [r7, #11]
 80012ec:	2b06      	cmp	r3, #6
 80012ee:	d91f      	bls.n	8001330 <GUI_voidDrawFood+0x88>
        u8 stem_width = (size / 4 > 0) ? size / 4 : 1;
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d903      	bls.n	80012fe <GUI_voidDrawFood+0x56>
 80012f6:	7afb      	ldrb	r3, [r7, #11]
 80012f8:	089b      	lsrs	r3, r3, #2
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	e000      	b.n	8001300 <GUI_voidDrawFood+0x58>
 80012fe:	2301      	movs	r3, #1
 8001300:	72bb      	strb	r3, [r7, #10]
        u8 stem_height = stem_width;
 8001302:	7abb      	ldrb	r3, [r7, #10]
 8001304:	727b      	strb	r3, [r7, #9]
        u8 stem_x_offset = (size - stem_width) / 2;
 8001306:	7afa      	ldrb	r2, [r7, #11]
 8001308:	7abb      	ldrb	r3, [r7, #10]
 800130a:	1ad3      	subs	r3, r2, r3
 800130c:	0fda      	lsrs	r2, r3, #31
 800130e:	4413      	add	r3, r2
 8001310:	105b      	asrs	r3, r3, #1
 8001312:	723b      	strb	r3, [r7, #8]
        HTFT_voidFillRect(x_pos + stem_x_offset, y_pos, stem_width, stem_height, STEM_GREEN);
 8001314:	89fb      	ldrh	r3, [r7, #14]
 8001316:	b2da      	uxtb	r2, r3
 8001318:	7a3b      	ldrb	r3, [r7, #8]
 800131a:	4413      	add	r3, r2
 800131c:	b2d8      	uxtb	r0, r3
 800131e:	89bb      	ldrh	r3, [r7, #12]
 8001320:	b2d9      	uxtb	r1, r3
 8001322:	7a7b      	ldrb	r3, [r7, #9]
 8001324:	7aba      	ldrb	r2, [r7, #10]
 8001326:	f44f 6494 	mov.w	r4, #1184	@ 0x4a0
 800132a:	9400      	str	r4, [sp, #0]
 800132c:	f7ff fb6a 	bl	8000a04 <HTFT_voidFillRect>
    }
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	bd90      	pop	{r4, r7, pc}

08001338 <GUI_voidEraseCell>:

static void GUI_voidEraseCell(u8 x_grid, u8 y_grid) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b086      	sub	sp, #24
 800133c:	af02      	add	r7, sp, #8
 800133e:	4603      	mov	r3, r0
 8001340:	460a      	mov	r2, r1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	4613      	mov	r3, r2
 8001346:	71bb      	strb	r3, [r7, #6]
    u16 x_pos = x_grid * SNAKE_CELL_SIZE;
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	b29b      	uxth	r3, r3
 800134c:	461a      	mov	r2, r3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4413      	add	r3, r2
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	81fb      	strh	r3, [r7, #14]
    u16 y_pos = GAME_AREA_Y + (y_grid * SNAKE_CELL_SIZE);
 8001356:	79bb      	ldrb	r3, [r7, #6]
 8001358:	b29b      	uxth	r3, r3
 800135a:	461a      	mov	r2, r3
 800135c:	0092      	lsls	r2, r2, #2
 800135e:	4413      	add	r3, r2
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	b29b      	uxth	r3, r3
 8001364:	3314      	adds	r3, #20
 8001366:	81bb      	strh	r3, [r7, #12]
    HTFT_voidFillRect(x_pos, y_pos, SNAKE_CELL_SIZE, SNAKE_CELL_SIZE, BLACK);
 8001368:	89fb      	ldrh	r3, [r7, #14]
 800136a:	b2d8      	uxtb	r0, r3
 800136c:	89bb      	ldrh	r3, [r7, #12]
 800136e:	b2d9      	uxtb	r1, r3
 8001370:	2300      	movs	r3, #0
 8001372:	9300      	str	r3, [sp, #0]
 8001374:	230a      	movs	r3, #10
 8001376:	220a      	movs	r2, #10
 8001378:	f7ff fb44 	bl	8000a04 <HTFT_voidFillRect>
}
 800137c:	bf00      	nop
 800137e:	3710      	adds	r7, #16
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <GUI_voidUpdateScore>:

static void GUI_voidUpdateScore(void) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af02      	add	r7, sp, #8
    char score_str[15];
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, GAME_AREA_Y - 1, BLACK);
 800138a:	2300      	movs	r3, #0
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	2313      	movs	r3, #19
 8001390:	2280      	movs	r2, #128	@ 0x80
 8001392:	2100      	movs	r1, #0
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff fb35 	bl	8000a04 <HTFT_voidFillRect>
    sprintf(score_str, "SCORE: %d", Snake_u16GetScore());
 800139a:	f000 fc2b 	bl	8001bf4 <Snake_u16GetScore>
 800139e:	4603      	mov	r3, r0
 80013a0:	461a      	mov	r2, r3
 80013a2:	463b      	mov	r3, r7
 80013a4:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <GUI_voidUpdateScore+0x44>)
 80013a6:	4618      	mov	r0, r3
 80013a8:	f001 fd10 	bl	8002dcc <siprintf>
    GUI_voidDrawString(10, 5, score_str, YELLOW, 2);
 80013ac:	463a      	mov	r2, r7
 80013ae:	2302      	movs	r3, #2
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80013b6:	2105      	movs	r1, #5
 80013b8:	200a      	movs	r0, #10
 80013ba:	f000 f8e7 	bl	800158c <GUI_voidDrawString>
}
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	08003f6c 	.word	0x08003f6c

080013cc <GUI_voidDrawInitialState>:

static void GUI_voidDrawInitialState(void) {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af02      	add	r7, sp, #8
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);
 80013d2:	2300      	movs	r3, #0
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	23a0      	movs	r3, #160	@ 0xa0
 80013d8:	2280      	movs	r2, #128	@ 0x80
 80013da:	2100      	movs	r1, #0
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff fb11 	bl	8000a04 <HTFT_voidFillRect>
    GUI_voidUpdateScore();
 80013e2:	f7ff ffcf 	bl	8001384 <GUI_voidUpdateScore>
    Point_t head = Snake_stGetHeadPosition();
 80013e6:	f000 fbc3 	bl	8001b70 <Snake_stGetHeadPosition>
 80013ea:	4603      	mov	r3, r0
 80013ec:	80bb      	strh	r3, [r7, #4]
    GUI_voidDrawSnakeSegment(head.x, head.y, GREEN);
 80013ee:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80013f8:	b2d1      	uxtb	r1, r2
 80013fa:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff00 	bl	8001204 <GUI_voidDrawSnakeSegment>
    Point_t food = Snake_stGetFoodPosition();
 8001404:	f000 fbe0 	bl	8001bc8 <Snake_stGetFoodPosition>
 8001408:	4603      	mov	r3, r0
 800140a:	803b      	strh	r3, [r7, #0]
    GUI_voidDrawFood(food.x, food.y, RED);
 800140c:	f997 3000 	ldrsb.w	r3, [r7]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	f997 2001 	ldrsb.w	r2, [r7, #1]
 8001416:	b2d1      	uxtb	r1, r2
 8001418:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff ff43 	bl	80012a8 <GUI_voidDrawFood>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <GUI_voidUpdateScreen>:

static void GUI_voidUpdateScreen(void) {
 800142a:	b580      	push	{r7, lr}
 800142c:	b084      	sub	sp, #16
 800142e:	af00      	add	r7, sp, #0
    Point_t head = Snake_stGetHeadPosition();
 8001430:	f000 fb9e 	bl	8001b70 <Snake_stGetHeadPosition>
 8001434:	4603      	mov	r3, r0
 8001436:	81bb      	strh	r3, [r7, #12]
    GUI_voidDrawSnakeSegment(head.x, head.y, GREEN);
 8001438:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	f997 200d 	ldrsb.w	r2, [r7, #13]
 8001442:	b2d1      	uxtb	r1, r2
 8001444:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fedb 	bl	8001204 <GUI_voidDrawSnakeSegment>

    if (!Snake_u8IsFoodEaten()) {
 800144e:	f000 fbdd 	bl	8001c0c <Snake_u8IsFoodEaten>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10e      	bne.n	8001476 <GUI_voidUpdateScreen+0x4c>
        Point_t tail = Snake_stGetTailPosition();
 8001458:	f000 fba0 	bl	8001b9c <Snake_stGetTailPosition>
 800145c:	4603      	mov	r3, r0
 800145e:	813b      	strh	r3, [r7, #8]
        GUI_voidEraseCell(tail.x, tail.y);
 8001460:	f997 3008 	ldrsb.w	r3, [r7, #8]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	f997 2009 	ldrsb.w	r2, [r7, #9]
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff62 	bl	8001338 <GUI_voidEraseCell>
        Sound_voidPlayWin(); /* NEW - Play win sound */
        GUI_voidUpdateScore();
        Point_t food = Snake_stGetFoodPosition();
        GUI_voidDrawFood(food.x, food.y, RED);
    }
}
 8001474:	e012      	b.n	800149c <GUI_voidUpdateScreen+0x72>
        Sound_voidPlayWin(); /* NEW - Play win sound */
 8001476:	f000 f970 	bl	800175a <Sound_voidPlayWin>
        GUI_voidUpdateScore();
 800147a:	f7ff ff83 	bl	8001384 <GUI_voidUpdateScore>
        Point_t food = Snake_stGetFoodPosition();
 800147e:	f000 fba3 	bl	8001bc8 <Snake_stGetFoodPosition>
 8001482:	4603      	mov	r3, r0
 8001484:	80bb      	strh	r3, [r7, #4]
        GUI_voidDrawFood(food.x, food.y, RED);
 8001486:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001490:	b2d1      	uxtb	r1, r2
 8001492:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff06 	bl	80012a8 <GUI_voidDrawFood>
}
 800149c:	bf00      	nop
 800149e:	3710      	adds	r7, #16
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <GUI_voidShowGameOver>:

static void GUI_voidShowGameOver(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af02      	add	r7, sp, #8
    char score_str[20];
    char high_score_str[20];
    HTFT_voidFillRect(0, 40, SCREEN_WIDTH, 100, GRAY);
 80014aa:	f248 4310 	movw	r3, #33808	@ 0x8410
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2364      	movs	r3, #100	@ 0x64
 80014b2:	2280      	movs	r2, #128	@ 0x80
 80014b4:	2128      	movs	r1, #40	@ 0x28
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff faa4 	bl	8000a04 <HTFT_voidFillRect>
    GUI_voidDrawString(15, 50, "GAME OVER", RED, 2);
 80014bc:	2302      	movs	r3, #2
 80014be:	9300      	str	r3, [sp, #0]
 80014c0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80014c4:	4a17      	ldr	r2, [pc, #92]	@ (8001524 <GUI_voidShowGameOver+0x80>)
 80014c6:	2132      	movs	r1, #50	@ 0x32
 80014c8:	200f      	movs	r0, #15
 80014ca:	f000 f85f 	bl	800158c <GUI_voidDrawString>
    sprintf(score_str, "SCORE: %d", Snake_u16GetScore());
 80014ce:	f000 fb91 	bl	8001bf4 <Snake_u16GetScore>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4913      	ldr	r1, [pc, #76]	@ (8001528 <GUI_voidShowGameOver+0x84>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f001 fc75 	bl	8002dcc <siprintf>
    GUI_voidDrawString(20, 80, score_str, YELLOW, 2);
 80014e2:	f107 0214 	add.w	r2, r7, #20
 80014e6:	2302      	movs	r3, #2
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80014ee:	2150      	movs	r1, #80	@ 0x50
 80014f0:	2014      	movs	r0, #20
 80014f2:	f000 f84b 	bl	800158c <GUI_voidDrawString>
    sprintf(high_score_str, "HIGH: %d", Snake_u16GetHighScore());
 80014f6:	f000 fb95 	bl	8001c24 <Snake_u16GetHighScore>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	463b      	mov	r3, r7
 8001500:	490a      	ldr	r1, [pc, #40]	@ (800152c <GUI_voidShowGameOver+0x88>)
 8001502:	4618      	mov	r0, r3
 8001504:	f001 fc62 	bl	8002dcc <siprintf>
    GUI_voidDrawString(20, 105, high_score_str, WHITE, 2);
 8001508:	463a      	mov	r2, r7
 800150a:	2302      	movs	r3, #2
 800150c:	9300      	str	r3, [sp, #0]
 800150e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001512:	2169      	movs	r1, #105	@ 0x69
 8001514:	2014      	movs	r0, #20
 8001516:	f000 f839 	bl	800158c <GUI_voidDrawString>
}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	08003f78 	.word	0x08003f78
 8001528:	08003f6c 	.word	0x08003f6c
 800152c:	08003f84 	.word	0x08003f84

08001530 <debounce>:

static u8 debounce(Port_t port, PIN_t pin) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	460a      	mov	r2, r1
 800153a:	71fb      	strb	r3, [r7, #7]
 800153c:	4613      	mov	r3, r2
 800153e:	71bb      	strb	r3, [r7, #6]
    if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 8001540:	79ba      	ldrb	r2, [r7, #6]
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	4611      	mov	r1, r2
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff fbf2 	bl	8000d30 <MGPIO_u8GetPinValue>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d117      	bne.n	8001582 <debounce+0x52>
        MSTK_voidDelayms(50);
 8001552:	2032      	movs	r0, #50	@ 0x32
 8001554:	f7ff fdb0 	bl	80010b8 <MSTK_voidDelayms>
        if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 8001558:	79ba      	ldrb	r2, [r7, #6]
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	4611      	mov	r1, r2
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fbe6 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001564:	4603      	mov	r3, r0
 8001566:	2b01      	cmp	r3, #1
 8001568:	d10b      	bne.n	8001582 <debounce+0x52>
            while(MGPIO_u8GetPinValue(port, pin) == HIGH);
 800156a:	bf00      	nop
 800156c:	79ba      	ldrb	r2, [r7, #6]
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4611      	mov	r1, r2
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff fbdc 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001578:	4603      	mov	r3, r0
 800157a:	2b01      	cmp	r3, #1
 800157c:	d0f6      	beq.n	800156c <debounce+0x3c>
            return 1;
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <debounce+0x54>
        }
    }
    return 0;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <GUI_voidDrawString>:

static void GUI_voidDrawString(u8 x, u8 y, char* str, u16 color, u8 size) {
 800158c:	b590      	push	{r4, r7, lr}
 800158e:	b089      	sub	sp, #36	@ 0x24
 8001590:	af02      	add	r7, sp, #8
 8001592:	603a      	str	r2, [r7, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
 800159a:	460b      	mov	r3, r1
 800159c:	71bb      	strb	r3, [r7, #6]
 800159e:	4613      	mov	r3, r2
 80015a0:	80bb      	strh	r3, [r7, #4]
    while (*str) {
 80015a2:	e070      	b.n	8001686 <GUI_voidDrawString+0xfa>
        if (*str < ' ' || *str > 'Z') { str++; continue; }
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b1f      	cmp	r3, #31
 80015aa:	d903      	bls.n	80015b4 <GUI_voidDrawString+0x28>
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b5a      	cmp	r3, #90	@ 0x5a
 80015b2:	d903      	bls.n	80015bc <GUI_voidDrawString+0x30>
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	3301      	adds	r3, #1
 80015b8:	603b      	str	r3, [r7, #0]
 80015ba:	e064      	b.n	8001686 <GUI_voidDrawString+0xfa>
        const unsigned char* glyph = font5x7 + (*str - ' ') * 5;
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	f1a3 0220 	sub.w	r2, r3, #32
 80015c4:	4613      	mov	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	4413      	add	r3, r2
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b32      	ldr	r3, [pc, #200]	@ (8001698 <GUI_voidDrawString+0x10c>)
 80015ce:	4413      	add	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        for (u8 col = 0; col < 5; col++) {
 80015d2:	2300      	movs	r3, #0
 80015d4:	75fb      	strb	r3, [r7, #23]
 80015d6:	e033      	b.n	8001640 <GUI_voidDrawString+0xb4>
            u8 bits = glyph[col];
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	73fb      	strb	r3, [r7, #15]
            for (u8 row = 0; row < 7; row++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	75bb      	strb	r3, [r7, #22]
 80015e6:	e025      	b.n	8001634 <GUI_voidDrawString+0xa8>
                if ((bits >> row) & 1) {
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	7dbb      	ldrb	r3, [r7, #22]
 80015ec:	fa42 f303 	asr.w	r3, r2, r3
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01a      	beq.n	800162e <GUI_voidDrawString+0xa2>
                    HTFT_voidFillRect(x + col * size, y + row * size, size, size, color);
 80015f8:	7dfa      	ldrb	r2, [r7, #23]
 80015fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015fe:	fb12 f303 	smulbb	r3, r2, r3
 8001602:	b2da      	uxtb	r2, r3
 8001604:	79fb      	ldrb	r3, [r7, #7]
 8001606:	4413      	add	r3, r2
 8001608:	b2d8      	uxtb	r0, r3
 800160a:	7dba      	ldrb	r2, [r7, #22]
 800160c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001610:	fb12 f303 	smulbb	r3, r2, r3
 8001614:	b2da      	uxtb	r2, r3
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	4413      	add	r3, r2
 800161a:	b2d9      	uxtb	r1, r3
 800161c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8001620:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001624:	88bb      	ldrh	r3, [r7, #4]
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4623      	mov	r3, r4
 800162a:	f7ff f9eb 	bl	8000a04 <HTFT_voidFillRect>
            for (u8 row = 0; row < 7; row++) {
 800162e:	7dbb      	ldrb	r3, [r7, #22]
 8001630:	3301      	adds	r3, #1
 8001632:	75bb      	strb	r3, [r7, #22]
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	2b06      	cmp	r3, #6
 8001638:	d9d6      	bls.n	80015e8 <GUI_voidDrawString+0x5c>
        for (u8 col = 0; col < 5; col++) {
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	3301      	adds	r3, #1
 800163e:	75fb      	strb	r3, [r7, #23]
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d9c8      	bls.n	80015d8 <GUI_voidDrawString+0x4c>
                }
            }
        }
        x += 6 * size;
 8001646:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800164a:	461a      	mov	r2, r3
 800164c:	0052      	lsls	r2, r2, #1
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	b2da      	uxtb	r2, r3
 8001654:	79fb      	ldrb	r3, [r7, #7]
 8001656:	4413      	add	r3, r2
 8001658:	71fb      	strb	r3, [r7, #7]
        if (x > SCREEN_WIDTH - (6 * size)) { x = 0; y += 8 * size; }
 800165a:	79f9      	ldrb	r1, [r7, #7]
 800165c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001660:	4613      	mov	r3, r2
 8001662:	0092      	lsls	r2, r2, #2
 8001664:	1a9b      	subs	r3, r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	3380      	adds	r3, #128	@ 0x80
 800166a:	4299      	cmp	r1, r3
 800166c:	dd08      	ble.n	8001680 <GUI_voidDrawString+0xf4>
 800166e:	2300      	movs	r3, #0
 8001670:	71fb      	strb	r3, [r7, #7]
 8001672:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	b2da      	uxtb	r2, r3
 800167a:	79bb      	ldrb	r3, [r7, #6]
 800167c:	4413      	add	r3, r2
 800167e:	71bb      	strb	r3, [r7, #6]
        str++;
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	3301      	adds	r3, #1
 8001684:	603b      	str	r3, [r7, #0]
    while (*str) {
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d18a      	bne.n	80015a4 <GUI_voidDrawString+0x18>
    }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	bd90      	pop	{r4, r7, pc}
 8001698:	080041b8 	.word	0x080041b8

0800169c <Sound_voidInit>:
*******************************************************************************/

/*
 * @brief Initializes the buzzer pin using the correct 2-step functions.
 */
static void Sound_voidInit(void) {
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
    // Step 1: Set the pin mode to General Purpose Output
    MGPIO_voidSetMode(BUZZER_PORT, BUZZER_PIN, OUTPUT);
 80016a0:	2201      	movs	r2, #1
 80016a2:	210a      	movs	r1, #10
 80016a4:	2001      	movs	r0, #1
 80016a6:	f7ff f9db 	bl	8000a60 <MGPIO_voidSetMode>

    // Step 2: Configure the output type as Push-Pull and set the speed
    MGPIO_voidSetOutputConfig(BUZZER_PORT, BUZZER_PIN, Push_Pull, Low_Speed);
 80016aa:	2300      	movs	r3, #0
 80016ac:	2200      	movs	r2, #0
 80016ae:	210a      	movs	r1, #10
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff fa29 	bl	8000b08 <MGPIO_voidSetOutputConfig>
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
	...

080016bc <Sound_voidBeep>:

/*
 * @brief Generates a square wave using available SetPinValue functions.
 */
static void Sound_voidBeep(u16 frequency, u16 duration_ms) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	4603      	mov	r3, r0
 80016c4:	460a      	mov	r2, r1
 80016c6:	80fb      	strh	r3, [r7, #6]
 80016c8:	4613      	mov	r3, r2
 80016ca:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) return;
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d031      	beq.n	8001736 <Sound_voidBeep+0x7a>

    // Calculate the half period in microseconds
    u32 half_period_us = 500000 / frequency;
 80016d2:	88fb      	ldrh	r3, [r7, #6]
 80016d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001744 <Sound_voidBeep+0x88>)
 80016d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016da:	613b      	str	r3, [r7, #16]

    // Calculate how many full cycles (HIGH-LOW) are needed for the duration
    if (half_period_us == 0) return; // Avoid division by zero
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d02b      	beq.n	800173a <Sound_voidBeep+0x7e>
    u32 total_cycles = ((u32)duration_ms * 1000) / (half_period_us * 2);
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80016e8:	fb03 f202 	mul.w	r2, r3, r2
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f4:	60fb      	str	r3, [r7, #12]

    for (u32 i = 0; i < total_cycles; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e012      	b.n	8001722 <Sound_voidBeep+0x66>
        // Set pin HIGH for the first half of the period
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
 80016fc:	2201      	movs	r2, #1
 80016fe:	210a      	movs	r1, #10
 8001700:	2001      	movs	r0, #1
 8001702:	f7ff fa77 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 8001706:	6938      	ldr	r0, [r7, #16]
 8001708:	f7ff fcf8 	bl	80010fc <MSTK_voidDelayus>

        // Set pin LOW for the second half of the period
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 800170c:	2200      	movs	r2, #0
 800170e:	210a      	movs	r1, #10
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff fa6f 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 8001716:	6938      	ldr	r0, [r7, #16]
 8001718:	f7ff fcf0 	bl	80010fc <MSTK_voidDelayus>
    for (u32 i = 0; i < total_cycles; i++) {
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3e8      	bcc.n	80016fc <Sound_voidBeep+0x40>
    }

    // Ensure the pin is left in a LOW state
    MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 800172a:	2200      	movs	r2, #0
 800172c:	210a      	movs	r1, #10
 800172e:	2001      	movs	r0, #1
 8001730:	f7ff fa60 	bl	8000bf4 <MGPIO_voidSetPinValue>
 8001734:	e002      	b.n	800173c <Sound_voidBeep+0x80>
    if (frequency == 0) return;
 8001736:	bf00      	nop
 8001738:	e000      	b.n	800173c <Sound_voidBeep+0x80>
    if (half_period_us == 0) return; // Avoid division by zero
 800173a:	bf00      	nop
}
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	0007a120 	.word	0x0007a120

08001748 <Sound_voidPlayClick>:

/*
 * @brief Plays a short, high-pitched click sound.
 */
static void Sound_voidPlayClick(void) {
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
    Sound_voidBeep(2500, 40);
 800174c:	2128      	movs	r1, #40	@ 0x28
 800174e:	f640 10c4 	movw	r0, #2500	@ 0x9c4
 8001752:	f7ff ffb3 	bl	80016bc <Sound_voidBeep>
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}

0800175a <Sound_voidPlayWin>:

/*
 * @brief Plays a rising two-tone "success" sound.
 */
static void Sound_voidPlayWin(void) {
 800175a:	b580      	push	{r7, lr}
 800175c:	af00      	add	r7, sp, #0
    Sound_voidBeep(1000, 100);
 800175e:	2164      	movs	r1, #100	@ 0x64
 8001760:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001764:	f7ff ffaa 	bl	80016bc <Sound_voidBeep>
    MSTK_voidDelayms(50);
 8001768:	2032      	movs	r0, #50	@ 0x32
 800176a:	f7ff fca5 	bl	80010b8 <MSTK_voidDelayms>
    Sound_voidBeep(1500, 100);
 800176e:	2164      	movs	r1, #100	@ 0x64
 8001770:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8001774:	f7ff ffa2 	bl	80016bc <Sound_voidBeep>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <Sound_voidPlayGameOver>:

/*
 * @brief Plays a low-pitched, longer "failure" sound.
 */
static void Sound_voidPlayGameOver(void) {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
    Sound_voidBeep(400, 500);
 8001780:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001784:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8001788:	f7ff ff98 	bl	80016bc <Sound_voidBeep>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <Snake_voidGenerateFood>:
static u8 G_u8FoodEatenFlag;
static Point_t G_stLastTailPosition;
static u16 G_u16HighScore = 0; // متغير لتخزين أعلى درجة

// دالة خاصة لتوليد الطعام في مكان عشوائي
static void Snake_voidGenerateFood(void) {
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    u8 is_on_snake;
    do {
        is_on_snake = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	71fb      	strb	r3, [r7, #7]
        G_stFood.x = rand() % SNAKE_GRID_WIDTH;
 800179a:	f001 fa17 	bl	8002bcc <rand>
 800179e:	4602      	mov	r2, r0
 80017a0:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <Snake_voidGenerateFood+0xa4>)
 80017a2:	fb83 1302 	smull	r1, r3, r3, r2
 80017a6:	1059      	asrs	r1, r3, #1
 80017a8:	17d3      	asrs	r3, r2, #31
 80017aa:	1ac9      	subs	r1, r1, r3
 80017ac:	460b      	mov	r3, r1
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	440b      	add	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	1ad1      	subs	r1, r2, r3
 80017b6:	b24a      	sxtb	r2, r1
 80017b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001838 <Snake_voidGenerateFood+0xa8>)
 80017ba:	701a      	strb	r2, [r3, #0]
        G_stFood.y = rand() % SNAKE_GRID_HEIGHT;
 80017bc:	f001 fa06 	bl	8002bcc <rand>
 80017c0:	4602      	mov	r2, r0
 80017c2:	4b1e      	ldr	r3, [pc, #120]	@ (800183c <Snake_voidGenerateFood+0xac>)
 80017c4:	fb83 1302 	smull	r1, r3, r3, r2
 80017c8:	4413      	add	r3, r2
 80017ca:	10d9      	asrs	r1, r3, #3
 80017cc:	17d3      	asrs	r3, r2, #31
 80017ce:	1ac9      	subs	r1, r1, r3
 80017d0:	460b      	mov	r3, r1
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	1a5b      	subs	r3, r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	1ad1      	subs	r1, r2, r3
 80017da:	b24a      	sxtb	r2, r1
 80017dc:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <Snake_voidGenerateFood+0xa8>)
 80017de:	705a      	strb	r2, [r3, #1]

        for (u16 i = 0; i < G_u16SnakeLength; i++) {
 80017e0:	2300      	movs	r3, #0
 80017e2:	80bb      	strh	r3, [r7, #4]
 80017e4:	e019      	b.n	800181a <Snake_voidGenerateFood+0x8a>
            if (G_stSnakeBody[i].x == G_stFood.x && G_stSnakeBody[i].y == G_stFood.y) {
 80017e6:	88bb      	ldrh	r3, [r7, #4]
 80017e8:	4a15      	ldr	r2, [pc, #84]	@ (8001840 <Snake_voidGenerateFood+0xb0>)
 80017ea:	f912 2013 	ldrsb.w	r2, [r2, r3, lsl #1]
 80017ee:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <Snake_voidGenerateFood+0xa8>)
 80017f0:	f993 3000 	ldrsb.w	r3, [r3]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d10d      	bne.n	8001814 <Snake_voidGenerateFood+0x84>
 80017f8:	88bb      	ldrh	r3, [r7, #4]
 80017fa:	4a11      	ldr	r2, [pc, #68]	@ (8001840 <Snake_voidGenerateFood+0xb0>)
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001804:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <Snake_voidGenerateFood+0xa8>)
 8001806:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800180a:	429a      	cmp	r2, r3
 800180c:	d102      	bne.n	8001814 <Snake_voidGenerateFood+0x84>
                is_on_snake = 1;
 800180e:	2301      	movs	r3, #1
 8001810:	71fb      	strb	r3, [r7, #7]
                break;
 8001812:	e007      	b.n	8001824 <Snake_voidGenerateFood+0x94>
        for (u16 i = 0; i < G_u16SnakeLength; i++) {
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	80bb      	strh	r3, [r7, #4]
 800181a:	4b0a      	ldr	r3, [pc, #40]	@ (8001844 <Snake_voidGenerateFood+0xb4>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	88ba      	ldrh	r2, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	d3e0      	bcc.n	80017e6 <Snake_voidGenerateFood+0x56>
            }
        }
    } while (is_on_snake);
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1b5      	bne.n	8001796 <Snake_voidGenerateFood+0x6>
}
 800182a:	bf00      	nop
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	2aaaaaab 	.word	0x2aaaaaab
 8001838:	200001e8 	.word	0x200001e8
 800183c:	92492493 	.word	0x92492493
 8001840:	20000094 	.word	0x20000094
 8001844:	200001e4 	.word	0x200001e4

08001848 <Snake_voidInit>:

void Snake_voidInit(void) {
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
    // تهيئة الثعبان في المنتصف
    G_stSnakeBody[0].x = SNAKE_GRID_WIDTH / 2;
 800184c:	4b1a      	ldr	r3, [pc, #104]	@ (80018b8 <Snake_voidInit+0x70>)
 800184e:	2206      	movs	r2, #6
 8001850:	701a      	strb	r2, [r3, #0]
    G_stSnakeBody[0].y = SNAKE_GRID_HEIGHT / 2;
 8001852:	4b19      	ldr	r3, [pc, #100]	@ (80018b8 <Snake_voidInit+0x70>)
 8001854:	2207      	movs	r2, #7
 8001856:	705a      	strb	r2, [r3, #1]
    G_u16SnakeLength = 3;
 8001858:	4b18      	ldr	r3, [pc, #96]	@ (80018bc <Snake_voidInit+0x74>)
 800185a:	2203      	movs	r2, #3
 800185c:	801a      	strh	r2, [r3, #0]
    G_stSnakeBody[1].x = G_stSnakeBody[0].x - 1;
 800185e:	4b16      	ldr	r3, [pc, #88]	@ (80018b8 <Snake_voidInit+0x70>)
 8001860:	f993 3000 	ldrsb.w	r3, [r3]
 8001864:	b2db      	uxtb	r3, r3
 8001866:	3b01      	subs	r3, #1
 8001868:	b2db      	uxtb	r3, r3
 800186a:	b25a      	sxtb	r2, r3
 800186c:	4b12      	ldr	r3, [pc, #72]	@ (80018b8 <Snake_voidInit+0x70>)
 800186e:	709a      	strb	r2, [r3, #2]
    G_stSnakeBody[1].y = G_stSnakeBody[0].y;
 8001870:	4b11      	ldr	r3, [pc, #68]	@ (80018b8 <Snake_voidInit+0x70>)
 8001872:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001876:	4b10      	ldr	r3, [pc, #64]	@ (80018b8 <Snake_voidInit+0x70>)
 8001878:	70da      	strb	r2, [r3, #3]
    G_stSnakeBody[2].x = G_stSnakeBody[0].x - 2;
 800187a:	4b0f      	ldr	r3, [pc, #60]	@ (80018b8 <Snake_voidInit+0x70>)
 800187c:	f993 3000 	ldrsb.w	r3, [r3]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	3b02      	subs	r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	b25a      	sxtb	r2, r3
 8001888:	4b0b      	ldr	r3, [pc, #44]	@ (80018b8 <Snake_voidInit+0x70>)
 800188a:	711a      	strb	r2, [r3, #4]
    G_stSnakeBody[2].y = G_stSnakeBody[0].y;
 800188c:	4b0a      	ldr	r3, [pc, #40]	@ (80018b8 <Snake_voidInit+0x70>)
 800188e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001892:	4b09      	ldr	r3, [pc, #36]	@ (80018b8 <Snake_voidInit+0x70>)
 8001894:	715a      	strb	r2, [r3, #5]

    G_enSnakeDirection = DIR_RIGHT;
 8001896:	4b0a      	ldr	r3, [pc, #40]	@ (80018c0 <Snake_voidInit+0x78>)
 8001898:	2200      	movs	r2, #0
 800189a:	701a      	strb	r2, [r3, #0]
    G_u16Score = 0;
 800189c:	4b09      	ldr	r3, [pc, #36]	@ (80018c4 <Snake_voidInit+0x7c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	801a      	strh	r2, [r3, #0]
    G_u8GameState = SNAKE_GAME_ONGOING;
 80018a2:	4b09      	ldr	r3, [pc, #36]	@ (80018c8 <Snake_voidInit+0x80>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	701a      	strb	r2, [r3, #0]
    G_u8FoodEatenFlag = 0;
 80018a8:	4b08      	ldr	r3, [pc, #32]	@ (80018cc <Snake_voidInit+0x84>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
    Snake_voidGenerateFood();
 80018ae:	f7ff ff6f 	bl	8001790 <Snake_voidGenerateFood>
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000094 	.word	0x20000094
 80018bc:	200001e4 	.word	0x200001e4
 80018c0:	200001e6 	.word	0x200001e6
 80018c4:	200001ea 	.word	0x200001ea
 80018c8:	200001ec 	.word	0x200001ec
 80018cc:	200001ed 	.word	0x200001ed

080018d0 <Snake_voidChangeDirection>:

void Snake_voidChangeDirection(u8 Copy_u8TurnDirection) {
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
    if (Copy_u8TurnDirection == TURN_CLOCKWISE) {
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d11f      	bne.n	8001920 <Snake_voidChangeDirection+0x50>
        switch (G_enSnakeDirection) {
 80018e0:	4b23      	ldr	r3, [pc, #140]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b03      	cmp	r3, #3
 80018e6:	d83d      	bhi.n	8001964 <Snake_voidChangeDirection+0x94>
 80018e8:	a201      	add	r2, pc, #4	@ (adr r2, 80018f0 <Snake_voidChangeDirection+0x20>)
 80018ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ee:	bf00      	nop
 80018f0:	08001909 	.word	0x08001909
 80018f4:	08001901 	.word	0x08001901
 80018f8:	08001919 	.word	0x08001919
 80018fc:	08001911 	.word	0x08001911
            case DIR_UP:    G_enSnakeDirection = DIR_RIGHT; break;
 8001900:	4b1b      	ldr	r3, [pc, #108]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 8001902:	2200      	movs	r2, #0
 8001904:	701a      	strb	r2, [r3, #0]
 8001906:	e02d      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_RIGHT: G_enSnakeDirection = DIR_DOWN;  break;
 8001908:	4b19      	ldr	r3, [pc, #100]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 800190a:	2203      	movs	r2, #3
 800190c:	701a      	strb	r2, [r3, #0]
 800190e:	e029      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_DOWN:  G_enSnakeDirection = DIR_LEFT;  break;
 8001910:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 8001912:	2202      	movs	r2, #2
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	e025      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_LEFT:  G_enSnakeDirection = DIR_UP;    break;
 8001918:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
 800191e:	e021      	b.n	8001964 <Snake_voidChangeDirection+0x94>
        }
    } else if (Copy_u8TurnDirection == TURN_COUNTER_CLOCKWISE) {
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b02      	cmp	r3, #2
 8001924:	d11e      	bne.n	8001964 <Snake_voidChangeDirection+0x94>
        switch (G_enSnakeDirection) {
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b03      	cmp	r3, #3
 800192c:	d81a      	bhi.n	8001964 <Snake_voidChangeDirection+0x94>
 800192e:	a201      	add	r2, pc, #4	@ (adr r2, 8001934 <Snake_voidChangeDirection+0x64>)
 8001930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001934:	0800195d 	.word	0x0800195d
 8001938:	08001945 	.word	0x08001945
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001955 	.word	0x08001955
            case DIR_UP:    G_enSnakeDirection = DIR_LEFT;  break;
 8001944:	4b0a      	ldr	r3, [pc, #40]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
 800194a:	e00b      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_LEFT:  G_enSnakeDirection = DIR_DOWN;  break;
 800194c:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 800194e:	2203      	movs	r2, #3
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	e007      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_DOWN:  G_enSnakeDirection = DIR_RIGHT; break;
 8001954:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
 800195a:	e003      	b.n	8001964 <Snake_voidChangeDirection+0x94>
            case DIR_RIGHT: G_enSnakeDirection = DIR_UP;    break;
 800195c:	4b04      	ldr	r3, [pc, #16]	@ (8001970 <Snake_voidChangeDirection+0xa0>)
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	bf00      	nop
        }
    }
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	200001e6 	.word	0x200001e6

08001974 <Snake_u8Move>:

u8 Snake_u8Move(void) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
    if (G_u8GameState == SNAKE_GAME_OVER) {
 800197a:	4b74      	ldr	r3, [pc, #464]	@ (8001b4c <Snake_u8Move+0x1d8>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d101      	bne.n	8001986 <Snake_u8Move+0x12>
        return SNAKE_GAME_OVER;
 8001982:	2301      	movs	r3, #1
 8001984:	e0dd      	b.n	8001b42 <Snake_u8Move+0x1ce>
    }

    G_stLastTailPosition = G_stSnakeBody[G_u16SnakeLength - 1];
 8001986:	4b72      	ldr	r3, [pc, #456]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001988:	881b      	ldrh	r3, [r3, #0]
 800198a:	3b01      	subs	r3, #1
 800198c:	4a71      	ldr	r2, [pc, #452]	@ (8001b54 <Snake_u8Move+0x1e0>)
 800198e:	4972      	ldr	r1, [pc, #456]	@ (8001b58 <Snake_u8Move+0x1e4>)
 8001990:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001994:	8013      	strh	r3, [r2, #0]

    for (s16 i = G_u16SnakeLength - 1; i > 0; i--) {
 8001996:	4b6e      	ldr	r3, [pc, #440]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001998:	881b      	ldrh	r3, [r3, #0]
 800199a:	3b01      	subs	r3, #1
 800199c:	b29b      	uxth	r3, r3
 800199e:	80fb      	strh	r3, [r7, #6]
 80019a0:	e010      	b.n	80019c4 <Snake_u8Move+0x50>
        G_stSnakeBody[i] = G_stSnakeBody[i - 1];
 80019a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a6:	1e5a      	subs	r2, r3, #1
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	496a      	ldr	r1, [pc, #424]	@ (8001b58 <Snake_u8Move+0x1e4>)
 80019ae:	486a      	ldr	r0, [pc, #424]	@ (8001b58 <Snake_u8Move+0x1e4>)
 80019b0:	f830 2012 	ldrh.w	r2, [r0, r2, lsl #1]
 80019b4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (s16 i = G_u16SnakeLength - 1; i > 0; i--) {
 80019b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	3b01      	subs	r3, #1
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	80fb      	strh	r3, [r7, #6]
 80019c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	dcea      	bgt.n	80019a2 <Snake_u8Move+0x2e>
    }

    Point_t* head = &G_stSnakeBody[0];
 80019cc:	4b62      	ldr	r3, [pc, #392]	@ (8001b58 <Snake_u8Move+0x1e4>)
 80019ce:	603b      	str	r3, [r7, #0]
    switch (G_enSnakeDirection) {
 80019d0:	4b62      	ldr	r3, [pc, #392]	@ (8001b5c <Snake_u8Move+0x1e8>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d833      	bhi.n	8001a40 <Snake_u8Move+0xcc>
 80019d8:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <Snake_u8Move+0x6c>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	08001a05 	.word	0x08001a05
 80019e4:	080019f1 	.word	0x080019f1
 80019e8:	08001a2d 	.word	0x08001a2d
 80019ec:	08001a19 	.word	0x08001a19
        case DIR_UP:    head->y--; break;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	3b01      	subs	r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	b25a      	sxtb	r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	705a      	strb	r2, [r3, #1]
 8001a02:	e01d      	b.n	8001a40 <Snake_u8Move+0xcc>
        case DIR_RIGHT: head->x++; break;
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f993 3000 	ldrsb.w	r3, [r3]
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	b25a      	sxtb	r2, r3
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	701a      	strb	r2, [r3, #0]
 8001a16:	e013      	b.n	8001a40 <Snake_u8Move+0xcc>
        case DIR_DOWN:  head->y++; break;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a1e:	b2db      	uxtb	r3, r3
 8001a20:	3301      	adds	r3, #1
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	b25a      	sxtb	r2, r3
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	705a      	strb	r2, [r3, #1]
 8001a2a:	e009      	b.n	8001a40 <Snake_u8Move+0xcc>
        case DIR_LEFT:  head->x--; break;
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3b01      	subs	r3, #1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	b25a      	sxtb	r2, r3
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	701a      	strb	r2, [r3, #0]
 8001a3e:	bf00      	nop
    }

    /* --- منطق الالتفاف حول الشاشة --- */
    if (head->x >= SNAKE_GRID_WIDTH)  head->x = 0;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f993 3000 	ldrsb.w	r3, [r3]
 8001a46:	2b0b      	cmp	r3, #11
 8001a48:	dd03      	ble.n	8001a52 <Snake_u8Move+0xde>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	701a      	strb	r2, [r3, #0]
 8001a50:	e007      	b.n	8001a62 <Snake_u8Move+0xee>
    else if (head->x < 0)             head->x = SNAKE_GRID_WIDTH - 1;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	f993 3000 	ldrsb.w	r3, [r3]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	da02      	bge.n	8001a62 <Snake_u8Move+0xee>
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	220b      	movs	r2, #11
 8001a60:	701a      	strb	r2, [r3, #0]

    if (head->y >= SNAKE_GRID_HEIGHT) head->y = 0;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a68:	2b0d      	cmp	r3, #13
 8001a6a:	dd03      	ble.n	8001a74 <Snake_u8Move+0x100>
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	705a      	strb	r2, [r3, #1]
 8001a72:	e007      	b.n	8001a84 <Snake_u8Move+0x110>
    else if (head->y < 0)             head->y = SNAKE_GRID_HEIGHT - 1;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da02      	bge.n	8001a84 <Snake_u8Move+0x110>
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	220d      	movs	r2, #13
 8001a82:	705a      	strb	r2, [r3, #1]
    /* --- نهاية منطق الالتفاف --- */

    // التحقق من الاصطدام بالجسم (الخسارة الوحيدة الممكنة)
    for (u16 i = 1; i < G_u16SnakeLength; i++) {
 8001a84:	2301      	movs	r3, #1
 8001a86:	80bb      	strh	r3, [r7, #4]
 8001a88:	e025      	b.n	8001ad6 <Snake_u8Move+0x162>
        if (head->x == G_stSnakeBody[i].x && head->y == G_stSnakeBody[i].y) {
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	f993 2000 	ldrsb.w	r2, [r3]
 8001a90:	88bb      	ldrh	r3, [r7, #4]
 8001a92:	4931      	ldr	r1, [pc, #196]	@ (8001b58 <Snake_u8Move+0x1e4>)
 8001a94:	f911 3013 	ldrsb.w	r3, [r1, r3, lsl #1]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d119      	bne.n	8001ad0 <Snake_u8Move+0x15c>
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	492c      	ldr	r1, [pc, #176]	@ (8001b58 <Snake_u8Move+0x1e4>)
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	440b      	add	r3, r1
 8001aaa:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d10e      	bne.n	8001ad0 <Snake_u8Move+0x15c>
            G_u8GameState = SNAKE_GAME_OVER;
 8001ab2:	4b26      	ldr	r3, [pc, #152]	@ (8001b4c <Snake_u8Move+0x1d8>)
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	701a      	strb	r2, [r3, #0]
            // تحديث أعلى درجة عند الخسارة
            if (G_u16Score > G_u16HighScore) {
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <Snake_u8Move+0x1ec>)
 8001aba:	881a      	ldrh	r2, [r3, #0]
 8001abc:	4b29      	ldr	r3, [pc, #164]	@ (8001b64 <Snake_u8Move+0x1f0>)
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d903      	bls.n	8001acc <Snake_u8Move+0x158>
                G_u16HighScore = G_u16Score;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <Snake_u8Move+0x1ec>)
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <Snake_u8Move+0x1f0>)
 8001aca:	801a      	strh	r2, [r3, #0]
            }
            return SNAKE_GAME_OVER;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e038      	b.n	8001b42 <Snake_u8Move+0x1ce>
    for (u16 i = 1; i < G_u16SnakeLength; i++) {
 8001ad0:	88bb      	ldrh	r3, [r7, #4]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	80bb      	strh	r3, [r7, #4]
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001ad8:	881b      	ldrh	r3, [r3, #0]
 8001ada:	88ba      	ldrh	r2, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3d4      	bcc.n	8001a8a <Snake_u8Move+0x116>
        }
    }

    // التحقق من أكل الطعام
    G_u8FoodEatenFlag = 0;
 8001ae0:	4b21      	ldr	r3, [pc, #132]	@ (8001b68 <Snake_u8Move+0x1f4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
    if (head->x == G_stFood.x && head->y == G_stFood.y) {
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f993 2000 	ldrsb.w	r2, [r3]
 8001aec:	4b1f      	ldr	r3, [pc, #124]	@ (8001b6c <Snake_u8Move+0x1f8>)
 8001aee:	f993 3000 	ldrsb.w	r3, [r3]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d124      	bne.n	8001b40 <Snake_u8Move+0x1cc>
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8001afc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b6c <Snake_u8Move+0x1f8>)
 8001afe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d11c      	bne.n	8001b40 <Snake_u8Move+0x1cc>
        G_u8FoodEatenFlag = 1;
 8001b06:	4b18      	ldr	r3, [pc, #96]	@ (8001b68 <Snake_u8Move+0x1f4>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	701a      	strb	r2, [r3, #0]
        G_u16Score++;
 8001b0c:	4b14      	ldr	r3, [pc, #80]	@ (8001b60 <Snake_u8Move+0x1ec>)
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	4b12      	ldr	r3, [pc, #72]	@ (8001b60 <Snake_u8Move+0x1ec>)
 8001b16:	801a      	strh	r2, [r3, #0]
        if (G_u16SnakeLength < MAX_SNAKE_LENGTH) {
 8001b18:	4b0d      	ldr	r3, [pc, #52]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001b1a:	881b      	ldrh	r3, [r3, #0]
 8001b1c:	2ba7      	cmp	r3, #167	@ 0xa7
 8001b1e:	d80d      	bhi.n	8001b3c <Snake_u8Move+0x1c8>
            G_u16SnakeLength++;
 8001b20:	4b0b      	ldr	r3, [pc, #44]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001b22:	881b      	ldrh	r3, [r3, #0]
 8001b24:	3301      	adds	r3, #1
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001b2a:	801a      	strh	r2, [r3, #0]
            G_stSnakeBody[G_u16SnakeLength - 1] = G_stLastTailPosition;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	@ (8001b50 <Snake_u8Move+0x1dc>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	3b01      	subs	r3, #1
 8001b32:	4909      	ldr	r1, [pc, #36]	@ (8001b58 <Snake_u8Move+0x1e4>)
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <Snake_u8Move+0x1e0>)
 8001b36:	8812      	ldrh	r2, [r2, #0]
 8001b38:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        }
        Snake_voidGenerateFood();
 8001b3c:	f7ff fe28 	bl	8001790 <Snake_voidGenerateFood>
    }

    return SNAKE_GAME_ONGOING;
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200001ec 	.word	0x200001ec
 8001b50:	200001e4 	.word	0x200001e4
 8001b54:	200001f0 	.word	0x200001f0
 8001b58:	20000094 	.word	0x20000094
 8001b5c:	200001e6 	.word	0x200001e6
 8001b60:	200001ea 	.word	0x200001ea
 8001b64:	200001f2 	.word	0x200001f2
 8001b68:	200001ed 	.word	0x200001ed
 8001b6c:	200001e8 	.word	0x200001e8

08001b70 <Snake_stGetHeadPosition>:

Point_t Snake_stGetHeadPosition(void) {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
    return G_stSnakeBody[0];
 8001b76:	4b08      	ldr	r3, [pc, #32]	@ (8001b98 <Snake_stGetHeadPosition+0x28>)
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	80bb      	strh	r3, [r7, #4]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	793a      	ldrb	r2, [r7, #4]
 8001b80:	f362 0307 	bfi	r3, r2, #0, #8
 8001b84:	797a      	ldrb	r2, [r7, #5]
 8001b86:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	20000094 	.word	0x20000094

08001b9c <Snake_stGetTailPosition>:

Point_t Snake_stGetTailPosition(void) {
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
    return G_stLastTailPosition;
 8001ba2:	4b08      	ldr	r3, [pc, #32]	@ (8001bc4 <Snake_stGetTailPosition+0x28>)
 8001ba4:	881b      	ldrh	r3, [r3, #0]
 8001ba6:	80bb      	strh	r3, [r7, #4]
 8001ba8:	2300      	movs	r3, #0
 8001baa:	793a      	ldrb	r2, [r7, #4]
 8001bac:	f362 0307 	bfi	r3, r2, #0, #8
 8001bb0:	797a      	ldrb	r2, [r7, #5]
 8001bb2:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	200001f0 	.word	0x200001f0

08001bc8 <Snake_stGetFoodPosition>:

Point_t Snake_stGetFoodPosition(void) {
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
    return G_stFood;
 8001bce:	4b08      	ldr	r3, [pc, #32]	@ (8001bf0 <Snake_stGetFoodPosition+0x28>)
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	80bb      	strh	r3, [r7, #4]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	793a      	ldrb	r2, [r7, #4]
 8001bd8:	f362 0307 	bfi	r3, r2, #0, #8
 8001bdc:	797a      	ldrb	r2, [r7, #5]
 8001bde:	f362 230f 	bfi	r3, r2, #8, #8
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	200001e8 	.word	0x200001e8

08001bf4 <Snake_u16GetScore>:

u16 Snake_u16GetLength(void) {
    return G_u16SnakeLength;
}

u16 Snake_u16GetScore(void) {
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    return G_u16Score;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <Snake_u16GetScore+0x14>)
 8001bfa:	881b      	ldrh	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	200001ea 	.word	0x200001ea

08001c0c <Snake_u8IsFoodEaten>:

u8 Snake_u8IsFoodEaten(void) {
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
    return G_u8FoodEatenFlag;
 8001c10:	4b03      	ldr	r3, [pc, #12]	@ (8001c20 <Snake_u8IsFoodEaten+0x14>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	200001ed 	.word	0x200001ed

08001c24 <Snake_u16GetHighScore>:

u16 Snake_u16GetHighScore(void) {
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
    return G_u16HighScore;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <Snake_u16GetHighScore+0x14>)
 8001c2a:	881b      	ldrh	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	200001f2 	.word	0x200001f2

08001c3c <XO_Game_voidRun>:
static void Sound_voidPlayError(void);

// ... (بقية نماذج الدوال)

void XO_Game_voidRun(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af02      	add	r7, sp, #8
    // تهيئة اللعبة والصوت
    Sound_voidInit(); /* NEW */
 8001c42:	f000 fbdb 	bl	80023fc <Sound_voidInit>
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);
 8001c46:	2300      	movs	r3, #0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	23a0      	movs	r3, #160	@ 0xa0
 8001c4c:	2280      	movs	r2, #128	@ 0x80
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7fe fed7 	bl	8000a04 <HTFT_voidFillRect>
    XO_voidInitBoard();
 8001c56:	f000 fc6d 	bl	8002534 <XO_voidInitBoard>
    GUI_voidDrawBoard();
 8001c5a:	f000 f954 	bl	8001f06 <GUI_voidDrawBoard>
    GUI_voidUpdateWinCounters();
 8001c5e:	f000 fa97 	bl	8002190 <GUI_voidUpdateWinCounters>

    u8 cursor_row = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	71fb      	strb	r3, [r7, #7]
    u8 cursor_col = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	71bb      	strb	r3, [r7, #6]
    u8 game_state = GAME_ONGOING;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	717b      	strb	r3, [r7, #5]
    u8 game_ended_sound_played = 0; // Flag to play sound only once
 8001c6e:	2300      	movs	r3, #0
 8001c70:	713b      	strb	r3, [r7, #4]

    GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW);
 8001c72:	79b9      	ldrb	r1, [r7, #6]
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 f9f1 	bl	8002062 <GUI_voidDrawCursor>

    while (1)
    {
        if (game_state != GAME_ONGOING) {
 8001c80:	797b      	ldrb	r3, [r7, #5]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d024      	beq.n	8001cd0 <XO_Game_voidRun+0x94>
            if (!game_ended_sound_played) {
 8001c86:	793b      	ldrb	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d118      	bne.n	8001cbe <XO_Game_voidRun+0x82>
                if(game_state == GAME_WIN_X) {
 8001c8c:	797b      	ldrb	r3, [r7, #5]
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d105      	bne.n	8001c9e <XO_Game_voidRun+0x62>
                    XO_voidIncrementWinCount(PLAYER_X);
 8001c92:	2001      	movs	r0, #1
 8001c94:	f000 fd94 	bl	80027c0 <XO_voidIncrementWinCount>
                    Sound_voidPlayWin(); /* NEW */
 8001c98:	f000 fc18 	bl	80024cc <Sound_voidPlayWin>
 8001c9c:	e00d      	b.n	8001cba <XO_Game_voidRun+0x7e>
                } else if (game_state == GAME_WIN_O) {
 8001c9e:	797b      	ldrb	r3, [r7, #5]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d105      	bne.n	8001cb0 <XO_Game_voidRun+0x74>
                    XO_voidIncrementWinCount(PLAYER_O);
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	f000 fd8b 	bl	80027c0 <XO_voidIncrementWinCount>
                    Sound_voidPlayWin(); /* NEW */
 8001caa:	f000 fc0f 	bl	80024cc <Sound_voidPlayWin>
 8001cae:	e004      	b.n	8001cba <XO_Game_voidRun+0x7e>
                } else if (game_state == GAME_DRAW) {
 8001cb0:	797b      	ldrb	r3, [r7, #5]
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d101      	bne.n	8001cba <XO_Game_voidRun+0x7e>
                    Sound_voidPlayDraw(); /* NEW */
 8001cb6:	f000 fc22 	bl	80024fe <Sound_voidPlayDraw>
                }
                game_ended_sound_played = 1; // Mark sound as played
 8001cba:	2301      	movs	r3, #1
 8001cbc:	713b      	strb	r3, [r7, #4]
            }

            GUI_voidShowEndScreen(game_state);
 8001cbe:	797b      	ldrb	r3, [r7, #5]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fab1 	bl	8002228 <GUI_voidShowEndScreen>
            MSTK_voidDelayms(4000);
 8001cc6:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8001cca:	f7ff f9f5 	bl	80010b8 <MSTK_voidDelayms>
            return;
 8001cce:	e0b9      	b.n	8001e44 <XO_Game_voidRun+0x208>
        }

        if (debounce(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN)) {
 8001cd0:	2107      	movs	r1, #7
 8001cd2:	2001      	movs	r0, #1
 8001cd4:	f000 f8b9 	bl	8001e4a <debounce>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02f      	beq.n	8001d3e <XO_Game_voidRun+0x102>
            Sound_voidPlayClick(); /* NEW */
 8001cde:	f000 fbe3 	bl	80024a8 <Sound_voidPlayClick>
            u8 old_cell_state = XO_u8GetCellState(cursor_row, cursor_col);
 8001ce2:	79ba      	ldrb	r2, [r7, #6]
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f000 fdb9 	bl	8002860 <XO_u8GetCellState>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	70fb      	strb	r3, [r7, #3]
            GUI_voidDrawCursor(cursor_row, cursor_col, BLACK);
 8001cf2:	79b9      	ldrb	r1, [r7, #6]
 8001cf4:	79fb      	ldrb	r3, [r7, #7]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f000 f9b2 	bl	8002062 <GUI_voidDrawCursor>

            if (old_cell_state != EMPTY) {
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <XO_Game_voidRun+0xd4>
                GUI_voidDrawSymbol(cursor_row, cursor_col, old_cell_state);
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	79b9      	ldrb	r1, [r7, #6]
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f928 	bl	8001f60 <GUI_voidDrawSymbol>
            }

            cursor_col++;
 8001d10:	79bb      	ldrb	r3, [r7, #6]
 8001d12:	3301      	adds	r3, #1
 8001d14:	71bb      	strb	r3, [r7, #6]
            if (cursor_col > 2) {
 8001d16:	79bb      	ldrb	r3, [r7, #6]
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d909      	bls.n	8001d30 <XO_Game_voidRun+0xf4>
                cursor_col = 0;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	71bb      	strb	r3, [r7, #6]
                cursor_row++;
 8001d20:	79fb      	ldrb	r3, [r7, #7]
 8001d22:	3301      	adds	r3, #1
 8001d24:	71fb      	strb	r3, [r7, #7]
                if (cursor_row > 2) {
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <XO_Game_voidRun+0xf4>
                    cursor_row = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
                }
            }
            GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW);
 8001d30:	79b9      	ldrb	r1, [r7, #6]
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f000 f992 	bl	8002062 <GUI_voidDrawCursor>
        }

        if (check_long_press(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN, 1500)) {
 8001d3e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8001d42:	2107      	movs	r1, #7
 8001d44:	2001      	movs	r0, #1
 8001d46:	f000 f8ae 	bl	8001ea6 <check_long_press>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <XO_Game_voidRun+0x156>
            XO_voidResetWinCounters();
 8001d50:	f000 fd74 	bl	800283c <XO_voidResetWinCounters>
            HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, GRAY);
 8001d54:	f248 4310 	movw	r3, #33808	@ 0x8410
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	23a0      	movs	r3, #160	@ 0xa0
 8001d5c:	2280      	movs	r2, #128	@ 0x80
 8001d5e:	2100      	movs	r1, #0
 8001d60:	2000      	movs	r0, #0
 8001d62:	f7fe fe4f 	bl	8000a04 <HTFT_voidFillRect>
            MSTK_voidDelayms(150);
 8001d66:	2096      	movs	r0, #150	@ 0x96
 8001d68:	f7ff f9a6 	bl	80010b8 <MSTK_voidDelayms>
            HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	23a0      	movs	r3, #160	@ 0xa0
 8001d72:	2280      	movs	r2, #128	@ 0x80
 8001d74:	2100      	movs	r1, #0
 8001d76:	2000      	movs	r0, #0
 8001d78:	f7fe fe44 	bl	8000a04 <HTFT_voidFillRect>
            GUI_voidDrawBoard();
 8001d7c:	f000 f8c3 	bl	8001f06 <GUI_voidDrawBoard>
            GUI_voidUpdateWinCounters();
 8001d80:	f000 fa06 	bl	8002190 <GUI_voidUpdateWinCounters>
            GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW);
 8001d84:	79b9      	ldrb	r1, [r7, #6]
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f968 	bl	8002062 <GUI_voidDrawCursor>
        }

        u8 current_player = XO_u8GetCurrentPlayer();
 8001d92:	f000 fbfb 	bl	800258c <XO_u8GetCurrentPlayer>
 8001d96:	4603      	mov	r3, r0
 8001d98:	70bb      	strb	r3, [r7, #2]

        if (current_player == PLAYER_X && debounce(X_PLAYER_BUTTON_PORT, X_PLAYER_BUTTON_PIN)) {
 8001d9a:	78bb      	ldrb	r3, [r7, #2]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d124      	bne.n	8001dea <XO_Game_voidRun+0x1ae>
 8001da0:	2106      	movs	r1, #6
 8001da2:	2001      	movs	r0, #1
 8001da4:	f000 f851 	bl	8001e4a <debounce>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01d      	beq.n	8001dea <XO_Game_voidRun+0x1ae>
            if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001dae:	79ba      	ldrb	r2, [r7, #6]
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f000 fc09 	bl	80025cc <XO_u8MakeMove>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d011      	beq.n	8001de4 <XO_Game_voidRun+0x1a8>
                Sound_voidPlayMove(); /* NEW */
 8001dc0:	f000 fb7b 	bl	80024ba <Sound_voidPlayMove>
                GUI_voidDrawSymbol(cursor_row, cursor_col, current_player);
 8001dc4:	78ba      	ldrb	r2, [r7, #2]
 8001dc6:	79b9      	ldrb	r1, [r7, #6]
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f000 f8c8 	bl	8001f60 <GUI_voidDrawSymbol>
                game_state = XO_u8CheckGameState();
 8001dd0:	f000 fc2e 	bl	8002630 <XO_u8CheckGameState>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	717b      	strb	r3, [r7, #5]
                if(game_state == GAME_ONGOING) {
 8001dd8:	797b      	ldrb	r3, [r7, #5]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12d      	bne.n	8001e3a <XO_Game_voidRun+0x1fe>
                    XO_voidSwitchPlayer();
 8001dde:	f000 fbe1 	bl	80025a4 <XO_voidSwitchPlayer>
            if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001de2:	e02a      	b.n	8001e3a <XO_Game_voidRun+0x1fe>
                }
            } else {
                Sound_voidPlayError(); /* NEW */
 8001de4:	f000 fb9c 	bl	8002520 <Sound_voidPlayError>
            if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001de8:	e027      	b.n	8001e3a <XO_Game_voidRun+0x1fe>
            }
        }
        else if (current_player == PLAYER_O && debounce(O_PLAYER_BUTTON_PORT, O_PLAYER_BUTTON_PIN)) {
 8001dea:	78bb      	ldrb	r3, [r7, #2]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d125      	bne.n	8001e3c <XO_Game_voidRun+0x200>
 8001df0:	2108      	movs	r1, #8
 8001df2:	2001      	movs	r0, #1
 8001df4:	f000 f829 	bl	8001e4a <debounce>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d01e      	beq.n	8001e3c <XO_Game_voidRun+0x200>
            if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001dfe:	79ba      	ldrb	r2, [r7, #6]
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	4611      	mov	r1, r2
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 fbe1 	bl	80025cc <XO_u8MakeMove>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d011      	beq.n	8001e34 <XO_Game_voidRun+0x1f8>
                Sound_voidPlayMove(); /* NEW */
 8001e10:	f000 fb53 	bl	80024ba <Sound_voidPlayMove>
                GUI_voidDrawSymbol(cursor_row, cursor_col, current_player);
 8001e14:	78ba      	ldrb	r2, [r7, #2]
 8001e16:	79b9      	ldrb	r1, [r7, #6]
 8001e18:	79fb      	ldrb	r3, [r7, #7]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f000 f8a0 	bl	8001f60 <GUI_voidDrawSymbol>
                game_state = XO_u8CheckGameState();
 8001e20:	f000 fc06 	bl	8002630 <XO_u8CheckGameState>
 8001e24:	4603      	mov	r3, r0
 8001e26:	717b      	strb	r3, [r7, #5]
                if(game_state == GAME_ONGOING) {
 8001e28:	797b      	ldrb	r3, [r7, #5]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <XO_Game_voidRun+0x200>
                    XO_voidSwitchPlayer();
 8001e2e:	f000 fbb9 	bl	80025a4 <XO_voidSwitchPlayer>
 8001e32:	e003      	b.n	8001e3c <XO_Game_voidRun+0x200>
                }
            } else {
                Sound_voidPlayError(); /* NEW */
 8001e34:	f000 fb74 	bl	8002520 <Sound_voidPlayError>
 8001e38:	e000      	b.n	8001e3c <XO_Game_voidRun+0x200>
            if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001e3a:	bf00      	nop
            }
        }
        MSTK_voidDelayms(50);
 8001e3c:	2032      	movs	r0, #50	@ 0x32
 8001e3e:	f7ff f93b 	bl	80010b8 <MSTK_voidDelayms>
    {
 8001e42:	e71d      	b.n	8001c80 <XO_Game_voidRun+0x44>
    }
}
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}

08001e4a <debounce>:

/* دوال الواجهة الرسومية (GUI) كما هي بدون تغيير */
static u8 debounce(Port_t port, PIN_t pin) { if (MGPIO_u8GetPinValue(port, pin) == HIGH) { MSTK_voidDelayms(50); if (MGPIO_u8GetPinValue(port, pin) == HIGH) { while(MGPIO_u8GetPinValue(port, pin) == HIGH); return 1; } } return 0; }
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	4603      	mov	r3, r0
 8001e52:	460a      	mov	r2, r1
 8001e54:	71fb      	strb	r3, [r7, #7]
 8001e56:	4613      	mov	r3, r2
 8001e58:	71bb      	strb	r3, [r7, #6]
 8001e5a:	79ba      	ldrb	r2, [r7, #6]
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	4611      	mov	r1, r2
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ff65 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d117      	bne.n	8001e9c <debounce+0x52>
 8001e6c:	2032      	movs	r0, #50	@ 0x32
 8001e6e:	f7ff f923 	bl	80010b8 <MSTK_voidDelayms>
 8001e72:	79ba      	ldrb	r2, [r7, #6]
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe ff59 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d10b      	bne.n	8001e9c <debounce+0x52>
 8001e84:	bf00      	nop
 8001e86:	79ba      	ldrb	r2, [r7, #6]
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7fe ff4f 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d0f6      	beq.n	8001e86 <debounce+0x3c>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <debounce+0x54>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <check_long_press>:
static u8 check_long_press(Port_t port, PIN_t pin, u16 delay_ms) { if (MGPIO_u8GetPinValue(port, pin) == HIGH) { MSTK_voidDelayms(delay_ms); if (MGPIO_u8GetPinValue(port, pin) == HIGH) { while(MGPIO_u8GetPinValue(port, pin) == HIGH); return 1; } } return 0; }
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	4603      	mov	r3, r0
 8001eae:	71fb      	strb	r3, [r7, #7]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	71bb      	strb	r3, [r7, #6]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	80bb      	strh	r3, [r7, #4]
 8001eb8:	79ba      	ldrb	r2, [r7, #6]
 8001eba:	79fb      	ldrb	r3, [r7, #7]
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe ff36 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d118      	bne.n	8001efc <check_long_press+0x56>
 8001eca:	88bb      	ldrh	r3, [r7, #4]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff f8f3 	bl	80010b8 <MSTK_voidDelayms>
 8001ed2:	79ba      	ldrb	r2, [r7, #6]
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe ff29 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d10b      	bne.n	8001efc <check_long_press+0x56>
 8001ee4:	bf00      	nop
 8001ee6:	79ba      	ldrb	r2, [r7, #6]
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	4611      	mov	r1, r2
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe ff1f 	bl	8000d30 <MGPIO_u8GetPinValue>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d0f6      	beq.n	8001ee6 <check_long_press+0x40>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e000      	b.n	8001efe <check_long_press+0x58>
 8001efc:	2300      	movs	r3, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <GUI_voidDrawBoard>:
static void GUI_voidDrawBoard(void) { u8 board_width = (CELL_SIZE * 3); HTFT_voidFillRect(BOARD_ORIGIN_X + CELL_SIZE - (GRID_THICKNESS/2), BOARD_ORIGIN_Y, GRID_THICKNESS, board_width, WHITE); HTFT_voidFillRect(BOARD_ORIGIN_X + CELL_SIZE * 2 - (GRID_THICKNESS/2), BOARD_ORIGIN_Y, GRID_THICKNESS, board_width, WHITE); HTFT_voidFillRect(BOARD_ORIGIN_X, BOARD_ORIGIN_Y + CELL_SIZE - (GRID_THICKNESS/2), board_width, GRID_THICKNESS, WHITE); HTFT_voidFillRect(BOARD_ORIGIN_X, BOARD_ORIGIN_Y + CELL_SIZE * 2 - (GRID_THICKNESS/2), board_width, GRID_THICKNESS, WHITE); }
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af02      	add	r7, sp, #8
 8001f0c:	2378      	movs	r3, #120	@ 0x78
 8001f0e:	71fb      	strb	r3, [r7, #7]
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f16:	9200      	str	r2, [sp, #0]
 8001f18:	2204      	movs	r2, #4
 8001f1a:	2114      	movs	r1, #20
 8001f1c:	202a      	movs	r0, #42	@ 0x2a
 8001f1e:	f7fe fd71 	bl	8000a04 <HTFT_voidFillRect>
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f28:	9200      	str	r2, [sp, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	2114      	movs	r1, #20
 8001f2e:	2052      	movs	r0, #82	@ 0x52
 8001f30:	f7fe fd68 	bl	8000a04 <HTFT_voidFillRect>
 8001f34:	79fa      	ldrb	r2, [r7, #7]
 8001f36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	213a      	movs	r1, #58	@ 0x3a
 8001f40:	2004      	movs	r0, #4
 8001f42:	f7fe fd5f 	bl	8000a04 <HTFT_voidFillRect>
 8001f46:	79fa      	ldrb	r2, [r7, #7]
 8001f48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	2304      	movs	r3, #4
 8001f50:	2162      	movs	r1, #98	@ 0x62
 8001f52:	2004      	movs	r0, #4
 8001f54:	f7fe fd56 	bl	8000a04 <HTFT_voidFillRect>
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <GUI_voidDrawSymbol>:
static void GUI_voidDrawSymbol(u8 Copy_u8Row, u8 Copy_u8Col, u8 Copy_u8Player) { u8 x_start = BOARD_ORIGIN_X + (Copy_u8Col * CELL_SIZE) + SYMBOL_PADDING; u8 y_start = BOARD_ORIGIN_Y + (Copy_u8Row * CELL_SIZE) + SYMBOL_PADDING; u8 symbol_size = CELL_SIZE - (2 * SYMBOL_PADDING); u8 line_thick = 3; if (Copy_u8Player == PLAYER_X) { for(u8 i=0; i < symbol_size; i++) { HTFT_voidFillRect(x_start + i, y_start + i, line_thick, line_thick, RED); HTFT_voidFillRect(x_start + (symbol_size - i - 1), y_start + i, line_thick, line_thick, RED); } } else if (Copy_u8Player == PLAYER_O) { HTFT_voidFillRect(x_start, y_start, symbol_size, line_thick, BLUE); HTFT_voidFillRect(x_start, y_start + symbol_size - line_thick, symbol_size, line_thick, BLUE); HTFT_voidFillRect(x_start, y_start, line_thick, symbol_size, BLUE); HTFT_voidFillRect(x_start + symbol_size - line_thick, y_start, line_thick, symbol_size, BLUE); } }
 8001f60:	b590      	push	{r4, r7, lr}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af02      	add	r7, sp, #8
 8001f66:	4603      	mov	r3, r0
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	71bb      	strb	r3, [r7, #6]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	717b      	strb	r3, [r7, #5]
 8001f72:	79bb      	ldrb	r3, [r7, #6]
 8001f74:	461a      	mov	r2, r3
 8001f76:	0092      	lsls	r2, r2, #2
 8001f78:	4413      	add	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	3309      	adds	r3, #9
 8001f80:	73bb      	strb	r3, [r7, #14]
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	461a      	mov	r2, r3
 8001f86:	0092      	lsls	r2, r2, #2
 8001f88:	4413      	add	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3319      	adds	r3, #25
 8001f90:	737b      	strb	r3, [r7, #13]
 8001f92:	231e      	movs	r3, #30
 8001f94:	733b      	strb	r3, [r7, #12]
 8001f96:	2303      	movs	r3, #3
 8001f98:	72fb      	strb	r3, [r7, #11]
 8001f9a:	797b      	ldrb	r3, [r7, #5]
 8001f9c:	2b01      	cmp	r3, #1
 8001f9e:	d12d      	bne.n	8001ffc <GUI_voidDrawSymbol+0x9c>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	73fb      	strb	r3, [r7, #15]
 8001fa4:	e025      	b.n	8001ff2 <GUI_voidDrawSymbol+0x92>
 8001fa6:	7bba      	ldrb	r2, [r7, #14]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	4413      	add	r3, r2
 8001fac:	b2d8      	uxtb	r0, r3
 8001fae:	7b7a      	ldrb	r2, [r7, #13]
 8001fb0:	7bfb      	ldrb	r3, [r7, #15]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	b2d9      	uxtb	r1, r3
 8001fb6:	7afb      	ldrb	r3, [r7, #11]
 8001fb8:	7afa      	ldrb	r2, [r7, #11]
 8001fba:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8001fbe:	9400      	str	r4, [sp, #0]
 8001fc0:	f7fe fd20 	bl	8000a04 <HTFT_voidFillRect>
 8001fc4:	7b3a      	ldrb	r2, [r7, #12]
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	7bbb      	ldrb	r3, [r7, #14]
 8001fce:	4413      	add	r3, r2
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	b2d8      	uxtb	r0, r3
 8001fd6:	7b7a      	ldrb	r2, [r7, #13]
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	4413      	add	r3, r2
 8001fdc:	b2d9      	uxtb	r1, r3
 8001fde:	7afb      	ldrb	r3, [r7, #11]
 8001fe0:	7afa      	ldrb	r2, [r7, #11]
 8001fe2:	f44f 4478 	mov.w	r4, #63488	@ 0xf800
 8001fe6:	9400      	str	r4, [sp, #0]
 8001fe8:	f7fe fd0c 	bl	8000a04 <HTFT_voidFillRect>
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	73fb      	strb	r3, [r7, #15]
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	7b3b      	ldrb	r3, [r7, #12]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d3d5      	bcc.n	8001fa6 <GUI_voidDrawSymbol+0x46>
 8001ffa:	e02e      	b.n	800205a <GUI_voidDrawSymbol+0xfa>
 8001ffc:	797b      	ldrb	r3, [r7, #5]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d12b      	bne.n	800205a <GUI_voidDrawSymbol+0xfa>
 8002002:	7afb      	ldrb	r3, [r7, #11]
 8002004:	7b3a      	ldrb	r2, [r7, #12]
 8002006:	7b79      	ldrb	r1, [r7, #13]
 8002008:	7bb8      	ldrb	r0, [r7, #14]
 800200a:	241f      	movs	r4, #31
 800200c:	9400      	str	r4, [sp, #0]
 800200e:	f7fe fcf9 	bl	8000a04 <HTFT_voidFillRect>
 8002012:	7b7a      	ldrb	r2, [r7, #13]
 8002014:	7b3b      	ldrb	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	b2da      	uxtb	r2, r3
 800201a:	7afb      	ldrb	r3, [r7, #11]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	b2d9      	uxtb	r1, r3
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	7b3a      	ldrb	r2, [r7, #12]
 8002024:	7bb8      	ldrb	r0, [r7, #14]
 8002026:	241f      	movs	r4, #31
 8002028:	9400      	str	r4, [sp, #0]
 800202a:	f7fe fceb 	bl	8000a04 <HTFT_voidFillRect>
 800202e:	7b3b      	ldrb	r3, [r7, #12]
 8002030:	7afa      	ldrb	r2, [r7, #11]
 8002032:	7b79      	ldrb	r1, [r7, #13]
 8002034:	7bb8      	ldrb	r0, [r7, #14]
 8002036:	241f      	movs	r4, #31
 8002038:	9400      	str	r4, [sp, #0]
 800203a:	f7fe fce3 	bl	8000a04 <HTFT_voidFillRect>
 800203e:	7bba      	ldrb	r2, [r7, #14]
 8002040:	7b3b      	ldrb	r3, [r7, #12]
 8002042:	4413      	add	r3, r2
 8002044:	b2da      	uxtb	r2, r3
 8002046:	7afb      	ldrb	r3, [r7, #11]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b2d8      	uxtb	r0, r3
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	7afa      	ldrb	r2, [r7, #11]
 8002050:	7b79      	ldrb	r1, [r7, #13]
 8002052:	241f      	movs	r4, #31
 8002054:	9400      	str	r4, [sp, #0]
 8002056:	f7fe fcd5 	bl	8000a04 <HTFT_voidFillRect>
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bd90      	pop	{r4, r7, pc}

08002062 <GUI_voidDrawCursor>:
static void GUI_voidDrawCursor(u8 Copy_u8Row, u8 Copy_u8Col, u16 Copy_u16Color) { u8 x = BOARD_ORIGIN_X + Copy_u8Col * CELL_SIZE; u8 y = BOARD_ORIGIN_Y + Copy_u8Row * CELL_SIZE; u8 thick = 2; u8 inset = 3; if (Copy_u16Color == BLACK) { HTFT_voidFillRect(x + thick, y + thick, CELL_SIZE - (2 * thick), CELL_SIZE - (2 * thick), BLACK); } else { HTFT_voidFillRect(x + inset, y + inset, CELL_SIZE - (2 * inset), thick, Copy_u16Color); HTFT_voidFillRect(x + inset, y + CELL_SIZE - thick - inset, CELL_SIZE - (2 * inset), thick, Copy_u16Color); HTFT_voidFillRect(x + inset, y + inset, thick, CELL_SIZE - (2 * inset), Copy_u16Color); HTFT_voidFillRect(x + CELL_SIZE - thick - inset, y + inset, thick, CELL_SIZE - (2 * inset), Copy_u16Color); } }
 8002062:	b590      	push	{r4, r7, lr}
 8002064:	b087      	sub	sp, #28
 8002066:	af02      	add	r7, sp, #8
 8002068:	4603      	mov	r3, r0
 800206a:	71fb      	strb	r3, [r7, #7]
 800206c:	460b      	mov	r3, r1
 800206e:	71bb      	strb	r3, [r7, #6]
 8002070:	4613      	mov	r3, r2
 8002072:	80bb      	strh	r3, [r7, #4]
 8002074:	79bb      	ldrb	r3, [r7, #6]
 8002076:	461a      	mov	r2, r3
 8002078:	0092      	lsls	r2, r2, #2
 800207a:	4413      	add	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	b2db      	uxtb	r3, r3
 8002080:	3304      	adds	r3, #4
 8002082:	73fb      	strb	r3, [r7, #15]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	461a      	mov	r2, r3
 8002088:	0092      	lsls	r2, r2, #2
 800208a:	4413      	add	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	b2db      	uxtb	r3, r3
 8002090:	3314      	adds	r3, #20
 8002092:	73bb      	strb	r3, [r7, #14]
 8002094:	2302      	movs	r3, #2
 8002096:	737b      	strb	r3, [r7, #13]
 8002098:	2303      	movs	r3, #3
 800209a:	733b      	strb	r3, [r7, #12]
 800209c:	88bb      	ldrh	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d118      	bne.n	80020d4 <GUI_voidDrawCursor+0x72>
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	7b7b      	ldrb	r3, [r7, #13]
 80020a6:	4413      	add	r3, r2
 80020a8:	b2d8      	uxtb	r0, r3
 80020aa:	7bba      	ldrb	r2, [r7, #14]
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	4413      	add	r3, r2
 80020b0:	b2d9      	uxtb	r1, r3
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f1c3 0314 	rsb	r3, r3, #20
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	b2da      	uxtb	r2, r3
 80020be:	7b7b      	ldrb	r3, [r7, #13]
 80020c0:	f1c3 0314 	rsb	r3, r3, #20
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2400      	movs	r4, #0
 80020cc:	9400      	str	r4, [sp, #0]
 80020ce:	f7fe fc99 	bl	8000a04 <HTFT_voidFillRect>
 80020d2:	e059      	b.n	8002188 <GUI_voidDrawCursor+0x126>
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	7b3b      	ldrb	r3, [r7, #12]
 80020d8:	4413      	add	r3, r2
 80020da:	b2d8      	uxtb	r0, r3
 80020dc:	7bba      	ldrb	r2, [r7, #14]
 80020de:	7b3b      	ldrb	r3, [r7, #12]
 80020e0:	4413      	add	r3, r2
 80020e2:	b2d9      	uxtb	r1, r3
 80020e4:	7b3b      	ldrb	r3, [r7, #12]
 80020e6:	f1c3 0314 	rsb	r3, r3, #20
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	b2da      	uxtb	r2, r3
 80020f0:	7b7c      	ldrb	r4, [r7, #13]
 80020f2:	88bb      	ldrh	r3, [r7, #4]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	4623      	mov	r3, r4
 80020f8:	f7fe fc84 	bl	8000a04 <HTFT_voidFillRect>
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	4413      	add	r3, r2
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	7bba      	ldrb	r2, [r7, #14]
 8002106:	7b7b      	ldrb	r3, [r7, #13]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	b2da      	uxtb	r2, r3
 800210c:	7b3b      	ldrb	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3328      	adds	r3, #40	@ 0x28
 8002114:	b2d9      	uxtb	r1, r3
 8002116:	7b3b      	ldrb	r3, [r7, #12]
 8002118:	f1c3 0314 	rsb	r3, r3, #20
 800211c:	b2db      	uxtb	r3, r3
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	b2da      	uxtb	r2, r3
 8002122:	7b7c      	ldrb	r4, [r7, #13]
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	4623      	mov	r3, r4
 800212a:	f7fe fc6b 	bl	8000a04 <HTFT_voidFillRect>
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	7b3b      	ldrb	r3, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	b2d8      	uxtb	r0, r3
 8002136:	7bba      	ldrb	r2, [r7, #14]
 8002138:	7b3b      	ldrb	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	b2d9      	uxtb	r1, r3
 800213e:	7b3b      	ldrb	r3, [r7, #12]
 8002140:	f1c3 0314 	rsb	r3, r3, #20
 8002144:	b2db      	uxtb	r3, r3
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	b2dc      	uxtb	r4, r3
 800214a:	7b7a      	ldrb	r2, [r7, #13]
 800214c:	88bb      	ldrh	r3, [r7, #4]
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4623      	mov	r3, r4
 8002152:	f7fe fc57 	bl	8000a04 <HTFT_voidFillRect>
 8002156:	7bfa      	ldrb	r2, [r7, #15]
 8002158:	7b7b      	ldrb	r3, [r7, #13]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b2da      	uxtb	r2, r3
 800215e:	7b3b      	ldrb	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3328      	adds	r3, #40	@ 0x28
 8002166:	b2d8      	uxtb	r0, r3
 8002168:	7bba      	ldrb	r2, [r7, #14]
 800216a:	7b3b      	ldrb	r3, [r7, #12]
 800216c:	4413      	add	r3, r2
 800216e:	b2d9      	uxtb	r1, r3
 8002170:	7b3b      	ldrb	r3, [r7, #12]
 8002172:	f1c3 0314 	rsb	r3, r3, #20
 8002176:	b2db      	uxtb	r3, r3
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	b2dc      	uxtb	r4, r3
 800217c:	7b7a      	ldrb	r2, [r7, #13]
 800217e:	88bb      	ldrh	r3, [r7, #4]
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4623      	mov	r3, r4
 8002184:	f7fe fc3e 	bl	8000a04 <HTFT_voidFillRect>
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	bd90      	pop	{r4, r7, pc}

08002190 <GUI_voidUpdateWinCounters>:
static void GUI_voidUpdateWinCounters() { char score_str[5]; HTFT_voidFillRect(0, 0, SCREEN_WIDTH, 18, BLACK); GUI_voidDrawString(5, 5, "X:", RED, 2); sprintf(score_str, "%d", XO_u8GetWinCount(PLAYER_X)); GUI_voidDrawString(30, 5, score_str, WHITE, 2); GUI_voidDrawString(SCREEN_WIDTH - 50, 5, "O:", BLUE, 2); sprintf(score_str, "%d", XO_u8GetWinCount(PLAYER_O)); GUI_voidDrawString(SCREEN_WIDTH - 25, 5, score_str, WHITE, 2); }
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af02      	add	r7, sp, #8
 8002196:	2300      	movs	r3, #0
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	2312      	movs	r3, #18
 800219c:	2280      	movs	r2, #128	@ 0x80
 800219e:	2100      	movs	r1, #0
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7fe fc2f 	bl	8000a04 <HTFT_voidFillRect>
 80021a6:	2302      	movs	r3, #2
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80021ae:	4a1b      	ldr	r2, [pc, #108]	@ (800221c <GUI_voidUpdateWinCounters+0x8c>)
 80021b0:	2105      	movs	r1, #5
 80021b2:	2005      	movs	r0, #5
 80021b4:	f000 f89a 	bl	80022ec <GUI_voidDrawString>
 80021b8:	2001      	movs	r0, #1
 80021ba:	f000 fb23 	bl	8002804 <XO_u8GetWinCount>
 80021be:	4603      	mov	r3, r0
 80021c0:	461a      	mov	r2, r3
 80021c2:	463b      	mov	r3, r7
 80021c4:	4916      	ldr	r1, [pc, #88]	@ (8002220 <GUI_voidUpdateWinCounters+0x90>)
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fe00 	bl	8002dcc <siprintf>
 80021cc:	463a      	mov	r2, r7
 80021ce:	2302      	movs	r3, #2
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80021d6:	2105      	movs	r1, #5
 80021d8:	201e      	movs	r0, #30
 80021da:	f000 f887 	bl	80022ec <GUI_voidDrawString>
 80021de:	2302      	movs	r3, #2
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	231f      	movs	r3, #31
 80021e4:	4a0f      	ldr	r2, [pc, #60]	@ (8002224 <GUI_voidUpdateWinCounters+0x94>)
 80021e6:	2105      	movs	r1, #5
 80021e8:	204e      	movs	r0, #78	@ 0x4e
 80021ea:	f000 f87f 	bl	80022ec <GUI_voidDrawString>
 80021ee:	2002      	movs	r0, #2
 80021f0:	f000 fb08 	bl	8002804 <XO_u8GetWinCount>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	463b      	mov	r3, r7
 80021fa:	4909      	ldr	r1, [pc, #36]	@ (8002220 <GUI_voidUpdateWinCounters+0x90>)
 80021fc:	4618      	mov	r0, r3
 80021fe:	f000 fde5 	bl	8002dcc <siprintf>
 8002202:	463a      	mov	r2, r7
 8002204:	2302      	movs	r3, #2
 8002206:	9300      	str	r3, [sp, #0]
 8002208:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800220c:	2105      	movs	r1, #5
 800220e:	2067      	movs	r0, #103	@ 0x67
 8002210:	f000 f86c 	bl	80022ec <GUI_voidDrawString>
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	08003f90 	.word	0x08003f90
 8002220:	08003f94 	.word	0x08003f94
 8002224:	08003f98 	.word	0x08003f98

08002228 <GUI_voidShowEndScreen>:
static void GUI_voidShowEndScreen(u8 game_state) { char final_score_str[20];	HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);	if (game_state == GAME_WIN_X) { GUI_voidDrawString(12, 50, "PLAYER X WINS!", RED, 2);	} else if (game_state == GAME_WIN_O) { GUI_voidDrawString(12, 50, "PLAYER O WINS!", BLUE, 2);	} else if (game_state == GAME_DRAW) { GUI_voidDrawString(35, 50, "DRAW!", WHITE, 2); } sprintf(final_score_str, "X:%d  O:%d", XO_u8GetWinCount(PLAYER_X), XO_u8GetWinCount(PLAYER_O)); GUI_voidDrawString(25, 80, final_score_str, YELLOW, 2); GUI_voidDrawString(15, 120, "RESTARTING...", GRAY, 1); }
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b08b      	sub	sp, #44	@ 0x2c
 800222c:	af02      	add	r7, sp, #8
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
 8002232:	2300      	movs	r3, #0
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	23a0      	movs	r3, #160	@ 0xa0
 8002238:	2280      	movs	r2, #128	@ 0x80
 800223a:	2100      	movs	r1, #0
 800223c:	2000      	movs	r0, #0
 800223e:	f7fe fbe1 	bl	8000a04 <HTFT_voidFillRect>
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d109      	bne.n	800225c <GUI_voidShowEndScreen+0x34>
 8002248:	2302      	movs	r3, #2
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8002250:	4a21      	ldr	r2, [pc, #132]	@ (80022d8 <GUI_voidShowEndScreen+0xb0>)
 8002252:	2132      	movs	r1, #50	@ 0x32
 8002254:	200c      	movs	r0, #12
 8002256:	f000 f849 	bl	80022ec <GUI_voidDrawString>
 800225a:	e017      	b.n	800228c <GUI_voidShowEndScreen+0x64>
 800225c:	79fb      	ldrb	r3, [r7, #7]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d108      	bne.n	8002274 <GUI_voidShowEndScreen+0x4c>
 8002262:	2302      	movs	r3, #2
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	231f      	movs	r3, #31
 8002268:	4a1c      	ldr	r2, [pc, #112]	@ (80022dc <GUI_voidShowEndScreen+0xb4>)
 800226a:	2132      	movs	r1, #50	@ 0x32
 800226c:	200c      	movs	r0, #12
 800226e:	f000 f83d 	bl	80022ec <GUI_voidDrawString>
 8002272:	e00b      	b.n	800228c <GUI_voidShowEndScreen+0x64>
 8002274:	79fb      	ldrb	r3, [r7, #7]
 8002276:	2b03      	cmp	r3, #3
 8002278:	d108      	bne.n	800228c <GUI_voidShowEndScreen+0x64>
 800227a:	2302      	movs	r3, #2
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002282:	4a17      	ldr	r2, [pc, #92]	@ (80022e0 <GUI_voidShowEndScreen+0xb8>)
 8002284:	2132      	movs	r1, #50	@ 0x32
 8002286:	2023      	movs	r0, #35	@ 0x23
 8002288:	f000 f830 	bl	80022ec <GUI_voidDrawString>
 800228c:	2001      	movs	r0, #1
 800228e:	f000 fab9 	bl	8002804 <XO_u8GetWinCount>
 8002292:	4603      	mov	r3, r0
 8002294:	461c      	mov	r4, r3
 8002296:	2002      	movs	r0, #2
 8002298:	f000 fab4 	bl	8002804 <XO_u8GetWinCount>
 800229c:	4603      	mov	r3, r0
 800229e:	f107 000c 	add.w	r0, r7, #12
 80022a2:	4622      	mov	r2, r4
 80022a4:	490f      	ldr	r1, [pc, #60]	@ (80022e4 <GUI_voidShowEndScreen+0xbc>)
 80022a6:	f000 fd91 	bl	8002dcc <siprintf>
 80022aa:	f107 020c 	add.w	r2, r7, #12
 80022ae:	2302      	movs	r3, #2
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80022b6:	2150      	movs	r1, #80	@ 0x50
 80022b8:	2019      	movs	r0, #25
 80022ba:	f000 f817 	bl	80022ec <GUI_voidDrawString>
 80022be:	2301      	movs	r3, #1
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f248 4310 	movw	r3, #33808	@ 0x8410
 80022c6:	4a08      	ldr	r2, [pc, #32]	@ (80022e8 <GUI_voidShowEndScreen+0xc0>)
 80022c8:	2178      	movs	r1, #120	@ 0x78
 80022ca:	200f      	movs	r0, #15
 80022cc:	f000 f80e 	bl	80022ec <GUI_voidDrawString>
 80022d0:	bf00      	nop
 80022d2:	3724      	adds	r7, #36	@ 0x24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}
 80022d8:	08003f9c 	.word	0x08003f9c
 80022dc:	08003fac 	.word	0x08003fac
 80022e0:	08003fbc 	.word	0x08003fbc
 80022e4:	08003fc4 	.word	0x08003fc4
 80022e8:	08003fd0 	.word	0x08003fd0

080022ec <GUI_voidDrawString>:
static void GUI_voidDrawString(u8 x, u8 y, char* str, u16 color, u8 size) { while (*str) { if (*str < ' ' || *str > 'Z') { str++; continue; } const unsigned char* glyph = font5x7 + (*str - ' ') * 5; for (u8 col = 0; col < 5; col++) { u8 bits = glyph[col]; for (u8 row = 0; row < 7; row++) { if ((bits >> row) & 1) { HTFT_voidFillRect(x + col * size, y + row * size, size, size, color); } } } x += 6 * size; if (x > SCREEN_WIDTH - (6 * size)) { x = 0; y += 8 * size; } str++; } }
 80022ec:	b590      	push	{r4, r7, lr}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af02      	add	r7, sp, #8
 80022f2:	603a      	str	r2, [r7, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	71fb      	strb	r3, [r7, #7]
 80022fa:	460b      	mov	r3, r1
 80022fc:	71bb      	strb	r3, [r7, #6]
 80022fe:	4613      	mov	r3, r2
 8002300:	80bb      	strh	r3, [r7, #4]
 8002302:	e070      	b.n	80023e6 <GUI_voidDrawString+0xfa>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b1f      	cmp	r3, #31
 800230a:	d903      	bls.n	8002314 <GUI_voidDrawString+0x28>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	2b5a      	cmp	r3, #90	@ 0x5a
 8002312:	d903      	bls.n	800231c <GUI_voidDrawString+0x30>
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	3301      	adds	r3, #1
 8002318:	603b      	str	r3, [r7, #0]
 800231a:	e064      	b.n	80023e6 <GUI_voidDrawString+0xfa>
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	781b      	ldrb	r3, [r3, #0]
 8002320:	f1a3 0220 	sub.w	r2, r3, #32
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	461a      	mov	r2, r3
 800232c:	4b32      	ldr	r3, [pc, #200]	@ (80023f8 <GUI_voidDrawString+0x10c>)
 800232e:	4413      	add	r3, r2
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	2300      	movs	r3, #0
 8002334:	75fb      	strb	r3, [r7, #23]
 8002336:	e033      	b.n	80023a0 <GUI_voidDrawString+0xb4>
 8002338:	7dfb      	ldrb	r3, [r7, #23]
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	2300      	movs	r3, #0
 8002344:	75bb      	strb	r3, [r7, #22]
 8002346:	e025      	b.n	8002394 <GUI_voidDrawString+0xa8>
 8002348:	7bfa      	ldrb	r2, [r7, #15]
 800234a:	7dbb      	ldrb	r3, [r7, #22]
 800234c:	fa42 f303 	asr.w	r3, r2, r3
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d01a      	beq.n	800238e <GUI_voidDrawString+0xa2>
 8002358:	7dfa      	ldrb	r2, [r7, #23]
 800235a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800235e:	fb12 f303 	smulbb	r3, r2, r3
 8002362:	b2da      	uxtb	r2, r3
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	4413      	add	r3, r2
 8002368:	b2d8      	uxtb	r0, r3
 800236a:	7dba      	ldrb	r2, [r7, #22]
 800236c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002370:	fb12 f303 	smulbb	r3, r2, r3
 8002374:	b2da      	uxtb	r2, r3
 8002376:	79bb      	ldrb	r3, [r7, #6]
 8002378:	4413      	add	r3, r2
 800237a:	b2d9      	uxtb	r1, r3
 800237c:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 8002380:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002384:	88bb      	ldrh	r3, [r7, #4]
 8002386:	9300      	str	r3, [sp, #0]
 8002388:	4623      	mov	r3, r4
 800238a:	f7fe fb3b 	bl	8000a04 <HTFT_voidFillRect>
 800238e:	7dbb      	ldrb	r3, [r7, #22]
 8002390:	3301      	adds	r3, #1
 8002392:	75bb      	strb	r3, [r7, #22]
 8002394:	7dbb      	ldrb	r3, [r7, #22]
 8002396:	2b06      	cmp	r3, #6
 8002398:	d9d6      	bls.n	8002348 <GUI_voidDrawString+0x5c>
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	3301      	adds	r3, #1
 800239e:	75fb      	strb	r3, [r7, #23]
 80023a0:	7dfb      	ldrb	r3, [r7, #23]
 80023a2:	2b04      	cmp	r3, #4
 80023a4:	d9c8      	bls.n	8002338 <GUI_voidDrawString+0x4c>
 80023a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023aa:	461a      	mov	r2, r3
 80023ac:	0052      	lsls	r2, r2, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	79fb      	ldrb	r3, [r7, #7]
 80023b6:	4413      	add	r3, r2
 80023b8:	71fb      	strb	r3, [r7, #7]
 80023ba:	79f9      	ldrb	r1, [r7, #7]
 80023bc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023c0:	4613      	mov	r3, r2
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	3380      	adds	r3, #128	@ 0x80
 80023ca:	4299      	cmp	r1, r3
 80023cc:	dd08      	ble.n	80023e0 <GUI_voidDrawString+0xf4>
 80023ce:	2300      	movs	r3, #0
 80023d0:	71fb      	strb	r3, [r7, #7]
 80023d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023d6:	00db      	lsls	r3, r3, #3
 80023d8:	b2da      	uxtb	r2, r3
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	4413      	add	r3, r2
 80023de:	71bb      	strb	r3, [r7, #6]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	3301      	adds	r3, #1
 80023e4:	603b      	str	r3, [r7, #0]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d18a      	bne.n	8002304 <GUI_voidDrawString+0x18>
 80023ee:	bf00      	nop
 80023f0:	bf00      	nop
 80023f2:	371c      	adds	r7, #28
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd90      	pop	{r4, r7, pc}
 80023f8:	080042e0 	.word	0x080042e0

080023fc <Sound_voidInit>:

/*******************************************************************************
* NEW & CORRECTED SOUND FUNCTIONS                                              *
*******************************************************************************/

static void Sound_voidInit(void) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
    MGPIO_voidSetMode(BUZZER_PORT, BUZZER_PIN, OUTPUT);
 8002400:	2201      	movs	r2, #1
 8002402:	210a      	movs	r1, #10
 8002404:	2001      	movs	r0, #1
 8002406:	f7fe fb2b 	bl	8000a60 <MGPIO_voidSetMode>
    MGPIO_voidSetOutputConfig(BUZZER_PORT, BUZZER_PIN, Push_Pull, Low_Speed);
 800240a:	2300      	movs	r3, #0
 800240c:	2200      	movs	r2, #0
 800240e:	210a      	movs	r1, #10
 8002410:	2001      	movs	r0, #1
 8002412:	f7fe fb79 	bl	8000b08 <MGPIO_voidSetOutputConfig>
}
 8002416:	bf00      	nop
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <Sound_voidBeep>:

static void Sound_voidBeep(u16 frequency, u16 duration_ms) {
 800241c:	b580      	push	{r7, lr}
 800241e:	b086      	sub	sp, #24
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	460a      	mov	r2, r1
 8002426:	80fb      	strh	r3, [r7, #6]
 8002428:	4613      	mov	r3, r2
 800242a:	80bb      	strh	r3, [r7, #4]
    if (frequency == 0) return;
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d031      	beq.n	8002496 <Sound_voidBeep+0x7a>
    u32 half_period_us = 500000 / frequency;
 8002432:	88fb      	ldrh	r3, [r7, #6]
 8002434:	4a1b      	ldr	r2, [pc, #108]	@ (80024a4 <Sound_voidBeep+0x88>)
 8002436:	fb92 f3f3 	sdiv	r3, r2, r3
 800243a:	613b      	str	r3, [r7, #16]
    if (half_period_us == 0) return;
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d02b      	beq.n	800249a <Sound_voidBeep+0x7e>
    u32 total_cycles = ((u32)duration_ms * 1000) / (half_period_us * 2);
 8002442:	88bb      	ldrh	r3, [r7, #4]
 8002444:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002448:	fb03 f202 	mul.w	r2, r3, r2
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fbb2 f3f3 	udiv	r3, r2, r3
 8002454:	60fb      	str	r3, [r7, #12]
    for (u32 i = 0; i < total_cycles; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e012      	b.n	8002482 <Sound_voidBeep+0x66>
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, HIGH);
 800245c:	2201      	movs	r2, #1
 800245e:	210a      	movs	r1, #10
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe fbc7 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	f7fe fe48 	bl	80010fc <MSTK_voidDelayus>
        MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 800246c:	2200      	movs	r2, #0
 800246e:	210a      	movs	r1, #10
 8002470:	2001      	movs	r0, #1
 8002472:	f7fe fbbf 	bl	8000bf4 <MGPIO_voidSetPinValue>
        MSTK_voidDelayus(half_period_us);
 8002476:	6938      	ldr	r0, [r7, #16]
 8002478:	f7fe fe40 	bl	80010fc <MSTK_voidDelayus>
    for (u32 i = 0; i < total_cycles; i++) {
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	3301      	adds	r3, #1
 8002480:	617b      	str	r3, [r7, #20]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	429a      	cmp	r2, r3
 8002488:	d3e8      	bcc.n	800245c <Sound_voidBeep+0x40>
    }
    MGPIO_voidSetPinValue(BUZZER_PORT, BUZZER_PIN, LOW);
 800248a:	2200      	movs	r2, #0
 800248c:	210a      	movs	r1, #10
 800248e:	2001      	movs	r0, #1
 8002490:	f7fe fbb0 	bl	8000bf4 <MGPIO_voidSetPinValue>
 8002494:	e002      	b.n	800249c <Sound_voidBeep+0x80>
    if (frequency == 0) return;
 8002496:	bf00      	nop
 8002498:	e000      	b.n	800249c <Sound_voidBeep+0x80>
    if (half_period_us == 0) return;
 800249a:	bf00      	nop
}
 800249c:	3718      	adds	r7, #24
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	0007a120 	.word	0x0007a120

080024a8 <Sound_voidPlayClick>:

// صوت نقرة لتحريك المؤشر
static void Sound_voidPlayClick(void) {
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
    Sound_voidBeep(3000, 30);
 80024ac:	211e      	movs	r1, #30
 80024ae:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80024b2:	f7ff ffb3 	bl	800241c <Sound_voidBeep>
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}

080024ba <Sound_voidPlayMove>:

// صوت لتأكيد وضع علامة X أو O
static void Sound_voidPlayMove(void) {
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0
    Sound_voidBeep(1500, 60);
 80024be:	213c      	movs	r1, #60	@ 0x3c
 80024c0:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80024c4:	f7ff ffaa 	bl	800241c <Sound_voidBeep>
}
 80024c8:	bf00      	nop
 80024ca:	bd80      	pop	{r7, pc}

080024cc <Sound_voidPlayWin>:

// صوت الفوز في الجولة
static void Sound_voidPlayWin(void) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
    Sound_voidBeep(1200, 100);
 80024d0:	2164      	movs	r1, #100	@ 0x64
 80024d2:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80024d6:	f7ff ffa1 	bl	800241c <Sound_voidBeep>
    MSTK_voidDelayms(50);
 80024da:	2032      	movs	r0, #50	@ 0x32
 80024dc:	f7fe fdec 	bl	80010b8 <MSTK_voidDelayms>
    Sound_voidBeep(1600, 100);
 80024e0:	2164      	movs	r1, #100	@ 0x64
 80024e2:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80024e6:	f7ff ff99 	bl	800241c <Sound_voidBeep>
    MSTK_voidDelayms(50);
 80024ea:	2032      	movs	r0, #50	@ 0x32
 80024ec:	f7fe fde4 	bl	80010b8 <MSTK_voidDelayms>
    Sound_voidBeep(2000, 150);
 80024f0:	2196      	movs	r1, #150	@ 0x96
 80024f2:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80024f6:	f7ff ff91 	bl	800241c <Sound_voidBeep>
}
 80024fa:	bf00      	nop
 80024fc:	bd80      	pop	{r7, pc}

080024fe <Sound_voidPlayDraw>:

// صوت التعادل
static void Sound_voidPlayDraw(void) {
 80024fe:	b580      	push	{r7, lr}
 8002500:	af00      	add	r7, sp, #0
    Sound_voidBeep(1000, 150);
 8002502:	2196      	movs	r1, #150	@ 0x96
 8002504:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002508:	f7ff ff88 	bl	800241c <Sound_voidBeep>
    MSTK_voidDelayms(80);
 800250c:	2050      	movs	r0, #80	@ 0x50
 800250e:	f7fe fdd3 	bl	80010b8 <MSTK_voidDelayms>
    Sound_voidBeep(800, 150);
 8002512:	2196      	movs	r1, #150	@ 0x96
 8002514:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002518:	f7ff ff80 	bl	800241c <Sound_voidBeep>
}
 800251c:	bf00      	nop
 800251e:	bd80      	pop	{r7, pc}

08002520 <Sound_voidPlayError>:

// صوت عند محاولة اللعب في خانة ممتلئة
static void Sound_voidPlayError(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
    Sound_voidBeep(400, 200);
 8002524:	21c8      	movs	r1, #200	@ 0xc8
 8002526:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800252a:	f7ff ff77 	bl	800241c <Sound_voidBeep>
}
 800252e:	bf00      	nop
 8002530:	bd80      	pop	{r7, pc}
	...

08002534 <XO_voidInitBoard>:
static u8 G_u8GameBoard[3][3];
static u8 G_u8CurrentPlayer;
static u8 G_u8PlayerX_Wins = 0;
static u8 G_u8PlayerO_Wins = 0;

void XO_voidInitBoard(void) {
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
    for (u8 r = 0; r < 3; r++) {
 800253a:	2300      	movs	r3, #0
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e015      	b.n	800256c <XO_voidInitBoard+0x38>
        for (u8 c = 0; c < 3; c++) {
 8002540:	2300      	movs	r3, #0
 8002542:	71bb      	strb	r3, [r7, #6]
 8002544:	e00c      	b.n	8002560 <XO_voidInitBoard+0x2c>
            G_u8GameBoard[r][c] = EMPTY;
 8002546:	79fa      	ldrb	r2, [r7, #7]
 8002548:	79b9      	ldrb	r1, [r7, #6]
 800254a:	480e      	ldr	r0, [pc, #56]	@ (8002584 <XO_voidInitBoard+0x50>)
 800254c:	4613      	mov	r3, r2
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	4413      	add	r3, r2
 8002552:	4403      	add	r3, r0
 8002554:	440b      	add	r3, r1
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
        for (u8 c = 0; c < 3; c++) {
 800255a:	79bb      	ldrb	r3, [r7, #6]
 800255c:	3301      	adds	r3, #1
 800255e:	71bb      	strb	r3, [r7, #6]
 8002560:	79bb      	ldrb	r3, [r7, #6]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d9ef      	bls.n	8002546 <XO_voidInitBoard+0x12>
    for (u8 r = 0; r < 3; r++) {
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	3301      	adds	r3, #1
 800256a:	71fb      	strb	r3, [r7, #7]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	2b02      	cmp	r3, #2
 8002570:	d9e6      	bls.n	8002540 <XO_voidInitBoard+0xc>
        }
    }
    // اللاعب X يبدأ اللعبة دائمًا.
    G_u8CurrentPlayer = PLAYER_X;
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <XO_voidInitBoard+0x54>)
 8002574:	2201      	movs	r2, #1
 8002576:	701a      	strb	r2, [r3, #0]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	200001f4 	.word	0x200001f4
 8002588:	200001fd 	.word	0x200001fd

0800258c <XO_u8GetCurrentPlayer>:

u8 XO_u8GetCurrentPlayer(void) {
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
    return G_u8CurrentPlayer;
 8002590:	4b03      	ldr	r3, [pc, #12]	@ (80025a0 <XO_u8GetCurrentPlayer+0x14>)
 8002592:	781b      	ldrb	r3, [r3, #0]
}
 8002594:	4618      	mov	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	200001fd 	.word	0x200001fd

080025a4 <XO_voidSwitchPlayer>:

void XO_voidSwitchPlayer(void) {
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
    if (G_u8CurrentPlayer == PLAYER_X) {
 80025a8:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <XO_voidSwitchPlayer+0x24>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d103      	bne.n	80025b8 <XO_voidSwitchPlayer+0x14>
        G_u8CurrentPlayer = PLAYER_O;
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <XO_voidSwitchPlayer+0x24>)
 80025b2:	2202      	movs	r2, #2
 80025b4:	701a      	strb	r2, [r3, #0]
    } else {
        G_u8CurrentPlayer = PLAYER_X;
    }
}
 80025b6:	e002      	b.n	80025be <XO_voidSwitchPlayer+0x1a>
        G_u8CurrentPlayer = PLAYER_X;
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <XO_voidSwitchPlayer+0x24>)
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
}
 80025be:	bf00      	nop
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	200001fd 	.word	0x200001fd

080025cc <XO_u8MakeMove>:

u8 XO_u8MakeMove(u8 Copy_u8Row, u8 Copy_u8Col) {
 80025cc:	b490      	push	{r4, r7}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	460a      	mov	r2, r1
 80025d6:	71fb      	strb	r3, [r7, #7]
 80025d8:	4613      	mov	r3, r2
 80025da:	71bb      	strb	r3, [r7, #6]
    // التحقق من الحركات غير الصالحة (خارج الحدود أو الخانة غير فارغة).
    if (Copy_u8Row >= 3 || Copy_u8Col >= 3 || G_u8GameBoard[Copy_u8Row][Copy_u8Col] != EMPTY) {
 80025dc:	79fb      	ldrb	r3, [r7, #7]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d80d      	bhi.n	80025fe <XO_u8MakeMove+0x32>
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d80a      	bhi.n	80025fe <XO_u8MakeMove+0x32>
 80025e8:	79fa      	ldrb	r2, [r7, #7]
 80025ea:	79b9      	ldrb	r1, [r7, #6]
 80025ec:	480e      	ldr	r0, [pc, #56]	@ (8002628 <XO_u8MakeMove+0x5c>)
 80025ee:	4613      	mov	r3, r2
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	4413      	add	r3, r2
 80025f4:	4403      	add	r3, r0
 80025f6:	440b      	add	r3, r1
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <XO_u8MakeMove+0x36>
        return 0; // حركة غير صالحة.
 80025fe:	2300      	movs	r3, #0
 8002600:	e00c      	b.n	800261c <XO_u8MakeMove+0x50>
    }
    // وضع علامة اللاعب الحالي على اللوحة.
    G_u8GameBoard[Copy_u8Row][Copy_u8Col] = G_u8CurrentPlayer;
 8002602:	79fa      	ldrb	r2, [r7, #7]
 8002604:	79b9      	ldrb	r1, [r7, #6]
 8002606:	4b09      	ldr	r3, [pc, #36]	@ (800262c <XO_u8MakeMove+0x60>)
 8002608:	781c      	ldrb	r4, [r3, #0]
 800260a:	4807      	ldr	r0, [pc, #28]	@ (8002628 <XO_u8MakeMove+0x5c>)
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	4403      	add	r3, r0
 8002614:	440b      	add	r3, r1
 8002616:	4622      	mov	r2, r4
 8002618:	701a      	strb	r2, [r3, #0]
    return 1; // حركة ناجحة.
 800261a:	2301      	movs	r3, #1
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bc90      	pop	{r4, r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	200001f4 	.word	0x200001f4
 800262c:	200001fd 	.word	0x200001fd

08002630 <XO_u8CheckGameState>:

u8 XO_u8CheckGameState(void) {
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
    u8 winner = EMPTY;
 8002636:	2300      	movs	r3, #0
 8002638:	71fb      	strb	r3, [r7, #7]

    // التحقق من الصفوف بحثًا عن فوز
    for (u8 i = 0; i < 3; i++) {
 800263a:	2300      	movs	r3, #0
 800263c:	71bb      	strb	r3, [r7, #6]
 800263e:	e037      	b.n	80026b0 <XO_u8CheckGameState+0x80>
        if (G_u8GameBoard[i][0] != EMPTY && G_u8GameBoard[i][0] == G_u8GameBoard[i][1] && G_u8GameBoard[i][1] == G_u8GameBoard[i][2]) {
 8002640:	79ba      	ldrb	r2, [r7, #6]
 8002642:	495e      	ldr	r1, [pc, #376]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002644:	4613      	mov	r3, r2
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	4413      	add	r3, r2
 800264a:	440b      	add	r3, r1
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d02b      	beq.n	80026aa <XO_u8CheckGameState+0x7a>
 8002652:	79ba      	ldrb	r2, [r7, #6]
 8002654:	4959      	ldr	r1, [pc, #356]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002656:	4613      	mov	r3, r2
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	4413      	add	r3, r2
 800265c:	440b      	add	r3, r1
 800265e:	7819      	ldrb	r1, [r3, #0]
 8002660:	79ba      	ldrb	r2, [r7, #6]
 8002662:	4856      	ldr	r0, [pc, #344]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	4403      	add	r3, r0
 800266c:	3301      	adds	r3, #1
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	4299      	cmp	r1, r3
 8002672:	d11a      	bne.n	80026aa <XO_u8CheckGameState+0x7a>
 8002674:	79ba      	ldrb	r2, [r7, #6]
 8002676:	4951      	ldr	r1, [pc, #324]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	440b      	add	r3, r1
 8002680:	3301      	adds	r3, #1
 8002682:	7819      	ldrb	r1, [r3, #0]
 8002684:	79ba      	ldrb	r2, [r7, #6]
 8002686:	484d      	ldr	r0, [pc, #308]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002688:	4613      	mov	r3, r2
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	4413      	add	r3, r2
 800268e:	4403      	add	r3, r0
 8002690:	3302      	adds	r3, #2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4299      	cmp	r1, r3
 8002696:	d108      	bne.n	80026aa <XO_u8CheckGameState+0x7a>
            winner = G_u8GameBoard[i][0];
 8002698:	79ba      	ldrb	r2, [r7, #6]
 800269a:	4948      	ldr	r1, [pc, #288]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	440b      	add	r3, r1
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	71fb      	strb	r3, [r7, #7]
            break;
 80026a8:	e005      	b.n	80026b6 <XO_u8CheckGameState+0x86>
    for (u8 i = 0; i < 3; i++) {
 80026aa:	79bb      	ldrb	r3, [r7, #6]
 80026ac:	3301      	adds	r3, #1
 80026ae:	71bb      	strb	r3, [r7, #6]
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b02      	cmp	r3, #2
 80026b4:	d9c4      	bls.n	8002640 <XO_u8CheckGameState+0x10>
        }
    }

    // التحقق من الأعمدة بحثًا عن فوز، إذا لم يكن هناك فائز بعد
    if (winner == EMPTY) {
 80026b6:	79fb      	ldrb	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d125      	bne.n	8002708 <XO_u8CheckGameState+0xd8>
        for (u8 i = 0; i < 3; i++) {
 80026bc:	2300      	movs	r3, #0
 80026be:	717b      	strb	r3, [r7, #5]
 80026c0:	e01f      	b.n	8002702 <XO_u8CheckGameState+0xd2>
            if (G_u8GameBoard[0][i] != EMPTY && G_u8GameBoard[0][i] == G_u8GameBoard[1][i] && G_u8GameBoard[1][i] == G_u8GameBoard[2][i]) {
 80026c2:	797b      	ldrb	r3, [r7, #5]
 80026c4:	4a3d      	ldr	r2, [pc, #244]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d017      	beq.n	80026fc <XO_u8CheckGameState+0xcc>
 80026cc:	797b      	ldrb	r3, [r7, #5]
 80026ce:	4a3b      	ldr	r2, [pc, #236]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026d0:	5cd2      	ldrb	r2, [r2, r3]
 80026d2:	797b      	ldrb	r3, [r7, #5]
 80026d4:	4939      	ldr	r1, [pc, #228]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026d6:	440b      	add	r3, r1
 80026d8:	78db      	ldrb	r3, [r3, #3]
 80026da:	429a      	cmp	r2, r3
 80026dc:	d10e      	bne.n	80026fc <XO_u8CheckGameState+0xcc>
 80026de:	797b      	ldrb	r3, [r7, #5]
 80026e0:	4a36      	ldr	r2, [pc, #216]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026e2:	4413      	add	r3, r2
 80026e4:	78da      	ldrb	r2, [r3, #3]
 80026e6:	797b      	ldrb	r3, [r7, #5]
 80026e8:	4934      	ldr	r1, [pc, #208]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026ea:	440b      	add	r3, r1
 80026ec:	799b      	ldrb	r3, [r3, #6]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d104      	bne.n	80026fc <XO_u8CheckGameState+0xcc>
                winner = G_u8GameBoard[0][i];
 80026f2:	797b      	ldrb	r3, [r7, #5]
 80026f4:	4a31      	ldr	r2, [pc, #196]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	71fb      	strb	r3, [r7, #7]
                break;
 80026fa:	e005      	b.n	8002708 <XO_u8CheckGameState+0xd8>
        for (u8 i = 0; i < 3; i++) {
 80026fc:	797b      	ldrb	r3, [r7, #5]
 80026fe:	3301      	adds	r3, #1
 8002700:	717b      	strb	r3, [r7, #5]
 8002702:	797b      	ldrb	r3, [r7, #5]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d9dc      	bls.n	80026c2 <XO_u8CheckGameState+0x92>
            }
        }
    }

    // التحقق من الأقطار بحثًا عن فوز، إذا لم يكن هناك فائز بعد
    if (winner == EMPTY) {
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d126      	bne.n	800275c <XO_u8CheckGameState+0x12c>
        if (G_u8GameBoard[0][0] != EMPTY && G_u8GameBoard[0][0] == G_u8GameBoard[1][1] && G_u8GameBoard[1][1] == G_u8GameBoard[2][2]) {
 800270e:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00f      	beq.n	8002736 <XO_u8CheckGameState+0x106>
 8002716:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002718:	781a      	ldrb	r2, [r3, #0]
 800271a:	4b28      	ldr	r3, [pc, #160]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 800271c:	791b      	ldrb	r3, [r3, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	d109      	bne.n	8002736 <XO_u8CheckGameState+0x106>
 8002722:	4b26      	ldr	r3, [pc, #152]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002724:	791a      	ldrb	r2, [r3, #4]
 8002726:	4b25      	ldr	r3, [pc, #148]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002728:	7a1b      	ldrb	r3, [r3, #8]
 800272a:	429a      	cmp	r2, r3
 800272c:	d103      	bne.n	8002736 <XO_u8CheckGameState+0x106>
            winner = G_u8GameBoard[1][1];
 800272e:	4b23      	ldr	r3, [pc, #140]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002730:	791b      	ldrb	r3, [r3, #4]
 8002732:	71fb      	strb	r3, [r7, #7]
 8002734:	e012      	b.n	800275c <XO_u8CheckGameState+0x12c>
        } else if (G_u8GameBoard[0][2] != EMPTY && G_u8GameBoard[0][2] == G_u8GameBoard[1][1] && G_u8GameBoard[1][1] == G_u8GameBoard[2][0]) {
 8002736:	4b21      	ldr	r3, [pc, #132]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002738:	789b      	ldrb	r3, [r3, #2]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00e      	beq.n	800275c <XO_u8CheckGameState+0x12c>
 800273e:	4b1f      	ldr	r3, [pc, #124]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002740:	789a      	ldrb	r2, [r3, #2]
 8002742:	4b1e      	ldr	r3, [pc, #120]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002744:	791b      	ldrb	r3, [r3, #4]
 8002746:	429a      	cmp	r2, r3
 8002748:	d108      	bne.n	800275c <XO_u8CheckGameState+0x12c>
 800274a:	4b1c      	ldr	r3, [pc, #112]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 800274c:	791a      	ldrb	r2, [r3, #4]
 800274e:	4b1b      	ldr	r3, [pc, #108]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002750:	799b      	ldrb	r3, [r3, #6]
 8002752:	429a      	cmp	r2, r3
 8002754:	d102      	bne.n	800275c <XO_u8CheckGameState+0x12c>
            winner = G_u8GameBoard[1][1];
 8002756:	4b19      	ldr	r3, [pc, #100]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002758:	791b      	ldrb	r3, [r3, #4]
 800275a:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (winner == PLAYER_X) return GAME_WIN_X;
 800275c:	79fb      	ldrb	r3, [r7, #7]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d101      	bne.n	8002766 <XO_u8CheckGameState+0x136>
 8002762:	2301      	movs	r3, #1
 8002764:	e024      	b.n	80027b0 <XO_u8CheckGameState+0x180>
    if (winner == PLAYER_O) return GAME_WIN_O;
 8002766:	79fb      	ldrb	r3, [r7, #7]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d101      	bne.n	8002770 <XO_u8CheckGameState+0x140>
 800276c:	2302      	movs	r3, #2
 800276e:	e01f      	b.n	80027b0 <XO_u8CheckGameState+0x180>

    // التحقق من التعادل (إذا لم يكن هناك فائز واللوحة ممتلئة)
    for (u8 r = 0; r < 3; r++) {
 8002770:	2300      	movs	r3, #0
 8002772:	713b      	strb	r3, [r7, #4]
 8002774:	e018      	b.n	80027a8 <XO_u8CheckGameState+0x178>
        for (u8 c = 0; c < 3; c++) {
 8002776:	2300      	movs	r3, #0
 8002778:	70fb      	strb	r3, [r7, #3]
 800277a:	e00f      	b.n	800279c <XO_u8CheckGameState+0x16c>
            if (G_u8GameBoard[r][c] == EMPTY) {
 800277c:	793a      	ldrb	r2, [r7, #4]
 800277e:	78f9      	ldrb	r1, [r7, #3]
 8002780:	480e      	ldr	r0, [pc, #56]	@ (80027bc <XO_u8CheckGameState+0x18c>)
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	4403      	add	r3, r0
 800278a:	440b      	add	r3, r1
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <XO_u8CheckGameState+0x166>
                return GAME_ONGOING; // اللعبة لم تنته بعد.
 8002792:	2300      	movs	r3, #0
 8002794:	e00c      	b.n	80027b0 <XO_u8CheckGameState+0x180>
        for (u8 c = 0; c < 3; c++) {
 8002796:	78fb      	ldrb	r3, [r7, #3]
 8002798:	3301      	adds	r3, #1
 800279a:	70fb      	strb	r3, [r7, #3]
 800279c:	78fb      	ldrb	r3, [r7, #3]
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d9ec      	bls.n	800277c <XO_u8CheckGameState+0x14c>
    for (u8 r = 0; r < 3; r++) {
 80027a2:	793b      	ldrb	r3, [r7, #4]
 80027a4:	3301      	adds	r3, #1
 80027a6:	713b      	strb	r3, [r7, #4]
 80027a8:	793b      	ldrb	r3, [r7, #4]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d9e3      	bls.n	8002776 <XO_u8CheckGameState+0x146>
            }
        }
    }

    return GAME_DRAW; // إنها حالة تعادل.
 80027ae:	2303      	movs	r3, #3
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	200001f4 	.word	0x200001f4

080027c0 <XO_voidIncrementWinCount>:

/************************************************/
/* تنفيذ دوال عداد الفوز                  */
/************************************************/

void XO_voidIncrementWinCount(u8 Copy_u8Player) {
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	4603      	mov	r3, r0
 80027c8:	71fb      	strb	r3, [r7, #7]
    if (Copy_u8Player == PLAYER_X) {
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d106      	bne.n	80027de <XO_voidIncrementWinCount+0x1e>
        G_u8PlayerX_Wins++;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	@ (80027fc <XO_voidIncrementWinCount+0x3c>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	3301      	adds	r3, #1
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <XO_voidIncrementWinCount+0x3c>)
 80027da:	701a      	strb	r2, [r3, #0]
    } else if (Copy_u8Player == PLAYER_O) {
        G_u8PlayerO_Wins++;
    }
}
 80027dc:	e008      	b.n	80027f0 <XO_voidIncrementWinCount+0x30>
    } else if (Copy_u8Player == PLAYER_O) {
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d105      	bne.n	80027f0 <XO_voidIncrementWinCount+0x30>
        G_u8PlayerO_Wins++;
 80027e4:	4b06      	ldr	r3, [pc, #24]	@ (8002800 <XO_voidIncrementWinCount+0x40>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	3301      	adds	r3, #1
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <XO_voidIncrementWinCount+0x40>)
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	370c      	adds	r7, #12
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	200001fe 	.word	0x200001fe
 8002800:	200001ff 	.word	0x200001ff

08002804 <XO_u8GetWinCount>:

u8 XO_u8GetWinCount(u8 Copy_u8Player) {
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
    if (Copy_u8Player == PLAYER_X) {
 800280e:	79fb      	ldrb	r3, [r7, #7]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d102      	bne.n	800281a <XO_u8GetWinCount+0x16>
        return G_u8PlayerX_Wins;
 8002814:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <XO_u8GetWinCount+0x30>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	e006      	b.n	8002828 <XO_u8GetWinCount+0x24>
    } else if (Copy_u8Player == PLAYER_O) {
 800281a:	79fb      	ldrb	r3, [r7, #7]
 800281c:	2b02      	cmp	r3, #2
 800281e:	d102      	bne.n	8002826 <XO_u8GetWinCount+0x22>
        return G_u8PlayerO_Wins;
 8002820:	4b05      	ldr	r3, [pc, #20]	@ (8002838 <XO_u8GetWinCount+0x34>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	e000      	b.n	8002828 <XO_u8GetWinCount+0x24>
    }
    return 0;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr
 8002834:	200001fe 	.word	0x200001fe
 8002838:	200001ff 	.word	0x200001ff

0800283c <XO_voidResetWinCounters>:

void XO_voidResetWinCounters(void) {
 800283c:	b480      	push	{r7}
 800283e:	af00      	add	r7, sp, #0
    G_u8PlayerX_Wins = 0;
 8002840:	4b05      	ldr	r3, [pc, #20]	@ (8002858 <XO_voidResetWinCounters+0x1c>)
 8002842:	2200      	movs	r2, #0
 8002844:	701a      	strb	r2, [r3, #0]
    G_u8PlayerO_Wins = 0;
 8002846:	4b05      	ldr	r3, [pc, #20]	@ (800285c <XO_voidResetWinCounters+0x20>)
 8002848:	2200      	movs	r2, #0
 800284a:	701a      	strb	r2, [r3, #0]
}
 800284c:	bf00      	nop
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	200001fe 	.word	0x200001fe
 800285c:	200001ff 	.word	0x200001ff

08002860 <XO_u8GetCellState>:


u8 XO_u8GetCellState(u8 Copy_u8Row, u8 Copy_u8Col) {
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	460a      	mov	r2, r1
 800286a:	71fb      	strb	r3, [r7, #7]
 800286c:	4613      	mov	r3, r2
 800286e:	71bb      	strb	r3, [r7, #6]
    if (Copy_u8Row < 3 && Copy_u8Col < 3) {
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d80c      	bhi.n	8002890 <XO_u8GetCellState+0x30>
 8002876:	79bb      	ldrb	r3, [r7, #6]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d809      	bhi.n	8002890 <XO_u8GetCellState+0x30>
        return G_u8GameBoard[Copy_u8Row][Copy_u8Col];
 800287c:	79fa      	ldrb	r2, [r7, #7]
 800287e:	79b9      	ldrb	r1, [r7, #6]
 8002880:	4807      	ldr	r0, [pc, #28]	@ (80028a0 <XO_u8GetCellState+0x40>)
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	4403      	add	r3, r0
 800288a:	440b      	add	r3, r1
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	e000      	b.n	8002892 <XO_u8GetCellState+0x32>
    }
    return EMPTY; // كإجراء وقائي
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200001f4 	.word	0x200001f4

080028a4 <main>:
#define BUTTON2_PIN        PIN7
#define BUTTON3_PORT       PORTB
#define BUTTON3_PIN        PIN8

int main(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
	/* 1. System Clocks Configuration */
	MRCC_voidInit();
 80028a8:	f7fe fafc 	bl	8000ea4 <MRCC_voidInit>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, AHB1_GPIOA);
 80028ac:	2100      	movs	r1, #0
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe fb1a 	bl	8000ee8 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, AHB1_GPIOB);
 80028b4:	2101      	movs	r1, #1
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7fe fb16 	bl	8000ee8 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2_BUS, APB2_SPI1);
 80028bc:	210c      	movs	r1, #12
 80028be:	2003      	movs	r0, #3
 80028c0:	f7fe fb12 	bl	8000ee8 <MRCC_voidEnablePeripheralClock>

	/* 2. SysTick Initialization */
	MSTK_voidInit();
 80028c4:	f7fe fba6 	bl	8001014 <MSTK_voidInit>

	/* 3. GPIO Pins Initialization */
	// SPI Pins for TFT
	MGPIO_voidSetMode(PORTA, PIN5, Alternative_Func); // SCK
 80028c8:	2202      	movs	r2, #2
 80028ca:	2105      	movs	r1, #5
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7fe f8c7 	bl	8000a60 <MGPIO_voidSetMode>
	MGPIO_voidSetAlternativeConfig(PORTA, PIN5, AF5);
 80028d2:	2205      	movs	r2, #5
 80028d4:	2105      	movs	r1, #5
 80028d6:	2000      	movs	r0, #0
 80028d8:	f7fe fa66 	bl	8000da8 <MGPIO_voidSetAlternativeConfig>
	MGPIO_voidSetMode(PORTA, PIN7, Alternative_Func); // MOSI
 80028dc:	2202      	movs	r2, #2
 80028de:	2107      	movs	r1, #7
 80028e0:	2000      	movs	r0, #0
 80028e2:	f7fe f8bd 	bl	8000a60 <MGPIO_voidSetMode>
	MGPIO_voidSetAlternativeConfig(PORTA, PIN7, AF5);
 80028e6:	2205      	movs	r2, #5
 80028e8:	2107      	movs	r1, #7
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe fa5c 	bl	8000da8 <MGPIO_voidSetAlternativeConfig>

    // Button Pins (PB6, PB7, PB8)
    MGPIO_voidSetMode(BUTTON1_PORT, BUTTON1_PIN, INPUT);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2106      	movs	r1, #6
 80028f4:	2001      	movs	r0, #1
 80028f6:	f7fe f8b3 	bl	8000a60 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(BUTTON1_PORT, BUTTON1_PIN, PULLDOWN);
 80028fa:	2202      	movs	r2, #2
 80028fc:	2106      	movs	r1, #6
 80028fe:	2001      	movs	r0, #1
 8002900:	f7fe f9c6 	bl	8000c90 <MGPIO_voidSetInputConfig>

    MGPIO_voidSetMode(BUTTON2_PORT, BUTTON2_PIN, INPUT);
 8002904:	2200      	movs	r2, #0
 8002906:	2107      	movs	r1, #7
 8002908:	2001      	movs	r0, #1
 800290a:	f7fe f8a9 	bl	8000a60 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(BUTTON2_PORT, BUTTON2_PIN, PULLDOWN);
 800290e:	2202      	movs	r2, #2
 8002910:	2107      	movs	r1, #7
 8002912:	2001      	movs	r0, #1
 8002914:	f7fe f9bc 	bl	8000c90 <MGPIO_voidSetInputConfig>

    MGPIO_voidSetMode(BUTTON3_PORT, BUTTON3_PIN, INPUT);
 8002918:	2200      	movs	r2, #0
 800291a:	2108      	movs	r1, #8
 800291c:	2001      	movs	r0, #1
 800291e:	f7fe f89f 	bl	8000a60 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(BUTTON3_PORT, BUTTON3_PIN, PULLDOWN);
 8002922:	2202      	movs	r2, #2
 8002924:	2108      	movs	r1, #8
 8002926:	2001      	movs	r0, #1
 8002928:	f7fe f9b2 	bl	8000c90 <MGPIO_voidSetInputConfig>

	/* 4. Peripherals Initialization (SPI & TFT) */
	MSPI_voidMasterInit();
 800292c:	f7fe fb28 	bl	8000f80 <MSPI_voidMasterInit>
	HTFT_voidInit();
 8002930:	f7fd ff96 	bl	8000860 <HTFT_voidInit>

    /* 5. Run the Main Game Menu */
	GUI_Main_voidRun();
 8002934:	f7fd fcac 	bl	8000290 <GUI_Main_voidRun>

    // The program should never reach here as GUI_Main_voidRun() is an infinite loop.
    while(1)
 8002938:	bf00      	nop
 800293a:	e7fd      	b.n	8002938 <main+0x94>

0800293c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002940:	bf00      	nop
 8002942:	e7fd      	b.n	8002940 <NMI_Handler+0x4>

08002944 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002944:	b480      	push	{r7}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <HardFault_Handler+0x4>

0800294c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002950:	bf00      	nop
 8002952:	e7fd      	b.n	8002950 <MemManage_Handler+0x4>

08002954 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <BusFault_Handler+0x4>

0800295c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002960:	bf00      	nop
 8002962:	e7fd      	b.n	8002960 <UsageFault_Handler+0x4>

08002964 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	MSTK_voidIncrementTicks(); // استدعاء دالة زيادة العداد
 8002992:	f7fe fbd1 	bl	8001138 <MSTK_voidIncrementTicks>
  /* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8002996:	f000 f905 	bl	8002ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	bd80      	pop	{r7, pc}

0800299e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  return 1;
 80029a2:	2301      	movs	r3, #1
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_kill>:

int _kill(int pid, int sig)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b082      	sub	sp, #8
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029b8:	f000 fabc 	bl	8002f34 <__errno>
 80029bc:	4603      	mov	r3, r0
 80029be:	2216      	movs	r2, #22
 80029c0:	601a      	str	r2, [r3, #0]
  return -1;
 80029c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <_exit>:

void _exit (int status)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029d6:	f04f 31ff 	mov.w	r1, #4294967295
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff ffe7 	bl	80029ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80029e0:	bf00      	nop
 80029e2:	e7fd      	b.n	80029e0 <_exit+0x12>

080029e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]
 80029f4:	e00a      	b.n	8002a0c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029f6:	f3af 8000 	nop.w
 80029fa:	4601      	mov	r1, r0
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	60ba      	str	r2, [r7, #8]
 8002a02:	b2ca      	uxtb	r2, r1
 8002a04:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3301      	adds	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	dbf0      	blt.n	80029f6 <_read+0x12>
  }

  return len;
 8002a14:	687b      	ldr	r3, [r7, #4]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b086      	sub	sp, #24
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	60f8      	str	r0, [r7, #12]
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	617b      	str	r3, [r7, #20]
 8002a2e:	e009      	b.n	8002a44 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	60ba      	str	r2, [r7, #8]
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	3301      	adds	r3, #1
 8002a42:	617b      	str	r3, [r7, #20]
 8002a44:	697a      	ldr	r2, [r7, #20]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	dbf1      	blt.n	8002a30 <_write+0x12>
  }
  return len;
 8002a4c:	687b      	ldr	r3, [r7, #4]
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <_close>:

int _close(int file)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b083      	sub	sp, #12
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
 8002a76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002a7e:	605a      	str	r2, [r3, #4]
  return 0;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <_isatty>:

int _isatty(int file)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a96:	2301      	movs	r3, #1
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b085      	sub	sp, #20
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3714      	adds	r7, #20
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
	...

08002ac0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ac8:	4a14      	ldr	r2, [pc, #80]	@ (8002b1c <_sbrk+0x5c>)
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <_sbrk+0x60>)
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ad4:	4b13      	ldr	r3, [pc, #76]	@ (8002b24 <_sbrk+0x64>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d102      	bne.n	8002ae2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002adc:	4b11      	ldr	r3, [pc, #68]	@ (8002b24 <_sbrk+0x64>)
 8002ade:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <_sbrk+0x68>)
 8002ae0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ae2:	4b10      	ldr	r3, [pc, #64]	@ (8002b24 <_sbrk+0x64>)
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4413      	add	r3, r2
 8002aea:	693a      	ldr	r2, [r7, #16]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d207      	bcs.n	8002b00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002af0:	f000 fa20 	bl	8002f34 <__errno>
 8002af4:	4603      	mov	r3, r0
 8002af6:	220c      	movs	r2, #12
 8002af8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002afa:	f04f 33ff 	mov.w	r3, #4294967295
 8002afe:	e009      	b.n	8002b14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b00:	4b08      	ldr	r3, [pc, #32]	@ (8002b24 <_sbrk+0x64>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b06:	4b07      	ldr	r3, [pc, #28]	@ (8002b24 <_sbrk+0x64>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	4a05      	ldr	r2, [pc, #20]	@ (8002b24 <_sbrk+0x64>)
 8002b10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	20010000 	.word	0x20010000
 8002b20:	00000400 	.word	0x00000400
 8002b24:	20000200 	.word	0x20000200
 8002b28:	20000358 	.word	0x20000358

08002b2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b30:	4b06      	ldr	r3, [pc, #24]	@ (8002b4c <SystemInit+0x20>)
 8002b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b36:	4a05      	ldr	r2, [pc, #20]	@ (8002b4c <SystemInit+0x20>)
 8002b38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002b3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b40:	bf00      	nop
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002b88 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002b54:	f7ff ffea 	bl	8002b2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b58:	480c      	ldr	r0, [pc, #48]	@ (8002b8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b5a:	490d      	ldr	r1, [pc, #52]	@ (8002b90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b60:	e002      	b.n	8002b68 <LoopCopyDataInit>

08002b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b66:	3304      	adds	r3, #4

08002b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b6c:	d3f9      	bcc.n	8002b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b70:	4c0a      	ldr	r4, [pc, #40]	@ (8002b9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b74:	e001      	b.n	8002b7a <LoopFillZerobss>

08002b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b78:	3204      	adds	r2, #4

08002b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b7c:	d3fb      	bcc.n	8002b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b7e:	f000 f9df 	bl	8002f40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b82:	f7ff fe8f 	bl	80028a4 <main>
  bx  lr    
 8002b86:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b88:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b90:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002b94:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 8002b98:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002b9c:	20000354 	.word	0x20000354

08002ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ba0:	e7fe      	b.n	8002ba0 <ADC_IRQHandler>
	...

08002ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_IncTick+0x20>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_IncTick+0x24>)
 8002bb6:	6013      	str	r3, [r2, #0]
}
 8002bb8:	bf00      	nop
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
 8002bc4:	20000014 	.word	0x20000014
 8002bc8:	20000204 	.word	0x20000204

08002bcc <rand>:
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <rand+0x5c>)
 8002bce:	b510      	push	{r4, lr}
 8002bd0:	681c      	ldr	r4, [r3, #0]
 8002bd2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002bd4:	b9b3      	cbnz	r3, 8002c04 <rand+0x38>
 8002bd6:	2018      	movs	r0, #24
 8002bd8:	f000 fa42 	bl	8003060 <malloc>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6320      	str	r0, [r4, #48]	@ 0x30
 8002be0:	b920      	cbnz	r0, 8002bec <rand+0x20>
 8002be2:	4b12      	ldr	r3, [pc, #72]	@ (8002c2c <rand+0x60>)
 8002be4:	4812      	ldr	r0, [pc, #72]	@ (8002c30 <rand+0x64>)
 8002be6:	2152      	movs	r1, #82	@ 0x52
 8002be8:	f000 f9d2 	bl	8002f90 <__assert_func>
 8002bec:	4911      	ldr	r1, [pc, #68]	@ (8002c34 <rand+0x68>)
 8002bee:	4b12      	ldr	r3, [pc, #72]	@ (8002c38 <rand+0x6c>)
 8002bf0:	e9c0 1300 	strd	r1, r3, [r0]
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <rand+0x70>)
 8002bf6:	6083      	str	r3, [r0, #8]
 8002bf8:	230b      	movs	r3, #11
 8002bfa:	8183      	strh	r3, [r0, #12]
 8002bfc:	2100      	movs	r1, #0
 8002bfe:	2001      	movs	r0, #1
 8002c00:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002c04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002c06:	480e      	ldr	r0, [pc, #56]	@ (8002c40 <rand+0x74>)
 8002c08:	690b      	ldr	r3, [r1, #16]
 8002c0a:	694c      	ldr	r4, [r1, #20]
 8002c0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c44 <rand+0x78>)
 8002c0e:	4358      	muls	r0, r3
 8002c10:	fb02 0004 	mla	r0, r2, r4, r0
 8002c14:	fba3 3202 	umull	r3, r2, r3, r2
 8002c18:	3301      	adds	r3, #1
 8002c1a:	eb40 0002 	adc.w	r0, r0, r2
 8002c1e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002c22:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8002c26:	bd10      	pop	{r4, pc}
 8002c28:	20000024 	.word	0x20000024
 8002c2c:	08004407 	.word	0x08004407
 8002c30:	0800441e 	.word	0x0800441e
 8002c34:	abcd330e 	.word	0xabcd330e
 8002c38:	e66d1234 	.word	0xe66d1234
 8002c3c:	0005deec 	.word	0x0005deec
 8002c40:	5851f42d 	.word	0x5851f42d
 8002c44:	4c957f2d 	.word	0x4c957f2d

08002c48 <std>:
 8002c48:	2300      	movs	r3, #0
 8002c4a:	b510      	push	{r4, lr}
 8002c4c:	4604      	mov	r4, r0
 8002c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8002c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c56:	6083      	str	r3, [r0, #8]
 8002c58:	8181      	strh	r1, [r0, #12]
 8002c5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c5c:	81c2      	strh	r2, [r0, #14]
 8002c5e:	6183      	str	r3, [r0, #24]
 8002c60:	4619      	mov	r1, r3
 8002c62:	2208      	movs	r2, #8
 8002c64:	305c      	adds	r0, #92	@ 0x5c
 8002c66:	f000 f916 	bl	8002e96 <memset>
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <std+0x58>)
 8002c6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <std+0x5c>)
 8002c70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <std+0x60>)
 8002c74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <std+0x64>)
 8002c78:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002cb0 <std+0x68>)
 8002c7c:	6224      	str	r4, [r4, #32]
 8002c7e:	429c      	cmp	r4, r3
 8002c80:	d006      	beq.n	8002c90 <std+0x48>
 8002c82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c86:	4294      	cmp	r4, r2
 8002c88:	d002      	beq.n	8002c90 <std+0x48>
 8002c8a:	33d0      	adds	r3, #208	@ 0xd0
 8002c8c:	429c      	cmp	r4, r3
 8002c8e:	d105      	bne.n	8002c9c <std+0x54>
 8002c90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c98:	f000 b976 	b.w	8002f88 <__retarget_lock_init_recursive>
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08002e11 	.word	0x08002e11
 8002ca4:	08002e33 	.word	0x08002e33
 8002ca8:	08002e6b 	.word	0x08002e6b
 8002cac:	08002e8f 	.word	0x08002e8f
 8002cb0:	20000208 	.word	0x20000208

08002cb4 <stdio_exit_handler>:
 8002cb4:	4a02      	ldr	r2, [pc, #8]	@ (8002cc0 <stdio_exit_handler+0xc>)
 8002cb6:	4903      	ldr	r1, [pc, #12]	@ (8002cc4 <stdio_exit_handler+0x10>)
 8002cb8:	4803      	ldr	r0, [pc, #12]	@ (8002cc8 <stdio_exit_handler+0x14>)
 8002cba:	f000 b869 	b.w	8002d90 <_fwalk_sglue>
 8002cbe:	bf00      	nop
 8002cc0:	20000018 	.word	0x20000018
 8002cc4:	0800389d 	.word	0x0800389d
 8002cc8:	20000028 	.word	0x20000028

08002ccc <cleanup_stdio>:
 8002ccc:	6841      	ldr	r1, [r0, #4]
 8002cce:	4b0c      	ldr	r3, [pc, #48]	@ (8002d00 <cleanup_stdio+0x34>)
 8002cd0:	4299      	cmp	r1, r3
 8002cd2:	b510      	push	{r4, lr}
 8002cd4:	4604      	mov	r4, r0
 8002cd6:	d001      	beq.n	8002cdc <cleanup_stdio+0x10>
 8002cd8:	f000 fde0 	bl	800389c <_fflush_r>
 8002cdc:	68a1      	ldr	r1, [r4, #8]
 8002cde:	4b09      	ldr	r3, [pc, #36]	@ (8002d04 <cleanup_stdio+0x38>)
 8002ce0:	4299      	cmp	r1, r3
 8002ce2:	d002      	beq.n	8002cea <cleanup_stdio+0x1e>
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f000 fdd9 	bl	800389c <_fflush_r>
 8002cea:	68e1      	ldr	r1, [r4, #12]
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <cleanup_stdio+0x3c>)
 8002cee:	4299      	cmp	r1, r3
 8002cf0:	d004      	beq.n	8002cfc <cleanup_stdio+0x30>
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf8:	f000 bdd0 	b.w	800389c <_fflush_r>
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000208 	.word	0x20000208
 8002d04:	20000270 	.word	0x20000270
 8002d08:	200002d8 	.word	0x200002d8

08002d0c <global_stdio_init.part.0>:
 8002d0c:	b510      	push	{r4, lr}
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <global_stdio_init.part.0+0x30>)
 8002d10:	4c0b      	ldr	r4, [pc, #44]	@ (8002d40 <global_stdio_init.part.0+0x34>)
 8002d12:	4a0c      	ldr	r2, [pc, #48]	@ (8002d44 <global_stdio_init.part.0+0x38>)
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	4620      	mov	r0, r4
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2104      	movs	r1, #4
 8002d1c:	f7ff ff94 	bl	8002c48 <std>
 8002d20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d24:	2201      	movs	r2, #1
 8002d26:	2109      	movs	r1, #9
 8002d28:	f7ff ff8e 	bl	8002c48 <std>
 8002d2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d30:	2202      	movs	r2, #2
 8002d32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d36:	2112      	movs	r1, #18
 8002d38:	f7ff bf86 	b.w	8002c48 <std>
 8002d3c:	20000340 	.word	0x20000340
 8002d40:	20000208 	.word	0x20000208
 8002d44:	08002cb5 	.word	0x08002cb5

08002d48 <__sfp_lock_acquire>:
 8002d48:	4801      	ldr	r0, [pc, #4]	@ (8002d50 <__sfp_lock_acquire+0x8>)
 8002d4a:	f000 b91e 	b.w	8002f8a <__retarget_lock_acquire_recursive>
 8002d4e:	bf00      	nop
 8002d50:	20000349 	.word	0x20000349

08002d54 <__sfp_lock_release>:
 8002d54:	4801      	ldr	r0, [pc, #4]	@ (8002d5c <__sfp_lock_release+0x8>)
 8002d56:	f000 b919 	b.w	8002f8c <__retarget_lock_release_recursive>
 8002d5a:	bf00      	nop
 8002d5c:	20000349 	.word	0x20000349

08002d60 <__sinit>:
 8002d60:	b510      	push	{r4, lr}
 8002d62:	4604      	mov	r4, r0
 8002d64:	f7ff fff0 	bl	8002d48 <__sfp_lock_acquire>
 8002d68:	6a23      	ldr	r3, [r4, #32]
 8002d6a:	b11b      	cbz	r3, 8002d74 <__sinit+0x14>
 8002d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d70:	f7ff bff0 	b.w	8002d54 <__sfp_lock_release>
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <__sinit+0x28>)
 8002d76:	6223      	str	r3, [r4, #32]
 8002d78:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <__sinit+0x2c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f5      	bne.n	8002d6c <__sinit+0xc>
 8002d80:	f7ff ffc4 	bl	8002d0c <global_stdio_init.part.0>
 8002d84:	e7f2      	b.n	8002d6c <__sinit+0xc>
 8002d86:	bf00      	nop
 8002d88:	08002ccd 	.word	0x08002ccd
 8002d8c:	20000340 	.word	0x20000340

08002d90 <_fwalk_sglue>:
 8002d90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d94:	4607      	mov	r7, r0
 8002d96:	4688      	mov	r8, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	2600      	movs	r6, #0
 8002d9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002da0:	f1b9 0901 	subs.w	r9, r9, #1
 8002da4:	d505      	bpl.n	8002db2 <_fwalk_sglue+0x22>
 8002da6:	6824      	ldr	r4, [r4, #0]
 8002da8:	2c00      	cmp	r4, #0
 8002daa:	d1f7      	bne.n	8002d9c <_fwalk_sglue+0xc>
 8002dac:	4630      	mov	r0, r6
 8002dae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002db2:	89ab      	ldrh	r3, [r5, #12]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d907      	bls.n	8002dc8 <_fwalk_sglue+0x38>
 8002db8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	d003      	beq.n	8002dc8 <_fwalk_sglue+0x38>
 8002dc0:	4629      	mov	r1, r5
 8002dc2:	4638      	mov	r0, r7
 8002dc4:	47c0      	blx	r8
 8002dc6:	4306      	orrs	r6, r0
 8002dc8:	3568      	adds	r5, #104	@ 0x68
 8002dca:	e7e9      	b.n	8002da0 <_fwalk_sglue+0x10>

08002dcc <siprintf>:
 8002dcc:	b40e      	push	{r1, r2, r3}
 8002dce:	b510      	push	{r4, lr}
 8002dd0:	b09d      	sub	sp, #116	@ 0x74
 8002dd2:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002dd4:	9002      	str	r0, [sp, #8]
 8002dd6:	9006      	str	r0, [sp, #24]
 8002dd8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002ddc:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <siprintf+0x3c>)
 8002dde:	9107      	str	r1, [sp, #28]
 8002de0:	9104      	str	r1, [sp, #16]
 8002de2:	490a      	ldr	r1, [pc, #40]	@ (8002e0c <siprintf+0x40>)
 8002de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8002de8:	9105      	str	r1, [sp, #20]
 8002dea:	2400      	movs	r4, #0
 8002dec:	a902      	add	r1, sp, #8
 8002dee:	6800      	ldr	r0, [r0, #0]
 8002df0:	9301      	str	r3, [sp, #4]
 8002df2:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002df4:	f000 fa46 	bl	8003284 <_svfiprintf_r>
 8002df8:	9b02      	ldr	r3, [sp, #8]
 8002dfa:	701c      	strb	r4, [r3, #0]
 8002dfc:	b01d      	add	sp, #116	@ 0x74
 8002dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e02:	b003      	add	sp, #12
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000024 	.word	0x20000024
 8002e0c:	ffff0208 	.word	0xffff0208

08002e10 <__sread>:
 8002e10:	b510      	push	{r4, lr}
 8002e12:	460c      	mov	r4, r1
 8002e14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e18:	f000 f868 	bl	8002eec <_read_r>
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	bfab      	itete	ge
 8002e20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002e22:	89a3      	ldrhlt	r3, [r4, #12]
 8002e24:	181b      	addge	r3, r3, r0
 8002e26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002e2a:	bfac      	ite	ge
 8002e2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002e2e:	81a3      	strhlt	r3, [r4, #12]
 8002e30:	bd10      	pop	{r4, pc}

08002e32 <__swrite>:
 8002e32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e36:	461f      	mov	r7, r3
 8002e38:	898b      	ldrh	r3, [r1, #12]
 8002e3a:	05db      	lsls	r3, r3, #23
 8002e3c:	4605      	mov	r5, r0
 8002e3e:	460c      	mov	r4, r1
 8002e40:	4616      	mov	r6, r2
 8002e42:	d505      	bpl.n	8002e50 <__swrite+0x1e>
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	2302      	movs	r3, #2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f000 f83c 	bl	8002ec8 <_lseek_r>
 8002e50:	89a3      	ldrh	r3, [r4, #12]
 8002e52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e5a:	81a3      	strh	r3, [r4, #12]
 8002e5c:	4632      	mov	r2, r6
 8002e5e:	463b      	mov	r3, r7
 8002e60:	4628      	mov	r0, r5
 8002e62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e66:	f000 b853 	b.w	8002f10 <_write_r>

08002e6a <__sseek>:
 8002e6a:	b510      	push	{r4, lr}
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e72:	f000 f829 	bl	8002ec8 <_lseek_r>
 8002e76:	1c43      	adds	r3, r0, #1
 8002e78:	89a3      	ldrh	r3, [r4, #12]
 8002e7a:	bf15      	itete	ne
 8002e7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002e7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002e82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002e86:	81a3      	strheq	r3, [r4, #12]
 8002e88:	bf18      	it	ne
 8002e8a:	81a3      	strhne	r3, [r4, #12]
 8002e8c:	bd10      	pop	{r4, pc}

08002e8e <__sclose>:
 8002e8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e92:	f000 b809 	b.w	8002ea8 <_close_r>

08002e96 <memset>:
 8002e96:	4402      	add	r2, r0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d100      	bne.n	8002ea0 <memset+0xa>
 8002e9e:	4770      	bx	lr
 8002ea0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea4:	e7f9      	b.n	8002e9a <memset+0x4>
	...

08002ea8 <_close_r>:
 8002ea8:	b538      	push	{r3, r4, r5, lr}
 8002eaa:	4d06      	ldr	r5, [pc, #24]	@ (8002ec4 <_close_r+0x1c>)
 8002eac:	2300      	movs	r3, #0
 8002eae:	4604      	mov	r4, r0
 8002eb0:	4608      	mov	r0, r1
 8002eb2:	602b      	str	r3, [r5, #0]
 8002eb4:	f7ff fdcf 	bl	8002a56 <_close>
 8002eb8:	1c43      	adds	r3, r0, #1
 8002eba:	d102      	bne.n	8002ec2 <_close_r+0x1a>
 8002ebc:	682b      	ldr	r3, [r5, #0]
 8002ebe:	b103      	cbz	r3, 8002ec2 <_close_r+0x1a>
 8002ec0:	6023      	str	r3, [r4, #0]
 8002ec2:	bd38      	pop	{r3, r4, r5, pc}
 8002ec4:	20000344 	.word	0x20000344

08002ec8 <_lseek_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4d07      	ldr	r5, [pc, #28]	@ (8002ee8 <_lseek_r+0x20>)
 8002ecc:	4604      	mov	r4, r0
 8002ece:	4608      	mov	r0, r1
 8002ed0:	4611      	mov	r1, r2
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	602a      	str	r2, [r5, #0]
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	f7ff fde4 	bl	8002aa4 <_lseek>
 8002edc:	1c43      	adds	r3, r0, #1
 8002ede:	d102      	bne.n	8002ee6 <_lseek_r+0x1e>
 8002ee0:	682b      	ldr	r3, [r5, #0]
 8002ee2:	b103      	cbz	r3, 8002ee6 <_lseek_r+0x1e>
 8002ee4:	6023      	str	r3, [r4, #0]
 8002ee6:	bd38      	pop	{r3, r4, r5, pc}
 8002ee8:	20000344 	.word	0x20000344

08002eec <_read_r>:
 8002eec:	b538      	push	{r3, r4, r5, lr}
 8002eee:	4d07      	ldr	r5, [pc, #28]	@ (8002f0c <_read_r+0x20>)
 8002ef0:	4604      	mov	r4, r0
 8002ef2:	4608      	mov	r0, r1
 8002ef4:	4611      	mov	r1, r2
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	602a      	str	r2, [r5, #0]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff fd72 	bl	80029e4 <_read>
 8002f00:	1c43      	adds	r3, r0, #1
 8002f02:	d102      	bne.n	8002f0a <_read_r+0x1e>
 8002f04:	682b      	ldr	r3, [r5, #0]
 8002f06:	b103      	cbz	r3, 8002f0a <_read_r+0x1e>
 8002f08:	6023      	str	r3, [r4, #0]
 8002f0a:	bd38      	pop	{r3, r4, r5, pc}
 8002f0c:	20000344 	.word	0x20000344

08002f10 <_write_r>:
 8002f10:	b538      	push	{r3, r4, r5, lr}
 8002f12:	4d07      	ldr	r5, [pc, #28]	@ (8002f30 <_write_r+0x20>)
 8002f14:	4604      	mov	r4, r0
 8002f16:	4608      	mov	r0, r1
 8002f18:	4611      	mov	r1, r2
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	602a      	str	r2, [r5, #0]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	f7ff fd7d 	bl	8002a1e <_write>
 8002f24:	1c43      	adds	r3, r0, #1
 8002f26:	d102      	bne.n	8002f2e <_write_r+0x1e>
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	b103      	cbz	r3, 8002f2e <_write_r+0x1e>
 8002f2c:	6023      	str	r3, [r4, #0]
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	20000344 	.word	0x20000344

08002f34 <__errno>:
 8002f34:	4b01      	ldr	r3, [pc, #4]	@ (8002f3c <__errno+0x8>)
 8002f36:	6818      	ldr	r0, [r3, #0]
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	20000024 	.word	0x20000024

08002f40 <__libc_init_array>:
 8002f40:	b570      	push	{r4, r5, r6, lr}
 8002f42:	4d0d      	ldr	r5, [pc, #52]	@ (8002f78 <__libc_init_array+0x38>)
 8002f44:	4c0d      	ldr	r4, [pc, #52]	@ (8002f7c <__libc_init_array+0x3c>)
 8002f46:	1b64      	subs	r4, r4, r5
 8002f48:	10a4      	asrs	r4, r4, #2
 8002f4a:	2600      	movs	r6, #0
 8002f4c:	42a6      	cmp	r6, r4
 8002f4e:	d109      	bne.n	8002f64 <__libc_init_array+0x24>
 8002f50:	4d0b      	ldr	r5, [pc, #44]	@ (8002f80 <__libc_init_array+0x40>)
 8002f52:	4c0c      	ldr	r4, [pc, #48]	@ (8002f84 <__libc_init_array+0x44>)
 8002f54:	f000 ffee 	bl	8003f34 <_init>
 8002f58:	1b64      	subs	r4, r4, r5
 8002f5a:	10a4      	asrs	r4, r4, #2
 8002f5c:	2600      	movs	r6, #0
 8002f5e:	42a6      	cmp	r6, r4
 8002f60:	d105      	bne.n	8002f6e <__libc_init_array+0x2e>
 8002f62:	bd70      	pop	{r4, r5, r6, pc}
 8002f64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f68:	4798      	blx	r3
 8002f6a:	3601      	adds	r6, #1
 8002f6c:	e7ee      	b.n	8002f4c <__libc_init_array+0xc>
 8002f6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f72:	4798      	blx	r3
 8002f74:	3601      	adds	r6, #1
 8002f76:	e7f2      	b.n	8002f5e <__libc_init_array+0x1e>
 8002f78:	080044f0 	.word	0x080044f0
 8002f7c:	080044f0 	.word	0x080044f0
 8002f80:	080044f0 	.word	0x080044f0
 8002f84:	080044f4 	.word	0x080044f4

08002f88 <__retarget_lock_init_recursive>:
 8002f88:	4770      	bx	lr

08002f8a <__retarget_lock_acquire_recursive>:
 8002f8a:	4770      	bx	lr

08002f8c <__retarget_lock_release_recursive>:
 8002f8c:	4770      	bx	lr
	...

08002f90 <__assert_func>:
 8002f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002f92:	4614      	mov	r4, r2
 8002f94:	461a      	mov	r2, r3
 8002f96:	4b09      	ldr	r3, [pc, #36]	@ (8002fbc <__assert_func+0x2c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	68d8      	ldr	r0, [r3, #12]
 8002f9e:	b14c      	cbz	r4, 8002fb4 <__assert_func+0x24>
 8002fa0:	4b07      	ldr	r3, [pc, #28]	@ (8002fc0 <__assert_func+0x30>)
 8002fa2:	9100      	str	r1, [sp, #0]
 8002fa4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002fa8:	4906      	ldr	r1, [pc, #24]	@ (8002fc4 <__assert_func+0x34>)
 8002faa:	462b      	mov	r3, r5
 8002fac:	f000 fc9e 	bl	80038ec <fiprintf>
 8002fb0:	f000 fce6 	bl	8003980 <abort>
 8002fb4:	4b04      	ldr	r3, [pc, #16]	@ (8002fc8 <__assert_func+0x38>)
 8002fb6:	461c      	mov	r4, r3
 8002fb8:	e7f3      	b.n	8002fa2 <__assert_func+0x12>
 8002fba:	bf00      	nop
 8002fbc:	20000024 	.word	0x20000024
 8002fc0:	08004476 	.word	0x08004476
 8002fc4:	08004483 	.word	0x08004483
 8002fc8:	080044b1 	.word	0x080044b1

08002fcc <_free_r>:
 8002fcc:	b538      	push	{r3, r4, r5, lr}
 8002fce:	4605      	mov	r5, r0
 8002fd0:	2900      	cmp	r1, #0
 8002fd2:	d041      	beq.n	8003058 <_free_r+0x8c>
 8002fd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd8:	1f0c      	subs	r4, r1, #4
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bfb8      	it	lt
 8002fde:	18e4      	addlt	r4, r4, r3
 8002fe0:	f000 f8e8 	bl	80031b4 <__malloc_lock>
 8002fe4:	4a1d      	ldr	r2, [pc, #116]	@ (800305c <_free_r+0x90>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	b933      	cbnz	r3, 8002ff8 <_free_r+0x2c>
 8002fea:	6063      	str	r3, [r4, #4]
 8002fec:	6014      	str	r4, [r2, #0]
 8002fee:	4628      	mov	r0, r5
 8002ff0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ff4:	f000 b8e4 	b.w	80031c0 <__malloc_unlock>
 8002ff8:	42a3      	cmp	r3, r4
 8002ffa:	d908      	bls.n	800300e <_free_r+0x42>
 8002ffc:	6820      	ldr	r0, [r4, #0]
 8002ffe:	1821      	adds	r1, r4, r0
 8003000:	428b      	cmp	r3, r1
 8003002:	bf01      	itttt	eq
 8003004:	6819      	ldreq	r1, [r3, #0]
 8003006:	685b      	ldreq	r3, [r3, #4]
 8003008:	1809      	addeq	r1, r1, r0
 800300a:	6021      	streq	r1, [r4, #0]
 800300c:	e7ed      	b.n	8002fea <_free_r+0x1e>
 800300e:	461a      	mov	r2, r3
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	b10b      	cbz	r3, 8003018 <_free_r+0x4c>
 8003014:	42a3      	cmp	r3, r4
 8003016:	d9fa      	bls.n	800300e <_free_r+0x42>
 8003018:	6811      	ldr	r1, [r2, #0]
 800301a:	1850      	adds	r0, r2, r1
 800301c:	42a0      	cmp	r0, r4
 800301e:	d10b      	bne.n	8003038 <_free_r+0x6c>
 8003020:	6820      	ldr	r0, [r4, #0]
 8003022:	4401      	add	r1, r0
 8003024:	1850      	adds	r0, r2, r1
 8003026:	4283      	cmp	r3, r0
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	d1e0      	bne.n	8002fee <_free_r+0x22>
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	6053      	str	r3, [r2, #4]
 8003032:	4408      	add	r0, r1
 8003034:	6010      	str	r0, [r2, #0]
 8003036:	e7da      	b.n	8002fee <_free_r+0x22>
 8003038:	d902      	bls.n	8003040 <_free_r+0x74>
 800303a:	230c      	movs	r3, #12
 800303c:	602b      	str	r3, [r5, #0]
 800303e:	e7d6      	b.n	8002fee <_free_r+0x22>
 8003040:	6820      	ldr	r0, [r4, #0]
 8003042:	1821      	adds	r1, r4, r0
 8003044:	428b      	cmp	r3, r1
 8003046:	bf04      	itt	eq
 8003048:	6819      	ldreq	r1, [r3, #0]
 800304a:	685b      	ldreq	r3, [r3, #4]
 800304c:	6063      	str	r3, [r4, #4]
 800304e:	bf04      	itt	eq
 8003050:	1809      	addeq	r1, r1, r0
 8003052:	6021      	streq	r1, [r4, #0]
 8003054:	6054      	str	r4, [r2, #4]
 8003056:	e7ca      	b.n	8002fee <_free_r+0x22>
 8003058:	bd38      	pop	{r3, r4, r5, pc}
 800305a:	bf00      	nop
 800305c:	20000350 	.word	0x20000350

08003060 <malloc>:
 8003060:	4b02      	ldr	r3, [pc, #8]	@ (800306c <malloc+0xc>)
 8003062:	4601      	mov	r1, r0
 8003064:	6818      	ldr	r0, [r3, #0]
 8003066:	f000 b825 	b.w	80030b4 <_malloc_r>
 800306a:	bf00      	nop
 800306c:	20000024 	.word	0x20000024

08003070 <sbrk_aligned>:
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	4e0f      	ldr	r6, [pc, #60]	@ (80030b0 <sbrk_aligned+0x40>)
 8003074:	460c      	mov	r4, r1
 8003076:	6831      	ldr	r1, [r6, #0]
 8003078:	4605      	mov	r5, r0
 800307a:	b911      	cbnz	r1, 8003082 <sbrk_aligned+0x12>
 800307c:	f000 fc62 	bl	8003944 <_sbrk_r>
 8003080:	6030      	str	r0, [r6, #0]
 8003082:	4621      	mov	r1, r4
 8003084:	4628      	mov	r0, r5
 8003086:	f000 fc5d 	bl	8003944 <_sbrk_r>
 800308a:	1c43      	adds	r3, r0, #1
 800308c:	d103      	bne.n	8003096 <sbrk_aligned+0x26>
 800308e:	f04f 34ff 	mov.w	r4, #4294967295
 8003092:	4620      	mov	r0, r4
 8003094:	bd70      	pop	{r4, r5, r6, pc}
 8003096:	1cc4      	adds	r4, r0, #3
 8003098:	f024 0403 	bic.w	r4, r4, #3
 800309c:	42a0      	cmp	r0, r4
 800309e:	d0f8      	beq.n	8003092 <sbrk_aligned+0x22>
 80030a0:	1a21      	subs	r1, r4, r0
 80030a2:	4628      	mov	r0, r5
 80030a4:	f000 fc4e 	bl	8003944 <_sbrk_r>
 80030a8:	3001      	adds	r0, #1
 80030aa:	d1f2      	bne.n	8003092 <sbrk_aligned+0x22>
 80030ac:	e7ef      	b.n	800308e <sbrk_aligned+0x1e>
 80030ae:	bf00      	nop
 80030b0:	2000034c 	.word	0x2000034c

080030b4 <_malloc_r>:
 80030b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030b8:	1ccd      	adds	r5, r1, #3
 80030ba:	f025 0503 	bic.w	r5, r5, #3
 80030be:	3508      	adds	r5, #8
 80030c0:	2d0c      	cmp	r5, #12
 80030c2:	bf38      	it	cc
 80030c4:	250c      	movcc	r5, #12
 80030c6:	2d00      	cmp	r5, #0
 80030c8:	4606      	mov	r6, r0
 80030ca:	db01      	blt.n	80030d0 <_malloc_r+0x1c>
 80030cc:	42a9      	cmp	r1, r5
 80030ce:	d904      	bls.n	80030da <_malloc_r+0x26>
 80030d0:	230c      	movs	r3, #12
 80030d2:	6033      	str	r3, [r6, #0]
 80030d4:	2000      	movs	r0, #0
 80030d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80030da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80031b0 <_malloc_r+0xfc>
 80030de:	f000 f869 	bl	80031b4 <__malloc_lock>
 80030e2:	f8d8 3000 	ldr.w	r3, [r8]
 80030e6:	461c      	mov	r4, r3
 80030e8:	bb44      	cbnz	r4, 800313c <_malloc_r+0x88>
 80030ea:	4629      	mov	r1, r5
 80030ec:	4630      	mov	r0, r6
 80030ee:	f7ff ffbf 	bl	8003070 <sbrk_aligned>
 80030f2:	1c43      	adds	r3, r0, #1
 80030f4:	4604      	mov	r4, r0
 80030f6:	d158      	bne.n	80031aa <_malloc_r+0xf6>
 80030f8:	f8d8 4000 	ldr.w	r4, [r8]
 80030fc:	4627      	mov	r7, r4
 80030fe:	2f00      	cmp	r7, #0
 8003100:	d143      	bne.n	800318a <_malloc_r+0xd6>
 8003102:	2c00      	cmp	r4, #0
 8003104:	d04b      	beq.n	800319e <_malloc_r+0xea>
 8003106:	6823      	ldr	r3, [r4, #0]
 8003108:	4639      	mov	r1, r7
 800310a:	4630      	mov	r0, r6
 800310c:	eb04 0903 	add.w	r9, r4, r3
 8003110:	f000 fc18 	bl	8003944 <_sbrk_r>
 8003114:	4581      	cmp	r9, r0
 8003116:	d142      	bne.n	800319e <_malloc_r+0xea>
 8003118:	6821      	ldr	r1, [r4, #0]
 800311a:	1a6d      	subs	r5, r5, r1
 800311c:	4629      	mov	r1, r5
 800311e:	4630      	mov	r0, r6
 8003120:	f7ff ffa6 	bl	8003070 <sbrk_aligned>
 8003124:	3001      	adds	r0, #1
 8003126:	d03a      	beq.n	800319e <_malloc_r+0xea>
 8003128:	6823      	ldr	r3, [r4, #0]
 800312a:	442b      	add	r3, r5
 800312c:	6023      	str	r3, [r4, #0]
 800312e:	f8d8 3000 	ldr.w	r3, [r8]
 8003132:	685a      	ldr	r2, [r3, #4]
 8003134:	bb62      	cbnz	r2, 8003190 <_malloc_r+0xdc>
 8003136:	f8c8 7000 	str.w	r7, [r8]
 800313a:	e00f      	b.n	800315c <_malloc_r+0xa8>
 800313c:	6822      	ldr	r2, [r4, #0]
 800313e:	1b52      	subs	r2, r2, r5
 8003140:	d420      	bmi.n	8003184 <_malloc_r+0xd0>
 8003142:	2a0b      	cmp	r2, #11
 8003144:	d917      	bls.n	8003176 <_malloc_r+0xc2>
 8003146:	1961      	adds	r1, r4, r5
 8003148:	42a3      	cmp	r3, r4
 800314a:	6025      	str	r5, [r4, #0]
 800314c:	bf18      	it	ne
 800314e:	6059      	strne	r1, [r3, #4]
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	bf08      	it	eq
 8003154:	f8c8 1000 	streq.w	r1, [r8]
 8003158:	5162      	str	r2, [r4, r5]
 800315a:	604b      	str	r3, [r1, #4]
 800315c:	4630      	mov	r0, r6
 800315e:	f000 f82f 	bl	80031c0 <__malloc_unlock>
 8003162:	f104 000b 	add.w	r0, r4, #11
 8003166:	1d23      	adds	r3, r4, #4
 8003168:	f020 0007 	bic.w	r0, r0, #7
 800316c:	1ac2      	subs	r2, r0, r3
 800316e:	bf1c      	itt	ne
 8003170:	1a1b      	subne	r3, r3, r0
 8003172:	50a3      	strne	r3, [r4, r2]
 8003174:	e7af      	b.n	80030d6 <_malloc_r+0x22>
 8003176:	6862      	ldr	r2, [r4, #4]
 8003178:	42a3      	cmp	r3, r4
 800317a:	bf0c      	ite	eq
 800317c:	f8c8 2000 	streq.w	r2, [r8]
 8003180:	605a      	strne	r2, [r3, #4]
 8003182:	e7eb      	b.n	800315c <_malloc_r+0xa8>
 8003184:	4623      	mov	r3, r4
 8003186:	6864      	ldr	r4, [r4, #4]
 8003188:	e7ae      	b.n	80030e8 <_malloc_r+0x34>
 800318a:	463c      	mov	r4, r7
 800318c:	687f      	ldr	r7, [r7, #4]
 800318e:	e7b6      	b.n	80030fe <_malloc_r+0x4a>
 8003190:	461a      	mov	r2, r3
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	42a3      	cmp	r3, r4
 8003196:	d1fb      	bne.n	8003190 <_malloc_r+0xdc>
 8003198:	2300      	movs	r3, #0
 800319a:	6053      	str	r3, [r2, #4]
 800319c:	e7de      	b.n	800315c <_malloc_r+0xa8>
 800319e:	230c      	movs	r3, #12
 80031a0:	6033      	str	r3, [r6, #0]
 80031a2:	4630      	mov	r0, r6
 80031a4:	f000 f80c 	bl	80031c0 <__malloc_unlock>
 80031a8:	e794      	b.n	80030d4 <_malloc_r+0x20>
 80031aa:	6005      	str	r5, [r0, #0]
 80031ac:	e7d6      	b.n	800315c <_malloc_r+0xa8>
 80031ae:	bf00      	nop
 80031b0:	20000350 	.word	0x20000350

080031b4 <__malloc_lock>:
 80031b4:	4801      	ldr	r0, [pc, #4]	@ (80031bc <__malloc_lock+0x8>)
 80031b6:	f7ff bee8 	b.w	8002f8a <__retarget_lock_acquire_recursive>
 80031ba:	bf00      	nop
 80031bc:	20000348 	.word	0x20000348

080031c0 <__malloc_unlock>:
 80031c0:	4801      	ldr	r0, [pc, #4]	@ (80031c8 <__malloc_unlock+0x8>)
 80031c2:	f7ff bee3 	b.w	8002f8c <__retarget_lock_release_recursive>
 80031c6:	bf00      	nop
 80031c8:	20000348 	.word	0x20000348

080031cc <__ssputs_r>:
 80031cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031d0:	688e      	ldr	r6, [r1, #8]
 80031d2:	461f      	mov	r7, r3
 80031d4:	42be      	cmp	r6, r7
 80031d6:	680b      	ldr	r3, [r1, #0]
 80031d8:	4682      	mov	sl, r0
 80031da:	460c      	mov	r4, r1
 80031dc:	4690      	mov	r8, r2
 80031de:	d82d      	bhi.n	800323c <__ssputs_r+0x70>
 80031e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80031e8:	d026      	beq.n	8003238 <__ssputs_r+0x6c>
 80031ea:	6965      	ldr	r5, [r4, #20]
 80031ec:	6909      	ldr	r1, [r1, #16]
 80031ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031f2:	eba3 0901 	sub.w	r9, r3, r1
 80031f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80031fa:	1c7b      	adds	r3, r7, #1
 80031fc:	444b      	add	r3, r9
 80031fe:	106d      	asrs	r5, r5, #1
 8003200:	429d      	cmp	r5, r3
 8003202:	bf38      	it	cc
 8003204:	461d      	movcc	r5, r3
 8003206:	0553      	lsls	r3, r2, #21
 8003208:	d527      	bpl.n	800325a <__ssputs_r+0x8e>
 800320a:	4629      	mov	r1, r5
 800320c:	f7ff ff52 	bl	80030b4 <_malloc_r>
 8003210:	4606      	mov	r6, r0
 8003212:	b360      	cbz	r0, 800326e <__ssputs_r+0xa2>
 8003214:	6921      	ldr	r1, [r4, #16]
 8003216:	464a      	mov	r2, r9
 8003218:	f000 fba4 	bl	8003964 <memcpy>
 800321c:	89a3      	ldrh	r3, [r4, #12]
 800321e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003222:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003226:	81a3      	strh	r3, [r4, #12]
 8003228:	6126      	str	r6, [r4, #16]
 800322a:	6165      	str	r5, [r4, #20]
 800322c:	444e      	add	r6, r9
 800322e:	eba5 0509 	sub.w	r5, r5, r9
 8003232:	6026      	str	r6, [r4, #0]
 8003234:	60a5      	str	r5, [r4, #8]
 8003236:	463e      	mov	r6, r7
 8003238:	42be      	cmp	r6, r7
 800323a:	d900      	bls.n	800323e <__ssputs_r+0x72>
 800323c:	463e      	mov	r6, r7
 800323e:	6820      	ldr	r0, [r4, #0]
 8003240:	4632      	mov	r2, r6
 8003242:	4641      	mov	r1, r8
 8003244:	f000 fb64 	bl	8003910 <memmove>
 8003248:	68a3      	ldr	r3, [r4, #8]
 800324a:	1b9b      	subs	r3, r3, r6
 800324c:	60a3      	str	r3, [r4, #8]
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	4433      	add	r3, r6
 8003252:	6023      	str	r3, [r4, #0]
 8003254:	2000      	movs	r0, #0
 8003256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800325a:	462a      	mov	r2, r5
 800325c:	f000 fb97 	bl	800398e <_realloc_r>
 8003260:	4606      	mov	r6, r0
 8003262:	2800      	cmp	r0, #0
 8003264:	d1e0      	bne.n	8003228 <__ssputs_r+0x5c>
 8003266:	6921      	ldr	r1, [r4, #16]
 8003268:	4650      	mov	r0, sl
 800326a:	f7ff feaf 	bl	8002fcc <_free_r>
 800326e:	230c      	movs	r3, #12
 8003270:	f8ca 3000 	str.w	r3, [sl]
 8003274:	89a3      	ldrh	r3, [r4, #12]
 8003276:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800327a:	81a3      	strh	r3, [r4, #12]
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	e7e9      	b.n	8003256 <__ssputs_r+0x8a>
	...

08003284 <_svfiprintf_r>:
 8003284:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003288:	4698      	mov	r8, r3
 800328a:	898b      	ldrh	r3, [r1, #12]
 800328c:	061b      	lsls	r3, r3, #24
 800328e:	b09d      	sub	sp, #116	@ 0x74
 8003290:	4607      	mov	r7, r0
 8003292:	460d      	mov	r5, r1
 8003294:	4614      	mov	r4, r2
 8003296:	d510      	bpl.n	80032ba <_svfiprintf_r+0x36>
 8003298:	690b      	ldr	r3, [r1, #16]
 800329a:	b973      	cbnz	r3, 80032ba <_svfiprintf_r+0x36>
 800329c:	2140      	movs	r1, #64	@ 0x40
 800329e:	f7ff ff09 	bl	80030b4 <_malloc_r>
 80032a2:	6028      	str	r0, [r5, #0]
 80032a4:	6128      	str	r0, [r5, #16]
 80032a6:	b930      	cbnz	r0, 80032b6 <_svfiprintf_r+0x32>
 80032a8:	230c      	movs	r3, #12
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	f04f 30ff 	mov.w	r0, #4294967295
 80032b0:	b01d      	add	sp, #116	@ 0x74
 80032b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032b6:	2340      	movs	r3, #64	@ 0x40
 80032b8:	616b      	str	r3, [r5, #20]
 80032ba:	2300      	movs	r3, #0
 80032bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80032be:	2320      	movs	r3, #32
 80032c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80032c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80032c8:	2330      	movs	r3, #48	@ 0x30
 80032ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003468 <_svfiprintf_r+0x1e4>
 80032ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80032d2:	f04f 0901 	mov.w	r9, #1
 80032d6:	4623      	mov	r3, r4
 80032d8:	469a      	mov	sl, r3
 80032da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80032de:	b10a      	cbz	r2, 80032e4 <_svfiprintf_r+0x60>
 80032e0:	2a25      	cmp	r2, #37	@ 0x25
 80032e2:	d1f9      	bne.n	80032d8 <_svfiprintf_r+0x54>
 80032e4:	ebba 0b04 	subs.w	fp, sl, r4
 80032e8:	d00b      	beq.n	8003302 <_svfiprintf_r+0x7e>
 80032ea:	465b      	mov	r3, fp
 80032ec:	4622      	mov	r2, r4
 80032ee:	4629      	mov	r1, r5
 80032f0:	4638      	mov	r0, r7
 80032f2:	f7ff ff6b 	bl	80031cc <__ssputs_r>
 80032f6:	3001      	adds	r0, #1
 80032f8:	f000 80a7 	beq.w	800344a <_svfiprintf_r+0x1c6>
 80032fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80032fe:	445a      	add	r2, fp
 8003300:	9209      	str	r2, [sp, #36]	@ 0x24
 8003302:	f89a 3000 	ldrb.w	r3, [sl]
 8003306:	2b00      	cmp	r3, #0
 8003308:	f000 809f 	beq.w	800344a <_svfiprintf_r+0x1c6>
 800330c:	2300      	movs	r3, #0
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003316:	f10a 0a01 	add.w	sl, sl, #1
 800331a:	9304      	str	r3, [sp, #16]
 800331c:	9307      	str	r3, [sp, #28]
 800331e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003322:	931a      	str	r3, [sp, #104]	@ 0x68
 8003324:	4654      	mov	r4, sl
 8003326:	2205      	movs	r2, #5
 8003328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800332c:	484e      	ldr	r0, [pc, #312]	@ (8003468 <_svfiprintf_r+0x1e4>)
 800332e:	f7fc ff5f 	bl	80001f0 <memchr>
 8003332:	9a04      	ldr	r2, [sp, #16]
 8003334:	b9d8      	cbnz	r0, 800336e <_svfiprintf_r+0xea>
 8003336:	06d0      	lsls	r0, r2, #27
 8003338:	bf44      	itt	mi
 800333a:	2320      	movmi	r3, #32
 800333c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003340:	0711      	lsls	r1, r2, #28
 8003342:	bf44      	itt	mi
 8003344:	232b      	movmi	r3, #43	@ 0x2b
 8003346:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800334a:	f89a 3000 	ldrb.w	r3, [sl]
 800334e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003350:	d015      	beq.n	800337e <_svfiprintf_r+0xfa>
 8003352:	9a07      	ldr	r2, [sp, #28]
 8003354:	4654      	mov	r4, sl
 8003356:	2000      	movs	r0, #0
 8003358:	f04f 0c0a 	mov.w	ip, #10
 800335c:	4621      	mov	r1, r4
 800335e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003362:	3b30      	subs	r3, #48	@ 0x30
 8003364:	2b09      	cmp	r3, #9
 8003366:	d94b      	bls.n	8003400 <_svfiprintf_r+0x17c>
 8003368:	b1b0      	cbz	r0, 8003398 <_svfiprintf_r+0x114>
 800336a:	9207      	str	r2, [sp, #28]
 800336c:	e014      	b.n	8003398 <_svfiprintf_r+0x114>
 800336e:	eba0 0308 	sub.w	r3, r0, r8
 8003372:	fa09 f303 	lsl.w	r3, r9, r3
 8003376:	4313      	orrs	r3, r2
 8003378:	9304      	str	r3, [sp, #16]
 800337a:	46a2      	mov	sl, r4
 800337c:	e7d2      	b.n	8003324 <_svfiprintf_r+0xa0>
 800337e:	9b03      	ldr	r3, [sp, #12]
 8003380:	1d19      	adds	r1, r3, #4
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	9103      	str	r1, [sp, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	bfbb      	ittet	lt
 800338a:	425b      	neglt	r3, r3
 800338c:	f042 0202 	orrlt.w	r2, r2, #2
 8003390:	9307      	strge	r3, [sp, #28]
 8003392:	9307      	strlt	r3, [sp, #28]
 8003394:	bfb8      	it	lt
 8003396:	9204      	strlt	r2, [sp, #16]
 8003398:	7823      	ldrb	r3, [r4, #0]
 800339a:	2b2e      	cmp	r3, #46	@ 0x2e
 800339c:	d10a      	bne.n	80033b4 <_svfiprintf_r+0x130>
 800339e:	7863      	ldrb	r3, [r4, #1]
 80033a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80033a2:	d132      	bne.n	800340a <_svfiprintf_r+0x186>
 80033a4:	9b03      	ldr	r3, [sp, #12]
 80033a6:	1d1a      	adds	r2, r3, #4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	9203      	str	r2, [sp, #12]
 80033ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033b0:	3402      	adds	r4, #2
 80033b2:	9305      	str	r3, [sp, #20]
 80033b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003478 <_svfiprintf_r+0x1f4>
 80033b8:	7821      	ldrb	r1, [r4, #0]
 80033ba:	2203      	movs	r2, #3
 80033bc:	4650      	mov	r0, sl
 80033be:	f7fc ff17 	bl	80001f0 <memchr>
 80033c2:	b138      	cbz	r0, 80033d4 <_svfiprintf_r+0x150>
 80033c4:	9b04      	ldr	r3, [sp, #16]
 80033c6:	eba0 000a 	sub.w	r0, r0, sl
 80033ca:	2240      	movs	r2, #64	@ 0x40
 80033cc:	4082      	lsls	r2, r0
 80033ce:	4313      	orrs	r3, r2
 80033d0:	3401      	adds	r4, #1
 80033d2:	9304      	str	r3, [sp, #16]
 80033d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033d8:	4824      	ldr	r0, [pc, #144]	@ (800346c <_svfiprintf_r+0x1e8>)
 80033da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80033de:	2206      	movs	r2, #6
 80033e0:	f7fc ff06 	bl	80001f0 <memchr>
 80033e4:	2800      	cmp	r0, #0
 80033e6:	d036      	beq.n	8003456 <_svfiprintf_r+0x1d2>
 80033e8:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <_svfiprintf_r+0x1ec>)
 80033ea:	bb1b      	cbnz	r3, 8003434 <_svfiprintf_r+0x1b0>
 80033ec:	9b03      	ldr	r3, [sp, #12]
 80033ee:	3307      	adds	r3, #7
 80033f0:	f023 0307 	bic.w	r3, r3, #7
 80033f4:	3308      	adds	r3, #8
 80033f6:	9303      	str	r3, [sp, #12]
 80033f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80033fa:	4433      	add	r3, r6
 80033fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80033fe:	e76a      	b.n	80032d6 <_svfiprintf_r+0x52>
 8003400:	fb0c 3202 	mla	r2, ip, r2, r3
 8003404:	460c      	mov	r4, r1
 8003406:	2001      	movs	r0, #1
 8003408:	e7a8      	b.n	800335c <_svfiprintf_r+0xd8>
 800340a:	2300      	movs	r3, #0
 800340c:	3401      	adds	r4, #1
 800340e:	9305      	str	r3, [sp, #20]
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 0c0a 	mov.w	ip, #10
 8003416:	4620      	mov	r0, r4
 8003418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800341c:	3a30      	subs	r2, #48	@ 0x30
 800341e:	2a09      	cmp	r2, #9
 8003420:	d903      	bls.n	800342a <_svfiprintf_r+0x1a6>
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0c6      	beq.n	80033b4 <_svfiprintf_r+0x130>
 8003426:	9105      	str	r1, [sp, #20]
 8003428:	e7c4      	b.n	80033b4 <_svfiprintf_r+0x130>
 800342a:	fb0c 2101 	mla	r1, ip, r1, r2
 800342e:	4604      	mov	r4, r0
 8003430:	2301      	movs	r3, #1
 8003432:	e7f0      	b.n	8003416 <_svfiprintf_r+0x192>
 8003434:	ab03      	add	r3, sp, #12
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	462a      	mov	r2, r5
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <_svfiprintf_r+0x1f0>)
 800343c:	a904      	add	r1, sp, #16
 800343e:	4638      	mov	r0, r7
 8003440:	f3af 8000 	nop.w
 8003444:	1c42      	adds	r2, r0, #1
 8003446:	4606      	mov	r6, r0
 8003448:	d1d6      	bne.n	80033f8 <_svfiprintf_r+0x174>
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	065b      	lsls	r3, r3, #25
 800344e:	f53f af2d 	bmi.w	80032ac <_svfiprintf_r+0x28>
 8003452:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003454:	e72c      	b.n	80032b0 <_svfiprintf_r+0x2c>
 8003456:	ab03      	add	r3, sp, #12
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	462a      	mov	r2, r5
 800345c:	4b05      	ldr	r3, [pc, #20]	@ (8003474 <_svfiprintf_r+0x1f0>)
 800345e:	a904      	add	r1, sp, #16
 8003460:	4638      	mov	r0, r7
 8003462:	f000 f879 	bl	8003558 <_printf_i>
 8003466:	e7ed      	b.n	8003444 <_svfiprintf_r+0x1c0>
 8003468:	080044b2 	.word	0x080044b2
 800346c:	080044bc 	.word	0x080044bc
 8003470:	00000000 	.word	0x00000000
 8003474:	080031cd 	.word	0x080031cd
 8003478:	080044b8 	.word	0x080044b8

0800347c <_printf_common>:
 800347c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003480:	4616      	mov	r6, r2
 8003482:	4698      	mov	r8, r3
 8003484:	688a      	ldr	r2, [r1, #8]
 8003486:	690b      	ldr	r3, [r1, #16]
 8003488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800348c:	4293      	cmp	r3, r2
 800348e:	bfb8      	it	lt
 8003490:	4613      	movlt	r3, r2
 8003492:	6033      	str	r3, [r6, #0]
 8003494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003498:	4607      	mov	r7, r0
 800349a:	460c      	mov	r4, r1
 800349c:	b10a      	cbz	r2, 80034a2 <_printf_common+0x26>
 800349e:	3301      	adds	r3, #1
 80034a0:	6033      	str	r3, [r6, #0]
 80034a2:	6823      	ldr	r3, [r4, #0]
 80034a4:	0699      	lsls	r1, r3, #26
 80034a6:	bf42      	ittt	mi
 80034a8:	6833      	ldrmi	r3, [r6, #0]
 80034aa:	3302      	addmi	r3, #2
 80034ac:	6033      	strmi	r3, [r6, #0]
 80034ae:	6825      	ldr	r5, [r4, #0]
 80034b0:	f015 0506 	ands.w	r5, r5, #6
 80034b4:	d106      	bne.n	80034c4 <_printf_common+0x48>
 80034b6:	f104 0a19 	add.w	sl, r4, #25
 80034ba:	68e3      	ldr	r3, [r4, #12]
 80034bc:	6832      	ldr	r2, [r6, #0]
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	42ab      	cmp	r3, r5
 80034c2:	dc26      	bgt.n	8003512 <_printf_common+0x96>
 80034c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80034c8:	6822      	ldr	r2, [r4, #0]
 80034ca:	3b00      	subs	r3, #0
 80034cc:	bf18      	it	ne
 80034ce:	2301      	movne	r3, #1
 80034d0:	0692      	lsls	r2, r2, #26
 80034d2:	d42b      	bmi.n	800352c <_printf_common+0xb0>
 80034d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80034d8:	4641      	mov	r1, r8
 80034da:	4638      	mov	r0, r7
 80034dc:	47c8      	blx	r9
 80034de:	3001      	adds	r0, #1
 80034e0:	d01e      	beq.n	8003520 <_printf_common+0xa4>
 80034e2:	6823      	ldr	r3, [r4, #0]
 80034e4:	6922      	ldr	r2, [r4, #16]
 80034e6:	f003 0306 	and.w	r3, r3, #6
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf02      	ittt	eq
 80034ee:	68e5      	ldreq	r5, [r4, #12]
 80034f0:	6833      	ldreq	r3, [r6, #0]
 80034f2:	1aed      	subeq	r5, r5, r3
 80034f4:	68a3      	ldr	r3, [r4, #8]
 80034f6:	bf0c      	ite	eq
 80034f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80034fc:	2500      	movne	r5, #0
 80034fe:	4293      	cmp	r3, r2
 8003500:	bfc4      	itt	gt
 8003502:	1a9b      	subgt	r3, r3, r2
 8003504:	18ed      	addgt	r5, r5, r3
 8003506:	2600      	movs	r6, #0
 8003508:	341a      	adds	r4, #26
 800350a:	42b5      	cmp	r5, r6
 800350c:	d11a      	bne.n	8003544 <_printf_common+0xc8>
 800350e:	2000      	movs	r0, #0
 8003510:	e008      	b.n	8003524 <_printf_common+0xa8>
 8003512:	2301      	movs	r3, #1
 8003514:	4652      	mov	r2, sl
 8003516:	4641      	mov	r1, r8
 8003518:	4638      	mov	r0, r7
 800351a:	47c8      	blx	r9
 800351c:	3001      	adds	r0, #1
 800351e:	d103      	bne.n	8003528 <_printf_common+0xac>
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003528:	3501      	adds	r5, #1
 800352a:	e7c6      	b.n	80034ba <_printf_common+0x3e>
 800352c:	18e1      	adds	r1, r4, r3
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	2030      	movs	r0, #48	@ 0x30
 8003532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003536:	4422      	add	r2, r4
 8003538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800353c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003540:	3302      	adds	r3, #2
 8003542:	e7c7      	b.n	80034d4 <_printf_common+0x58>
 8003544:	2301      	movs	r3, #1
 8003546:	4622      	mov	r2, r4
 8003548:	4641      	mov	r1, r8
 800354a:	4638      	mov	r0, r7
 800354c:	47c8      	blx	r9
 800354e:	3001      	adds	r0, #1
 8003550:	d0e6      	beq.n	8003520 <_printf_common+0xa4>
 8003552:	3601      	adds	r6, #1
 8003554:	e7d9      	b.n	800350a <_printf_common+0x8e>
	...

08003558 <_printf_i>:
 8003558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800355c:	7e0f      	ldrb	r7, [r1, #24]
 800355e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003560:	2f78      	cmp	r7, #120	@ 0x78
 8003562:	4691      	mov	r9, r2
 8003564:	4680      	mov	r8, r0
 8003566:	460c      	mov	r4, r1
 8003568:	469a      	mov	sl, r3
 800356a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800356e:	d807      	bhi.n	8003580 <_printf_i+0x28>
 8003570:	2f62      	cmp	r7, #98	@ 0x62
 8003572:	d80a      	bhi.n	800358a <_printf_i+0x32>
 8003574:	2f00      	cmp	r7, #0
 8003576:	f000 80d1 	beq.w	800371c <_printf_i+0x1c4>
 800357a:	2f58      	cmp	r7, #88	@ 0x58
 800357c:	f000 80b8 	beq.w	80036f0 <_printf_i+0x198>
 8003580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003588:	e03a      	b.n	8003600 <_printf_i+0xa8>
 800358a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800358e:	2b15      	cmp	r3, #21
 8003590:	d8f6      	bhi.n	8003580 <_printf_i+0x28>
 8003592:	a101      	add	r1, pc, #4	@ (adr r1, 8003598 <_printf_i+0x40>)
 8003594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003598:	080035f1 	.word	0x080035f1
 800359c:	08003605 	.word	0x08003605
 80035a0:	08003581 	.word	0x08003581
 80035a4:	08003581 	.word	0x08003581
 80035a8:	08003581 	.word	0x08003581
 80035ac:	08003581 	.word	0x08003581
 80035b0:	08003605 	.word	0x08003605
 80035b4:	08003581 	.word	0x08003581
 80035b8:	08003581 	.word	0x08003581
 80035bc:	08003581 	.word	0x08003581
 80035c0:	08003581 	.word	0x08003581
 80035c4:	08003703 	.word	0x08003703
 80035c8:	0800362f 	.word	0x0800362f
 80035cc:	080036bd 	.word	0x080036bd
 80035d0:	08003581 	.word	0x08003581
 80035d4:	08003581 	.word	0x08003581
 80035d8:	08003725 	.word	0x08003725
 80035dc:	08003581 	.word	0x08003581
 80035e0:	0800362f 	.word	0x0800362f
 80035e4:	08003581 	.word	0x08003581
 80035e8:	08003581 	.word	0x08003581
 80035ec:	080036c5 	.word	0x080036c5
 80035f0:	6833      	ldr	r3, [r6, #0]
 80035f2:	1d1a      	adds	r2, r3, #4
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	6032      	str	r2, [r6, #0]
 80035f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003600:	2301      	movs	r3, #1
 8003602:	e09c      	b.n	800373e <_printf_i+0x1e6>
 8003604:	6833      	ldr	r3, [r6, #0]
 8003606:	6820      	ldr	r0, [r4, #0]
 8003608:	1d19      	adds	r1, r3, #4
 800360a:	6031      	str	r1, [r6, #0]
 800360c:	0606      	lsls	r6, r0, #24
 800360e:	d501      	bpl.n	8003614 <_printf_i+0xbc>
 8003610:	681d      	ldr	r5, [r3, #0]
 8003612:	e003      	b.n	800361c <_printf_i+0xc4>
 8003614:	0645      	lsls	r5, r0, #25
 8003616:	d5fb      	bpl.n	8003610 <_printf_i+0xb8>
 8003618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800361c:	2d00      	cmp	r5, #0
 800361e:	da03      	bge.n	8003628 <_printf_i+0xd0>
 8003620:	232d      	movs	r3, #45	@ 0x2d
 8003622:	426d      	negs	r5, r5
 8003624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003628:	4858      	ldr	r0, [pc, #352]	@ (800378c <_printf_i+0x234>)
 800362a:	230a      	movs	r3, #10
 800362c:	e011      	b.n	8003652 <_printf_i+0xfa>
 800362e:	6821      	ldr	r1, [r4, #0]
 8003630:	6833      	ldr	r3, [r6, #0]
 8003632:	0608      	lsls	r0, r1, #24
 8003634:	f853 5b04 	ldr.w	r5, [r3], #4
 8003638:	d402      	bmi.n	8003640 <_printf_i+0xe8>
 800363a:	0649      	lsls	r1, r1, #25
 800363c:	bf48      	it	mi
 800363e:	b2ad      	uxthmi	r5, r5
 8003640:	2f6f      	cmp	r7, #111	@ 0x6f
 8003642:	4852      	ldr	r0, [pc, #328]	@ (800378c <_printf_i+0x234>)
 8003644:	6033      	str	r3, [r6, #0]
 8003646:	bf14      	ite	ne
 8003648:	230a      	movne	r3, #10
 800364a:	2308      	moveq	r3, #8
 800364c:	2100      	movs	r1, #0
 800364e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003652:	6866      	ldr	r6, [r4, #4]
 8003654:	60a6      	str	r6, [r4, #8]
 8003656:	2e00      	cmp	r6, #0
 8003658:	db05      	blt.n	8003666 <_printf_i+0x10e>
 800365a:	6821      	ldr	r1, [r4, #0]
 800365c:	432e      	orrs	r6, r5
 800365e:	f021 0104 	bic.w	r1, r1, #4
 8003662:	6021      	str	r1, [r4, #0]
 8003664:	d04b      	beq.n	80036fe <_printf_i+0x1a6>
 8003666:	4616      	mov	r6, r2
 8003668:	fbb5 f1f3 	udiv	r1, r5, r3
 800366c:	fb03 5711 	mls	r7, r3, r1, r5
 8003670:	5dc7      	ldrb	r7, [r0, r7]
 8003672:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003676:	462f      	mov	r7, r5
 8003678:	42bb      	cmp	r3, r7
 800367a:	460d      	mov	r5, r1
 800367c:	d9f4      	bls.n	8003668 <_printf_i+0x110>
 800367e:	2b08      	cmp	r3, #8
 8003680:	d10b      	bne.n	800369a <_printf_i+0x142>
 8003682:	6823      	ldr	r3, [r4, #0]
 8003684:	07df      	lsls	r7, r3, #31
 8003686:	d508      	bpl.n	800369a <_printf_i+0x142>
 8003688:	6923      	ldr	r3, [r4, #16]
 800368a:	6861      	ldr	r1, [r4, #4]
 800368c:	4299      	cmp	r1, r3
 800368e:	bfde      	ittt	le
 8003690:	2330      	movle	r3, #48	@ 0x30
 8003692:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003696:	f106 36ff 	addle.w	r6, r6, #4294967295
 800369a:	1b92      	subs	r2, r2, r6
 800369c:	6122      	str	r2, [r4, #16]
 800369e:	f8cd a000 	str.w	sl, [sp]
 80036a2:	464b      	mov	r3, r9
 80036a4:	aa03      	add	r2, sp, #12
 80036a6:	4621      	mov	r1, r4
 80036a8:	4640      	mov	r0, r8
 80036aa:	f7ff fee7 	bl	800347c <_printf_common>
 80036ae:	3001      	adds	r0, #1
 80036b0:	d14a      	bne.n	8003748 <_printf_i+0x1f0>
 80036b2:	f04f 30ff 	mov.w	r0, #4294967295
 80036b6:	b004      	add	sp, #16
 80036b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036bc:	6823      	ldr	r3, [r4, #0]
 80036be:	f043 0320 	orr.w	r3, r3, #32
 80036c2:	6023      	str	r3, [r4, #0]
 80036c4:	4832      	ldr	r0, [pc, #200]	@ (8003790 <_printf_i+0x238>)
 80036c6:	2778      	movs	r7, #120	@ 0x78
 80036c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	6831      	ldr	r1, [r6, #0]
 80036d0:	061f      	lsls	r7, r3, #24
 80036d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80036d6:	d402      	bmi.n	80036de <_printf_i+0x186>
 80036d8:	065f      	lsls	r7, r3, #25
 80036da:	bf48      	it	mi
 80036dc:	b2ad      	uxthmi	r5, r5
 80036de:	6031      	str	r1, [r6, #0]
 80036e0:	07d9      	lsls	r1, r3, #31
 80036e2:	bf44      	itt	mi
 80036e4:	f043 0320 	orrmi.w	r3, r3, #32
 80036e8:	6023      	strmi	r3, [r4, #0]
 80036ea:	b11d      	cbz	r5, 80036f4 <_printf_i+0x19c>
 80036ec:	2310      	movs	r3, #16
 80036ee:	e7ad      	b.n	800364c <_printf_i+0xf4>
 80036f0:	4826      	ldr	r0, [pc, #152]	@ (800378c <_printf_i+0x234>)
 80036f2:	e7e9      	b.n	80036c8 <_printf_i+0x170>
 80036f4:	6823      	ldr	r3, [r4, #0]
 80036f6:	f023 0320 	bic.w	r3, r3, #32
 80036fa:	6023      	str	r3, [r4, #0]
 80036fc:	e7f6      	b.n	80036ec <_printf_i+0x194>
 80036fe:	4616      	mov	r6, r2
 8003700:	e7bd      	b.n	800367e <_printf_i+0x126>
 8003702:	6833      	ldr	r3, [r6, #0]
 8003704:	6825      	ldr	r5, [r4, #0]
 8003706:	6961      	ldr	r1, [r4, #20]
 8003708:	1d18      	adds	r0, r3, #4
 800370a:	6030      	str	r0, [r6, #0]
 800370c:	062e      	lsls	r6, r5, #24
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	d501      	bpl.n	8003716 <_printf_i+0x1be>
 8003712:	6019      	str	r1, [r3, #0]
 8003714:	e002      	b.n	800371c <_printf_i+0x1c4>
 8003716:	0668      	lsls	r0, r5, #25
 8003718:	d5fb      	bpl.n	8003712 <_printf_i+0x1ba>
 800371a:	8019      	strh	r1, [r3, #0]
 800371c:	2300      	movs	r3, #0
 800371e:	6123      	str	r3, [r4, #16]
 8003720:	4616      	mov	r6, r2
 8003722:	e7bc      	b.n	800369e <_printf_i+0x146>
 8003724:	6833      	ldr	r3, [r6, #0]
 8003726:	1d1a      	adds	r2, r3, #4
 8003728:	6032      	str	r2, [r6, #0]
 800372a:	681e      	ldr	r6, [r3, #0]
 800372c:	6862      	ldr	r2, [r4, #4]
 800372e:	2100      	movs	r1, #0
 8003730:	4630      	mov	r0, r6
 8003732:	f7fc fd5d 	bl	80001f0 <memchr>
 8003736:	b108      	cbz	r0, 800373c <_printf_i+0x1e4>
 8003738:	1b80      	subs	r0, r0, r6
 800373a:	6060      	str	r0, [r4, #4]
 800373c:	6863      	ldr	r3, [r4, #4]
 800373e:	6123      	str	r3, [r4, #16]
 8003740:	2300      	movs	r3, #0
 8003742:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003746:	e7aa      	b.n	800369e <_printf_i+0x146>
 8003748:	6923      	ldr	r3, [r4, #16]
 800374a:	4632      	mov	r2, r6
 800374c:	4649      	mov	r1, r9
 800374e:	4640      	mov	r0, r8
 8003750:	47d0      	blx	sl
 8003752:	3001      	adds	r0, #1
 8003754:	d0ad      	beq.n	80036b2 <_printf_i+0x15a>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	079b      	lsls	r3, r3, #30
 800375a:	d413      	bmi.n	8003784 <_printf_i+0x22c>
 800375c:	68e0      	ldr	r0, [r4, #12]
 800375e:	9b03      	ldr	r3, [sp, #12]
 8003760:	4298      	cmp	r0, r3
 8003762:	bfb8      	it	lt
 8003764:	4618      	movlt	r0, r3
 8003766:	e7a6      	b.n	80036b6 <_printf_i+0x15e>
 8003768:	2301      	movs	r3, #1
 800376a:	4632      	mov	r2, r6
 800376c:	4649      	mov	r1, r9
 800376e:	4640      	mov	r0, r8
 8003770:	47d0      	blx	sl
 8003772:	3001      	adds	r0, #1
 8003774:	d09d      	beq.n	80036b2 <_printf_i+0x15a>
 8003776:	3501      	adds	r5, #1
 8003778:	68e3      	ldr	r3, [r4, #12]
 800377a:	9903      	ldr	r1, [sp, #12]
 800377c:	1a5b      	subs	r3, r3, r1
 800377e:	42ab      	cmp	r3, r5
 8003780:	dcf2      	bgt.n	8003768 <_printf_i+0x210>
 8003782:	e7eb      	b.n	800375c <_printf_i+0x204>
 8003784:	2500      	movs	r5, #0
 8003786:	f104 0619 	add.w	r6, r4, #25
 800378a:	e7f5      	b.n	8003778 <_printf_i+0x220>
 800378c:	080044c3 	.word	0x080044c3
 8003790:	080044d4 	.word	0x080044d4

08003794 <__sflush_r>:
 8003794:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	0716      	lsls	r6, r2, #28
 800379e:	4605      	mov	r5, r0
 80037a0:	460c      	mov	r4, r1
 80037a2:	d454      	bmi.n	800384e <__sflush_r+0xba>
 80037a4:	684b      	ldr	r3, [r1, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	dc02      	bgt.n	80037b0 <__sflush_r+0x1c>
 80037aa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	dd48      	ble.n	8003842 <__sflush_r+0xae>
 80037b0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037b2:	2e00      	cmp	r6, #0
 80037b4:	d045      	beq.n	8003842 <__sflush_r+0xae>
 80037b6:	2300      	movs	r3, #0
 80037b8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037bc:	682f      	ldr	r7, [r5, #0]
 80037be:	6a21      	ldr	r1, [r4, #32]
 80037c0:	602b      	str	r3, [r5, #0]
 80037c2:	d030      	beq.n	8003826 <__sflush_r+0x92>
 80037c4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037c6:	89a3      	ldrh	r3, [r4, #12]
 80037c8:	0759      	lsls	r1, r3, #29
 80037ca:	d505      	bpl.n	80037d8 <__sflush_r+0x44>
 80037cc:	6863      	ldr	r3, [r4, #4]
 80037ce:	1ad2      	subs	r2, r2, r3
 80037d0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037d2:	b10b      	cbz	r3, 80037d8 <__sflush_r+0x44>
 80037d4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037d6:	1ad2      	subs	r2, r2, r3
 80037d8:	2300      	movs	r3, #0
 80037da:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037dc:	6a21      	ldr	r1, [r4, #32]
 80037de:	4628      	mov	r0, r5
 80037e0:	47b0      	blx	r6
 80037e2:	1c43      	adds	r3, r0, #1
 80037e4:	89a3      	ldrh	r3, [r4, #12]
 80037e6:	d106      	bne.n	80037f6 <__sflush_r+0x62>
 80037e8:	6829      	ldr	r1, [r5, #0]
 80037ea:	291d      	cmp	r1, #29
 80037ec:	d82b      	bhi.n	8003846 <__sflush_r+0xb2>
 80037ee:	4a2a      	ldr	r2, [pc, #168]	@ (8003898 <__sflush_r+0x104>)
 80037f0:	40ca      	lsrs	r2, r1
 80037f2:	07d6      	lsls	r6, r2, #31
 80037f4:	d527      	bpl.n	8003846 <__sflush_r+0xb2>
 80037f6:	2200      	movs	r2, #0
 80037f8:	6062      	str	r2, [r4, #4]
 80037fa:	04d9      	lsls	r1, r3, #19
 80037fc:	6922      	ldr	r2, [r4, #16]
 80037fe:	6022      	str	r2, [r4, #0]
 8003800:	d504      	bpl.n	800380c <__sflush_r+0x78>
 8003802:	1c42      	adds	r2, r0, #1
 8003804:	d101      	bne.n	800380a <__sflush_r+0x76>
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	b903      	cbnz	r3, 800380c <__sflush_r+0x78>
 800380a:	6560      	str	r0, [r4, #84]	@ 0x54
 800380c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800380e:	602f      	str	r7, [r5, #0]
 8003810:	b1b9      	cbz	r1, 8003842 <__sflush_r+0xae>
 8003812:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003816:	4299      	cmp	r1, r3
 8003818:	d002      	beq.n	8003820 <__sflush_r+0x8c>
 800381a:	4628      	mov	r0, r5
 800381c:	f7ff fbd6 	bl	8002fcc <_free_r>
 8003820:	2300      	movs	r3, #0
 8003822:	6363      	str	r3, [r4, #52]	@ 0x34
 8003824:	e00d      	b.n	8003842 <__sflush_r+0xae>
 8003826:	2301      	movs	r3, #1
 8003828:	4628      	mov	r0, r5
 800382a:	47b0      	blx	r6
 800382c:	4602      	mov	r2, r0
 800382e:	1c50      	adds	r0, r2, #1
 8003830:	d1c9      	bne.n	80037c6 <__sflush_r+0x32>
 8003832:	682b      	ldr	r3, [r5, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0c6      	beq.n	80037c6 <__sflush_r+0x32>
 8003838:	2b1d      	cmp	r3, #29
 800383a:	d001      	beq.n	8003840 <__sflush_r+0xac>
 800383c:	2b16      	cmp	r3, #22
 800383e:	d11e      	bne.n	800387e <__sflush_r+0xea>
 8003840:	602f      	str	r7, [r5, #0]
 8003842:	2000      	movs	r0, #0
 8003844:	e022      	b.n	800388c <__sflush_r+0xf8>
 8003846:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800384a:	b21b      	sxth	r3, r3
 800384c:	e01b      	b.n	8003886 <__sflush_r+0xf2>
 800384e:	690f      	ldr	r7, [r1, #16]
 8003850:	2f00      	cmp	r7, #0
 8003852:	d0f6      	beq.n	8003842 <__sflush_r+0xae>
 8003854:	0793      	lsls	r3, r2, #30
 8003856:	680e      	ldr	r6, [r1, #0]
 8003858:	bf08      	it	eq
 800385a:	694b      	ldreq	r3, [r1, #20]
 800385c:	600f      	str	r7, [r1, #0]
 800385e:	bf18      	it	ne
 8003860:	2300      	movne	r3, #0
 8003862:	eba6 0807 	sub.w	r8, r6, r7
 8003866:	608b      	str	r3, [r1, #8]
 8003868:	f1b8 0f00 	cmp.w	r8, #0
 800386c:	dde9      	ble.n	8003842 <__sflush_r+0xae>
 800386e:	6a21      	ldr	r1, [r4, #32]
 8003870:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003872:	4643      	mov	r3, r8
 8003874:	463a      	mov	r2, r7
 8003876:	4628      	mov	r0, r5
 8003878:	47b0      	blx	r6
 800387a:	2800      	cmp	r0, #0
 800387c:	dc08      	bgt.n	8003890 <__sflush_r+0xfc>
 800387e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003886:	81a3      	strh	r3, [r4, #12]
 8003888:	f04f 30ff 	mov.w	r0, #4294967295
 800388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003890:	4407      	add	r7, r0
 8003892:	eba8 0800 	sub.w	r8, r8, r0
 8003896:	e7e7      	b.n	8003868 <__sflush_r+0xd4>
 8003898:	20400001 	.word	0x20400001

0800389c <_fflush_r>:
 800389c:	b538      	push	{r3, r4, r5, lr}
 800389e:	690b      	ldr	r3, [r1, #16]
 80038a0:	4605      	mov	r5, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	b913      	cbnz	r3, 80038ac <_fflush_r+0x10>
 80038a6:	2500      	movs	r5, #0
 80038a8:	4628      	mov	r0, r5
 80038aa:	bd38      	pop	{r3, r4, r5, pc}
 80038ac:	b118      	cbz	r0, 80038b6 <_fflush_r+0x1a>
 80038ae:	6a03      	ldr	r3, [r0, #32]
 80038b0:	b90b      	cbnz	r3, 80038b6 <_fflush_r+0x1a>
 80038b2:	f7ff fa55 	bl	8002d60 <__sinit>
 80038b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f3      	beq.n	80038a6 <_fflush_r+0xa>
 80038be:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038c0:	07d0      	lsls	r0, r2, #31
 80038c2:	d404      	bmi.n	80038ce <_fflush_r+0x32>
 80038c4:	0599      	lsls	r1, r3, #22
 80038c6:	d402      	bmi.n	80038ce <_fflush_r+0x32>
 80038c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ca:	f7ff fb5e 	bl	8002f8a <__retarget_lock_acquire_recursive>
 80038ce:	4628      	mov	r0, r5
 80038d0:	4621      	mov	r1, r4
 80038d2:	f7ff ff5f 	bl	8003794 <__sflush_r>
 80038d6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038d8:	07da      	lsls	r2, r3, #31
 80038da:	4605      	mov	r5, r0
 80038dc:	d4e4      	bmi.n	80038a8 <_fflush_r+0xc>
 80038de:	89a3      	ldrh	r3, [r4, #12]
 80038e0:	059b      	lsls	r3, r3, #22
 80038e2:	d4e1      	bmi.n	80038a8 <_fflush_r+0xc>
 80038e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038e6:	f7ff fb51 	bl	8002f8c <__retarget_lock_release_recursive>
 80038ea:	e7dd      	b.n	80038a8 <_fflush_r+0xc>

080038ec <fiprintf>:
 80038ec:	b40e      	push	{r1, r2, r3}
 80038ee:	b503      	push	{r0, r1, lr}
 80038f0:	4601      	mov	r1, r0
 80038f2:	ab03      	add	r3, sp, #12
 80038f4:	4805      	ldr	r0, [pc, #20]	@ (800390c <fiprintf+0x20>)
 80038f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80038fa:	6800      	ldr	r0, [r0, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	f000 f89d 	bl	8003a3c <_vfiprintf_r>
 8003902:	b002      	add	sp, #8
 8003904:	f85d eb04 	ldr.w	lr, [sp], #4
 8003908:	b003      	add	sp, #12
 800390a:	4770      	bx	lr
 800390c:	20000024 	.word	0x20000024

08003910 <memmove>:
 8003910:	4288      	cmp	r0, r1
 8003912:	b510      	push	{r4, lr}
 8003914:	eb01 0402 	add.w	r4, r1, r2
 8003918:	d902      	bls.n	8003920 <memmove+0x10>
 800391a:	4284      	cmp	r4, r0
 800391c:	4623      	mov	r3, r4
 800391e:	d807      	bhi.n	8003930 <memmove+0x20>
 8003920:	1e43      	subs	r3, r0, #1
 8003922:	42a1      	cmp	r1, r4
 8003924:	d008      	beq.n	8003938 <memmove+0x28>
 8003926:	f811 2b01 	ldrb.w	r2, [r1], #1
 800392a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800392e:	e7f8      	b.n	8003922 <memmove+0x12>
 8003930:	4402      	add	r2, r0
 8003932:	4601      	mov	r1, r0
 8003934:	428a      	cmp	r2, r1
 8003936:	d100      	bne.n	800393a <memmove+0x2a>
 8003938:	bd10      	pop	{r4, pc}
 800393a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800393e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003942:	e7f7      	b.n	8003934 <memmove+0x24>

08003944 <_sbrk_r>:
 8003944:	b538      	push	{r3, r4, r5, lr}
 8003946:	4d06      	ldr	r5, [pc, #24]	@ (8003960 <_sbrk_r+0x1c>)
 8003948:	2300      	movs	r3, #0
 800394a:	4604      	mov	r4, r0
 800394c:	4608      	mov	r0, r1
 800394e:	602b      	str	r3, [r5, #0]
 8003950:	f7ff f8b6 	bl	8002ac0 <_sbrk>
 8003954:	1c43      	adds	r3, r0, #1
 8003956:	d102      	bne.n	800395e <_sbrk_r+0x1a>
 8003958:	682b      	ldr	r3, [r5, #0]
 800395a:	b103      	cbz	r3, 800395e <_sbrk_r+0x1a>
 800395c:	6023      	str	r3, [r4, #0]
 800395e:	bd38      	pop	{r3, r4, r5, pc}
 8003960:	20000344 	.word	0x20000344

08003964 <memcpy>:
 8003964:	440a      	add	r2, r1
 8003966:	4291      	cmp	r1, r2
 8003968:	f100 33ff 	add.w	r3, r0, #4294967295
 800396c:	d100      	bne.n	8003970 <memcpy+0xc>
 800396e:	4770      	bx	lr
 8003970:	b510      	push	{r4, lr}
 8003972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800397a:	4291      	cmp	r1, r2
 800397c:	d1f9      	bne.n	8003972 <memcpy+0xe>
 800397e:	bd10      	pop	{r4, pc}

08003980 <abort>:
 8003980:	b508      	push	{r3, lr}
 8003982:	2006      	movs	r0, #6
 8003984:	f000 fa2e 	bl	8003de4 <raise>
 8003988:	2001      	movs	r0, #1
 800398a:	f7ff f820 	bl	80029ce <_exit>

0800398e <_realloc_r>:
 800398e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003992:	4607      	mov	r7, r0
 8003994:	4614      	mov	r4, r2
 8003996:	460d      	mov	r5, r1
 8003998:	b921      	cbnz	r1, 80039a4 <_realloc_r+0x16>
 800399a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800399e:	4611      	mov	r1, r2
 80039a0:	f7ff bb88 	b.w	80030b4 <_malloc_r>
 80039a4:	b92a      	cbnz	r2, 80039b2 <_realloc_r+0x24>
 80039a6:	f7ff fb11 	bl	8002fcc <_free_r>
 80039aa:	4625      	mov	r5, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039b2:	f000 fa33 	bl	8003e1c <_malloc_usable_size_r>
 80039b6:	4284      	cmp	r4, r0
 80039b8:	4606      	mov	r6, r0
 80039ba:	d802      	bhi.n	80039c2 <_realloc_r+0x34>
 80039bc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80039c0:	d8f4      	bhi.n	80039ac <_realloc_r+0x1e>
 80039c2:	4621      	mov	r1, r4
 80039c4:	4638      	mov	r0, r7
 80039c6:	f7ff fb75 	bl	80030b4 <_malloc_r>
 80039ca:	4680      	mov	r8, r0
 80039cc:	b908      	cbnz	r0, 80039d2 <_realloc_r+0x44>
 80039ce:	4645      	mov	r5, r8
 80039d0:	e7ec      	b.n	80039ac <_realloc_r+0x1e>
 80039d2:	42b4      	cmp	r4, r6
 80039d4:	4622      	mov	r2, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	bf28      	it	cs
 80039da:	4632      	movcs	r2, r6
 80039dc:	f7ff ffc2 	bl	8003964 <memcpy>
 80039e0:	4629      	mov	r1, r5
 80039e2:	4638      	mov	r0, r7
 80039e4:	f7ff faf2 	bl	8002fcc <_free_r>
 80039e8:	e7f1      	b.n	80039ce <_realloc_r+0x40>

080039ea <__sfputc_r>:
 80039ea:	6893      	ldr	r3, [r2, #8]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	b410      	push	{r4}
 80039f2:	6093      	str	r3, [r2, #8]
 80039f4:	da08      	bge.n	8003a08 <__sfputc_r+0x1e>
 80039f6:	6994      	ldr	r4, [r2, #24]
 80039f8:	42a3      	cmp	r3, r4
 80039fa:	db01      	blt.n	8003a00 <__sfputc_r+0x16>
 80039fc:	290a      	cmp	r1, #10
 80039fe:	d103      	bne.n	8003a08 <__sfputc_r+0x1e>
 8003a00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a04:	f000 b932 	b.w	8003c6c <__swbuf_r>
 8003a08:	6813      	ldr	r3, [r2, #0]
 8003a0a:	1c58      	adds	r0, r3, #1
 8003a0c:	6010      	str	r0, [r2, #0]
 8003a0e:	7019      	strb	r1, [r3, #0]
 8003a10:	4608      	mov	r0, r1
 8003a12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <__sfputs_r>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	4606      	mov	r6, r0
 8003a1c:	460f      	mov	r7, r1
 8003a1e:	4614      	mov	r4, r2
 8003a20:	18d5      	adds	r5, r2, r3
 8003a22:	42ac      	cmp	r4, r5
 8003a24:	d101      	bne.n	8003a2a <__sfputs_r+0x12>
 8003a26:	2000      	movs	r0, #0
 8003a28:	e007      	b.n	8003a3a <__sfputs_r+0x22>
 8003a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a2e:	463a      	mov	r2, r7
 8003a30:	4630      	mov	r0, r6
 8003a32:	f7ff ffda 	bl	80039ea <__sfputc_r>
 8003a36:	1c43      	adds	r3, r0, #1
 8003a38:	d1f3      	bne.n	8003a22 <__sfputs_r+0xa>
 8003a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a3c <_vfiprintf_r>:
 8003a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a40:	460d      	mov	r5, r1
 8003a42:	b09d      	sub	sp, #116	@ 0x74
 8003a44:	4614      	mov	r4, r2
 8003a46:	4698      	mov	r8, r3
 8003a48:	4606      	mov	r6, r0
 8003a4a:	b118      	cbz	r0, 8003a54 <_vfiprintf_r+0x18>
 8003a4c:	6a03      	ldr	r3, [r0, #32]
 8003a4e:	b90b      	cbnz	r3, 8003a54 <_vfiprintf_r+0x18>
 8003a50:	f7ff f986 	bl	8002d60 <__sinit>
 8003a54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a56:	07d9      	lsls	r1, r3, #31
 8003a58:	d405      	bmi.n	8003a66 <_vfiprintf_r+0x2a>
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	059a      	lsls	r2, r3, #22
 8003a5e:	d402      	bmi.n	8003a66 <_vfiprintf_r+0x2a>
 8003a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a62:	f7ff fa92 	bl	8002f8a <__retarget_lock_acquire_recursive>
 8003a66:	89ab      	ldrh	r3, [r5, #12]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	d501      	bpl.n	8003a70 <_vfiprintf_r+0x34>
 8003a6c:	692b      	ldr	r3, [r5, #16]
 8003a6e:	b99b      	cbnz	r3, 8003a98 <_vfiprintf_r+0x5c>
 8003a70:	4629      	mov	r1, r5
 8003a72:	4630      	mov	r0, r6
 8003a74:	f000 f938 	bl	8003ce8 <__swsetup_r>
 8003a78:	b170      	cbz	r0, 8003a98 <_vfiprintf_r+0x5c>
 8003a7a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a7c:	07dc      	lsls	r4, r3, #31
 8003a7e:	d504      	bpl.n	8003a8a <_vfiprintf_r+0x4e>
 8003a80:	f04f 30ff 	mov.w	r0, #4294967295
 8003a84:	b01d      	add	sp, #116	@ 0x74
 8003a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a8a:	89ab      	ldrh	r3, [r5, #12]
 8003a8c:	0598      	lsls	r0, r3, #22
 8003a8e:	d4f7      	bmi.n	8003a80 <_vfiprintf_r+0x44>
 8003a90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a92:	f7ff fa7b 	bl	8002f8c <__retarget_lock_release_recursive>
 8003a96:	e7f3      	b.n	8003a80 <_vfiprintf_r+0x44>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003aa2:	f8cd 800c 	str.w	r8, [sp, #12]
 8003aa6:	2330      	movs	r3, #48	@ 0x30
 8003aa8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8003c58 <_vfiprintf_r+0x21c>
 8003aac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ab0:	f04f 0901 	mov.w	r9, #1
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	469a      	mov	sl, r3
 8003ab8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003abc:	b10a      	cbz	r2, 8003ac2 <_vfiprintf_r+0x86>
 8003abe:	2a25      	cmp	r2, #37	@ 0x25
 8003ac0:	d1f9      	bne.n	8003ab6 <_vfiprintf_r+0x7a>
 8003ac2:	ebba 0b04 	subs.w	fp, sl, r4
 8003ac6:	d00b      	beq.n	8003ae0 <_vfiprintf_r+0xa4>
 8003ac8:	465b      	mov	r3, fp
 8003aca:	4622      	mov	r2, r4
 8003acc:	4629      	mov	r1, r5
 8003ace:	4630      	mov	r0, r6
 8003ad0:	f7ff ffa2 	bl	8003a18 <__sfputs_r>
 8003ad4:	3001      	adds	r0, #1
 8003ad6:	f000 80a7 	beq.w	8003c28 <_vfiprintf_r+0x1ec>
 8003ada:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003adc:	445a      	add	r2, fp
 8003ade:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ae0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	f000 809f 	beq.w	8003c28 <_vfiprintf_r+0x1ec>
 8003aea:	2300      	movs	r3, #0
 8003aec:	f04f 32ff 	mov.w	r2, #4294967295
 8003af0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003af4:	f10a 0a01 	add.w	sl, sl, #1
 8003af8:	9304      	str	r3, [sp, #16]
 8003afa:	9307      	str	r3, [sp, #28]
 8003afc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b00:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b02:	4654      	mov	r4, sl
 8003b04:	2205      	movs	r2, #5
 8003b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b0a:	4853      	ldr	r0, [pc, #332]	@ (8003c58 <_vfiprintf_r+0x21c>)
 8003b0c:	f7fc fb70 	bl	80001f0 <memchr>
 8003b10:	9a04      	ldr	r2, [sp, #16]
 8003b12:	b9d8      	cbnz	r0, 8003b4c <_vfiprintf_r+0x110>
 8003b14:	06d1      	lsls	r1, r2, #27
 8003b16:	bf44      	itt	mi
 8003b18:	2320      	movmi	r3, #32
 8003b1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b1e:	0713      	lsls	r3, r2, #28
 8003b20:	bf44      	itt	mi
 8003b22:	232b      	movmi	r3, #43	@ 0x2b
 8003b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b28:	f89a 3000 	ldrb.w	r3, [sl]
 8003b2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b2e:	d015      	beq.n	8003b5c <_vfiprintf_r+0x120>
 8003b30:	9a07      	ldr	r2, [sp, #28]
 8003b32:	4654      	mov	r4, sl
 8003b34:	2000      	movs	r0, #0
 8003b36:	f04f 0c0a 	mov.w	ip, #10
 8003b3a:	4621      	mov	r1, r4
 8003b3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b40:	3b30      	subs	r3, #48	@ 0x30
 8003b42:	2b09      	cmp	r3, #9
 8003b44:	d94b      	bls.n	8003bde <_vfiprintf_r+0x1a2>
 8003b46:	b1b0      	cbz	r0, 8003b76 <_vfiprintf_r+0x13a>
 8003b48:	9207      	str	r2, [sp, #28]
 8003b4a:	e014      	b.n	8003b76 <_vfiprintf_r+0x13a>
 8003b4c:	eba0 0308 	sub.w	r3, r0, r8
 8003b50:	fa09 f303 	lsl.w	r3, r9, r3
 8003b54:	4313      	orrs	r3, r2
 8003b56:	9304      	str	r3, [sp, #16]
 8003b58:	46a2      	mov	sl, r4
 8003b5a:	e7d2      	b.n	8003b02 <_vfiprintf_r+0xc6>
 8003b5c:	9b03      	ldr	r3, [sp, #12]
 8003b5e:	1d19      	adds	r1, r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	9103      	str	r1, [sp, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	bfbb      	ittet	lt
 8003b68:	425b      	neglt	r3, r3
 8003b6a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b6e:	9307      	strge	r3, [sp, #28]
 8003b70:	9307      	strlt	r3, [sp, #28]
 8003b72:	bfb8      	it	lt
 8003b74:	9204      	strlt	r2, [sp, #16]
 8003b76:	7823      	ldrb	r3, [r4, #0]
 8003b78:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b7a:	d10a      	bne.n	8003b92 <_vfiprintf_r+0x156>
 8003b7c:	7863      	ldrb	r3, [r4, #1]
 8003b7e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b80:	d132      	bne.n	8003be8 <_vfiprintf_r+0x1ac>
 8003b82:	9b03      	ldr	r3, [sp, #12]
 8003b84:	1d1a      	adds	r2, r3, #4
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	9203      	str	r2, [sp, #12]
 8003b8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b8e:	3402      	adds	r4, #2
 8003b90:	9305      	str	r3, [sp, #20]
 8003b92:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003c68 <_vfiprintf_r+0x22c>
 8003b96:	7821      	ldrb	r1, [r4, #0]
 8003b98:	2203      	movs	r2, #3
 8003b9a:	4650      	mov	r0, sl
 8003b9c:	f7fc fb28 	bl	80001f0 <memchr>
 8003ba0:	b138      	cbz	r0, 8003bb2 <_vfiprintf_r+0x176>
 8003ba2:	9b04      	ldr	r3, [sp, #16]
 8003ba4:	eba0 000a 	sub.w	r0, r0, sl
 8003ba8:	2240      	movs	r2, #64	@ 0x40
 8003baa:	4082      	lsls	r2, r0
 8003bac:	4313      	orrs	r3, r2
 8003bae:	3401      	adds	r4, #1
 8003bb0:	9304      	str	r3, [sp, #16]
 8003bb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bb6:	4829      	ldr	r0, [pc, #164]	@ (8003c5c <_vfiprintf_r+0x220>)
 8003bb8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bbc:	2206      	movs	r2, #6
 8003bbe:	f7fc fb17 	bl	80001f0 <memchr>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	d03f      	beq.n	8003c46 <_vfiprintf_r+0x20a>
 8003bc6:	4b26      	ldr	r3, [pc, #152]	@ (8003c60 <_vfiprintf_r+0x224>)
 8003bc8:	bb1b      	cbnz	r3, 8003c12 <_vfiprintf_r+0x1d6>
 8003bca:	9b03      	ldr	r3, [sp, #12]
 8003bcc:	3307      	adds	r3, #7
 8003bce:	f023 0307 	bic.w	r3, r3, #7
 8003bd2:	3308      	adds	r3, #8
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003bd8:	443b      	add	r3, r7
 8003bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bdc:	e76a      	b.n	8003ab4 <_vfiprintf_r+0x78>
 8003bde:	fb0c 3202 	mla	r2, ip, r2, r3
 8003be2:	460c      	mov	r4, r1
 8003be4:	2001      	movs	r0, #1
 8003be6:	e7a8      	b.n	8003b3a <_vfiprintf_r+0xfe>
 8003be8:	2300      	movs	r3, #0
 8003bea:	3401      	adds	r4, #1
 8003bec:	9305      	str	r3, [sp, #20]
 8003bee:	4619      	mov	r1, r3
 8003bf0:	f04f 0c0a 	mov.w	ip, #10
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bfa:	3a30      	subs	r2, #48	@ 0x30
 8003bfc:	2a09      	cmp	r2, #9
 8003bfe:	d903      	bls.n	8003c08 <_vfiprintf_r+0x1cc>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0c6      	beq.n	8003b92 <_vfiprintf_r+0x156>
 8003c04:	9105      	str	r1, [sp, #20]
 8003c06:	e7c4      	b.n	8003b92 <_vfiprintf_r+0x156>
 8003c08:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c0c:	4604      	mov	r4, r0
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e7f0      	b.n	8003bf4 <_vfiprintf_r+0x1b8>
 8003c12:	ab03      	add	r3, sp, #12
 8003c14:	9300      	str	r3, [sp, #0]
 8003c16:	462a      	mov	r2, r5
 8003c18:	4b12      	ldr	r3, [pc, #72]	@ (8003c64 <_vfiprintf_r+0x228>)
 8003c1a:	a904      	add	r1, sp, #16
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	f3af 8000 	nop.w
 8003c22:	4607      	mov	r7, r0
 8003c24:	1c78      	adds	r0, r7, #1
 8003c26:	d1d6      	bne.n	8003bd6 <_vfiprintf_r+0x19a>
 8003c28:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003c2a:	07d9      	lsls	r1, r3, #31
 8003c2c:	d405      	bmi.n	8003c3a <_vfiprintf_r+0x1fe>
 8003c2e:	89ab      	ldrh	r3, [r5, #12]
 8003c30:	059a      	lsls	r2, r3, #22
 8003c32:	d402      	bmi.n	8003c3a <_vfiprintf_r+0x1fe>
 8003c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c36:	f7ff f9a9 	bl	8002f8c <__retarget_lock_release_recursive>
 8003c3a:	89ab      	ldrh	r3, [r5, #12]
 8003c3c:	065b      	lsls	r3, r3, #25
 8003c3e:	f53f af1f 	bmi.w	8003a80 <_vfiprintf_r+0x44>
 8003c42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c44:	e71e      	b.n	8003a84 <_vfiprintf_r+0x48>
 8003c46:	ab03      	add	r3, sp, #12
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	462a      	mov	r2, r5
 8003c4c:	4b05      	ldr	r3, [pc, #20]	@ (8003c64 <_vfiprintf_r+0x228>)
 8003c4e:	a904      	add	r1, sp, #16
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff fc81 	bl	8003558 <_printf_i>
 8003c56:	e7e4      	b.n	8003c22 <_vfiprintf_r+0x1e6>
 8003c58:	080044b2 	.word	0x080044b2
 8003c5c:	080044bc 	.word	0x080044bc
 8003c60:	00000000 	.word	0x00000000
 8003c64:	08003a19 	.word	0x08003a19
 8003c68:	080044b8 	.word	0x080044b8

08003c6c <__swbuf_r>:
 8003c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c6e:	460e      	mov	r6, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	4605      	mov	r5, r0
 8003c74:	b118      	cbz	r0, 8003c7e <__swbuf_r+0x12>
 8003c76:	6a03      	ldr	r3, [r0, #32]
 8003c78:	b90b      	cbnz	r3, 8003c7e <__swbuf_r+0x12>
 8003c7a:	f7ff f871 	bl	8002d60 <__sinit>
 8003c7e:	69a3      	ldr	r3, [r4, #24]
 8003c80:	60a3      	str	r3, [r4, #8]
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	071a      	lsls	r2, r3, #28
 8003c86:	d501      	bpl.n	8003c8c <__swbuf_r+0x20>
 8003c88:	6923      	ldr	r3, [r4, #16]
 8003c8a:	b943      	cbnz	r3, 8003c9e <__swbuf_r+0x32>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4628      	mov	r0, r5
 8003c90:	f000 f82a 	bl	8003ce8 <__swsetup_r>
 8003c94:	b118      	cbz	r0, 8003c9e <__swbuf_r+0x32>
 8003c96:	f04f 37ff 	mov.w	r7, #4294967295
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	6922      	ldr	r2, [r4, #16]
 8003ca2:	1a98      	subs	r0, r3, r2
 8003ca4:	6963      	ldr	r3, [r4, #20]
 8003ca6:	b2f6      	uxtb	r6, r6
 8003ca8:	4283      	cmp	r3, r0
 8003caa:	4637      	mov	r7, r6
 8003cac:	dc05      	bgt.n	8003cba <__swbuf_r+0x4e>
 8003cae:	4621      	mov	r1, r4
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	f7ff fdf3 	bl	800389c <_fflush_r>
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1ed      	bne.n	8003c96 <__swbuf_r+0x2a>
 8003cba:	68a3      	ldr	r3, [r4, #8]
 8003cbc:	3b01      	subs	r3, #1
 8003cbe:	60a3      	str	r3, [r4, #8]
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	1c5a      	adds	r2, r3, #1
 8003cc4:	6022      	str	r2, [r4, #0]
 8003cc6:	701e      	strb	r6, [r3, #0]
 8003cc8:	6962      	ldr	r2, [r4, #20]
 8003cca:	1c43      	adds	r3, r0, #1
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d004      	beq.n	8003cda <__swbuf_r+0x6e>
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	07db      	lsls	r3, r3, #31
 8003cd4:	d5e1      	bpl.n	8003c9a <__swbuf_r+0x2e>
 8003cd6:	2e0a      	cmp	r6, #10
 8003cd8:	d1df      	bne.n	8003c9a <__swbuf_r+0x2e>
 8003cda:	4621      	mov	r1, r4
 8003cdc:	4628      	mov	r0, r5
 8003cde:	f7ff fddd 	bl	800389c <_fflush_r>
 8003ce2:	2800      	cmp	r0, #0
 8003ce4:	d0d9      	beq.n	8003c9a <__swbuf_r+0x2e>
 8003ce6:	e7d6      	b.n	8003c96 <__swbuf_r+0x2a>

08003ce8 <__swsetup_r>:
 8003ce8:	b538      	push	{r3, r4, r5, lr}
 8003cea:	4b29      	ldr	r3, [pc, #164]	@ (8003d90 <__swsetup_r+0xa8>)
 8003cec:	4605      	mov	r5, r0
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	460c      	mov	r4, r1
 8003cf2:	b118      	cbz	r0, 8003cfc <__swsetup_r+0x14>
 8003cf4:	6a03      	ldr	r3, [r0, #32]
 8003cf6:	b90b      	cbnz	r3, 8003cfc <__swsetup_r+0x14>
 8003cf8:	f7ff f832 	bl	8002d60 <__sinit>
 8003cfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d00:	0719      	lsls	r1, r3, #28
 8003d02:	d422      	bmi.n	8003d4a <__swsetup_r+0x62>
 8003d04:	06da      	lsls	r2, r3, #27
 8003d06:	d407      	bmi.n	8003d18 <__swsetup_r+0x30>
 8003d08:	2209      	movs	r2, #9
 8003d0a:	602a      	str	r2, [r5, #0]
 8003d0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d10:	81a3      	strh	r3, [r4, #12]
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295
 8003d16:	e033      	b.n	8003d80 <__swsetup_r+0x98>
 8003d18:	0758      	lsls	r0, r3, #29
 8003d1a:	d512      	bpl.n	8003d42 <__swsetup_r+0x5a>
 8003d1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d1e:	b141      	cbz	r1, 8003d32 <__swsetup_r+0x4a>
 8003d20:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d002      	beq.n	8003d2e <__swsetup_r+0x46>
 8003d28:	4628      	mov	r0, r5
 8003d2a:	f7ff f94f 	bl	8002fcc <_free_r>
 8003d2e:	2300      	movs	r3, #0
 8003d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8003d32:	89a3      	ldrh	r3, [r4, #12]
 8003d34:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003d38:	81a3      	strh	r3, [r4, #12]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	6063      	str	r3, [r4, #4]
 8003d3e:	6923      	ldr	r3, [r4, #16]
 8003d40:	6023      	str	r3, [r4, #0]
 8003d42:	89a3      	ldrh	r3, [r4, #12]
 8003d44:	f043 0308 	orr.w	r3, r3, #8
 8003d48:	81a3      	strh	r3, [r4, #12]
 8003d4a:	6923      	ldr	r3, [r4, #16]
 8003d4c:	b94b      	cbnz	r3, 8003d62 <__swsetup_r+0x7a>
 8003d4e:	89a3      	ldrh	r3, [r4, #12]
 8003d50:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d58:	d003      	beq.n	8003d62 <__swsetup_r+0x7a>
 8003d5a:	4621      	mov	r1, r4
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f000 f88b 	bl	8003e78 <__smakebuf_r>
 8003d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d66:	f013 0201 	ands.w	r2, r3, #1
 8003d6a:	d00a      	beq.n	8003d82 <__swsetup_r+0x9a>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	60a2      	str	r2, [r4, #8]
 8003d70:	6962      	ldr	r2, [r4, #20]
 8003d72:	4252      	negs	r2, r2
 8003d74:	61a2      	str	r2, [r4, #24]
 8003d76:	6922      	ldr	r2, [r4, #16]
 8003d78:	b942      	cbnz	r2, 8003d8c <__swsetup_r+0xa4>
 8003d7a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003d7e:	d1c5      	bne.n	8003d0c <__swsetup_r+0x24>
 8003d80:	bd38      	pop	{r3, r4, r5, pc}
 8003d82:	0799      	lsls	r1, r3, #30
 8003d84:	bf58      	it	pl
 8003d86:	6962      	ldrpl	r2, [r4, #20]
 8003d88:	60a2      	str	r2, [r4, #8]
 8003d8a:	e7f4      	b.n	8003d76 <__swsetup_r+0x8e>
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e7f7      	b.n	8003d80 <__swsetup_r+0x98>
 8003d90:	20000024 	.word	0x20000024

08003d94 <_raise_r>:
 8003d94:	291f      	cmp	r1, #31
 8003d96:	b538      	push	{r3, r4, r5, lr}
 8003d98:	4605      	mov	r5, r0
 8003d9a:	460c      	mov	r4, r1
 8003d9c:	d904      	bls.n	8003da8 <_raise_r+0x14>
 8003d9e:	2316      	movs	r3, #22
 8003da0:	6003      	str	r3, [r0, #0]
 8003da2:	f04f 30ff 	mov.w	r0, #4294967295
 8003da6:	bd38      	pop	{r3, r4, r5, pc}
 8003da8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003daa:	b112      	cbz	r2, 8003db2 <_raise_r+0x1e>
 8003dac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003db0:	b94b      	cbnz	r3, 8003dc6 <_raise_r+0x32>
 8003db2:	4628      	mov	r0, r5
 8003db4:	f000 f830 	bl	8003e18 <_getpid_r>
 8003db8:	4622      	mov	r2, r4
 8003dba:	4601      	mov	r1, r0
 8003dbc:	4628      	mov	r0, r5
 8003dbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003dc2:	f000 b817 	b.w	8003df4 <_kill_r>
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d00a      	beq.n	8003de0 <_raise_r+0x4c>
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	d103      	bne.n	8003dd6 <_raise_r+0x42>
 8003dce:	2316      	movs	r3, #22
 8003dd0:	6003      	str	r3, [r0, #0]
 8003dd2:	2001      	movs	r0, #1
 8003dd4:	e7e7      	b.n	8003da6 <_raise_r+0x12>
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8003ddc:	4620      	mov	r0, r4
 8003dde:	4798      	blx	r3
 8003de0:	2000      	movs	r0, #0
 8003de2:	e7e0      	b.n	8003da6 <_raise_r+0x12>

08003de4 <raise>:
 8003de4:	4b02      	ldr	r3, [pc, #8]	@ (8003df0 <raise+0xc>)
 8003de6:	4601      	mov	r1, r0
 8003de8:	6818      	ldr	r0, [r3, #0]
 8003dea:	f7ff bfd3 	b.w	8003d94 <_raise_r>
 8003dee:	bf00      	nop
 8003df0:	20000024 	.word	0x20000024

08003df4 <_kill_r>:
 8003df4:	b538      	push	{r3, r4, r5, lr}
 8003df6:	4d07      	ldr	r5, [pc, #28]	@ (8003e14 <_kill_r+0x20>)
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	602b      	str	r3, [r5, #0]
 8003e02:	f7fe fdd4 	bl	80029ae <_kill>
 8003e06:	1c43      	adds	r3, r0, #1
 8003e08:	d102      	bne.n	8003e10 <_kill_r+0x1c>
 8003e0a:	682b      	ldr	r3, [r5, #0]
 8003e0c:	b103      	cbz	r3, 8003e10 <_kill_r+0x1c>
 8003e0e:	6023      	str	r3, [r4, #0]
 8003e10:	bd38      	pop	{r3, r4, r5, pc}
 8003e12:	bf00      	nop
 8003e14:	20000344 	.word	0x20000344

08003e18 <_getpid_r>:
 8003e18:	f7fe bdc1 	b.w	800299e <_getpid>

08003e1c <_malloc_usable_size_r>:
 8003e1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e20:	1f18      	subs	r0, r3, #4
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	bfbc      	itt	lt
 8003e26:	580b      	ldrlt	r3, [r1, r0]
 8003e28:	18c0      	addlt	r0, r0, r3
 8003e2a:	4770      	bx	lr

08003e2c <__swhatbuf_r>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	460c      	mov	r4, r1
 8003e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e34:	2900      	cmp	r1, #0
 8003e36:	b096      	sub	sp, #88	@ 0x58
 8003e38:	4615      	mov	r5, r2
 8003e3a:	461e      	mov	r6, r3
 8003e3c:	da0d      	bge.n	8003e5a <__swhatbuf_r+0x2e>
 8003e3e:	89a3      	ldrh	r3, [r4, #12]
 8003e40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003e44:	f04f 0100 	mov.w	r1, #0
 8003e48:	bf14      	ite	ne
 8003e4a:	2340      	movne	r3, #64	@ 0x40
 8003e4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003e50:	2000      	movs	r0, #0
 8003e52:	6031      	str	r1, [r6, #0]
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	b016      	add	sp, #88	@ 0x58
 8003e58:	bd70      	pop	{r4, r5, r6, pc}
 8003e5a:	466a      	mov	r2, sp
 8003e5c:	f000 f848 	bl	8003ef0 <_fstat_r>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	dbec      	blt.n	8003e3e <__swhatbuf_r+0x12>
 8003e64:	9901      	ldr	r1, [sp, #4]
 8003e66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003e6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003e6e:	4259      	negs	r1, r3
 8003e70:	4159      	adcs	r1, r3
 8003e72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e76:	e7eb      	b.n	8003e50 <__swhatbuf_r+0x24>

08003e78 <__smakebuf_r>:
 8003e78:	898b      	ldrh	r3, [r1, #12]
 8003e7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e7c:	079d      	lsls	r5, r3, #30
 8003e7e:	4606      	mov	r6, r0
 8003e80:	460c      	mov	r4, r1
 8003e82:	d507      	bpl.n	8003e94 <__smakebuf_r+0x1c>
 8003e84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003e88:	6023      	str	r3, [r4, #0]
 8003e8a:	6123      	str	r3, [r4, #16]
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	6163      	str	r3, [r4, #20]
 8003e90:	b003      	add	sp, #12
 8003e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e94:	ab01      	add	r3, sp, #4
 8003e96:	466a      	mov	r2, sp
 8003e98:	f7ff ffc8 	bl	8003e2c <__swhatbuf_r>
 8003e9c:	9f00      	ldr	r7, [sp, #0]
 8003e9e:	4605      	mov	r5, r0
 8003ea0:	4639      	mov	r1, r7
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f7ff f906 	bl	80030b4 <_malloc_r>
 8003ea8:	b948      	cbnz	r0, 8003ebe <__smakebuf_r+0x46>
 8003eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003eae:	059a      	lsls	r2, r3, #22
 8003eb0:	d4ee      	bmi.n	8003e90 <__smakebuf_r+0x18>
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	f043 0302 	orr.w	r3, r3, #2
 8003eba:	81a3      	strh	r3, [r4, #12]
 8003ebc:	e7e2      	b.n	8003e84 <__smakebuf_r+0xc>
 8003ebe:	89a3      	ldrh	r3, [r4, #12]
 8003ec0:	6020      	str	r0, [r4, #0]
 8003ec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ec6:	81a3      	strh	r3, [r4, #12]
 8003ec8:	9b01      	ldr	r3, [sp, #4]
 8003eca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ece:	b15b      	cbz	r3, 8003ee8 <__smakebuf_r+0x70>
 8003ed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	f000 f81d 	bl	8003f14 <_isatty_r>
 8003eda:	b128      	cbz	r0, 8003ee8 <__smakebuf_r+0x70>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	f023 0303 	bic.w	r3, r3, #3
 8003ee2:	f043 0301 	orr.w	r3, r3, #1
 8003ee6:	81a3      	strh	r3, [r4, #12]
 8003ee8:	89a3      	ldrh	r3, [r4, #12]
 8003eea:	431d      	orrs	r5, r3
 8003eec:	81a5      	strh	r5, [r4, #12]
 8003eee:	e7cf      	b.n	8003e90 <__smakebuf_r+0x18>

08003ef0 <_fstat_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d07      	ldr	r5, [pc, #28]	@ (8003f10 <_fstat_r+0x20>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	4611      	mov	r1, r2
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	f7fe fdb6 	bl	8002a6e <_fstat>
 8003f02:	1c43      	adds	r3, r0, #1
 8003f04:	d102      	bne.n	8003f0c <_fstat_r+0x1c>
 8003f06:	682b      	ldr	r3, [r5, #0]
 8003f08:	b103      	cbz	r3, 8003f0c <_fstat_r+0x1c>
 8003f0a:	6023      	str	r3, [r4, #0]
 8003f0c:	bd38      	pop	{r3, r4, r5, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000344 	.word	0x20000344

08003f14 <_isatty_r>:
 8003f14:	b538      	push	{r3, r4, r5, lr}
 8003f16:	4d06      	ldr	r5, [pc, #24]	@ (8003f30 <_isatty_r+0x1c>)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4608      	mov	r0, r1
 8003f1e:	602b      	str	r3, [r5, #0]
 8003f20:	f7fe fdb5 	bl	8002a8e <_isatty>
 8003f24:	1c43      	adds	r3, r0, #1
 8003f26:	d102      	bne.n	8003f2e <_isatty_r+0x1a>
 8003f28:	682b      	ldr	r3, [r5, #0]
 8003f2a:	b103      	cbz	r3, 8003f2e <_isatty_r+0x1a>
 8003f2c:	6023      	str	r3, [r4, #0]
 8003f2e:	bd38      	pop	{r3, r4, r5, pc}
 8003f30:	20000344 	.word	0x20000344

08003f34 <_init>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	bf00      	nop
 8003f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f3a:	bc08      	pop	{r3}
 8003f3c:	469e      	mov	lr, r3
 8003f3e:	4770      	bx	lr

08003f40 <_fini>:
 8003f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f42:	bf00      	nop
 8003f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f46:	bc08      	pop	{r3}
 8003f48:	469e      	mov	lr, r3
 8003f4a:	4770      	bx	lr
