
HTFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001f78  08001f78  00002f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ff0  08001ff0  00003060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001ff0  08001ff0  00002ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001ff8  08001ff8  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ff8  08001ff8  00002ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001ffc  08001ffc  00002ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000060  08002060  00003060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08002060  000031d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002829  00000000  00000000  00003090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000cdc  00000000  00000000  000058b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003d0  00000000  00000000  00006598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002b0  00000000  00000000  00006968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001439a  00000000  00000000  00006c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000366f  00000000  00000000  0001afb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827bf  00000000  00000000  0001e621  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a0de0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000115c  00000000  00000000  000a0e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000a1f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001f60 	.word	0x08001f60

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08001f60 	.word	0x08001f60

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <HTFT_voidInit>:
#include "HTFT_Config.h"

// ... (كود HTFT_voidInit, HTFT_voidWriteData, HTFT_voidWriteCMD الحالي الخاص بك يظل كما هو) ...

void HTFT_voidInit()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	MGPIO_voidSetMode(TFT_PORT,RST_PIN,OUTPUT);
 8000284:	2201      	movs	r2, #1
 8000286:	2100      	movs	r1, #0
 8000288:	2000      	movs	r0, #0
 800028a:	f000 f8f9 	bl	8000480 <MGPIO_voidSetMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,RST_PIN,Push_Pull,Low_Speed);
 800028e:	2300      	movs	r3, #0
 8000290:	2200      	movs	r2, #0
 8000292:	2100      	movs	r1, #0
 8000294:	2000      	movs	r0, #0
 8000296:	f000 f947 	bl	8000528 <MGPIO_voidSetOutputConfig>
	MGPIO_voidSetMode(TFT_PORT,CONTROL_PIN,OUTPUT);
 800029a:	2201      	movs	r2, #1
 800029c:	2101      	movs	r1, #1
 800029e:	2000      	movs	r0, #0
 80002a0:	f000 f8ee 	bl	8000480 <MGPIO_voidSetMode>
	MGPIO_voidSetOutputConfig(TFT_PORT,CONTROL_PIN,Push_Pull,Low_Speed);
 80002a4:	2300      	movs	r3, #0
 80002a6:	2200      	movs	r2, #0
 80002a8:	2101      	movs	r1, #1
 80002aa:	2000      	movs	r0, #0
 80002ac:	f000 f93c 	bl	8000528 <MGPIO_voidSetOutputConfig>
	
	//Reset Sequence 
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 80002b0:	2201      	movs	r2, #1
 80002b2:	2100      	movs	r1, #0
 80002b4:	2000      	movs	r0, #0
 80002b6:	f000 f9ad 	bl	8000614 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 80002ba:	2064      	movs	r0, #100	@ 0x64
 80002bc:	f000 fc2e 	bl	8000b1c <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2100      	movs	r1, #0
 80002c4:	2000      	movs	r0, #0
 80002c6:	f000 f9a5 	bl	8000614 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(1);
 80002ca:	2001      	movs	r0, #1
 80002cc:	f000 fc26 	bl	8000b1c <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 80002d0:	2201      	movs	r2, #1
 80002d2:	2100      	movs	r1, #0
 80002d4:	2000      	movs	r0, #0
 80002d6:	f000 f99d 	bl	8000614 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 80002da:	2064      	movs	r0, #100	@ 0x64
 80002dc:	f000 fc1e 	bl	8000b1c <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,LOW);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	2000      	movs	r0, #0
 80002e6:	f000 f995 	bl	8000614 <MGPIO_voidSetPinValue>
	MSTK_voidDelayus(100);
 80002ea:	2064      	movs	r0, #100	@ 0x64
 80002ec:	f000 fc16 	bl	8000b1c <MSTK_voidDelayus>
	MGPIO_voidSetPinValue(TFT_PORT,RST_PIN,HIGH);
 80002f0:	2201      	movs	r2, #1
 80002f2:	2100      	movs	r1, #0
 80002f4:	2000      	movs	r0, #0
 80002f6:	f000 f98d 	bl	8000614 <MGPIO_voidSetPinValue>
	MSTK_voidDelayms(120);
 80002fa:	2078      	movs	r0, #120	@ 0x78
 80002fc:	f000 fbec 	bl	8000ad8 <MSTK_voidDelayms>
	
	//Sleep Out
	HTFT_voidWriteCMD(SLEEP_OUT);
 8000300:	2011      	movs	r0, #17
 8000302:	f000 f821 	bl	8000348 <HTFT_voidWriteCMD>
	MSTK_voidDelayms(10);
 8000306:	200a      	movs	r0, #10
 8000308:	f000 fbe6 	bl	8000ad8 <MSTK_voidDelayms>
	
	//Select color mode
	HTFT_voidWriteCMD(COLOR_MODE);
 800030c:	203a      	movs	r0, #58	@ 0x3a
 800030e:	f000 f81b 	bl	8000348 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(RGB565);
 8000312:	2005      	movs	r0, #5
 8000314:	f000 f805 	bl	8000322 <HTFT_voidWriteData>
	
	//Diplay on
	HTFT_voidWriteCMD(DISPLAY_ON);
 8000318:	2029      	movs	r0, #41	@ 0x29
 800031a:	f000 f815 	bl	8000348 <HTFT_voidWriteCMD>
}
 800031e:	bf00      	nop
 8000320:	bd80      	pop	{r7, pc}

08000322 <HTFT_voidWriteData>:

void HTFT_voidWriteData(u8 Copy_u8Data)
{
 8000322:	b580      	push	{r7, lr}
 8000324:	b082      	sub	sp, #8
 8000326:	af00      	add	r7, sp, #0
 8000328:	4603      	mov	r3, r0
 800032a:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,HIGH);
 800032c:	2201      	movs	r2, #1
 800032e:	2101      	movs	r1, #1
 8000330:	2000      	movs	r0, #0
 8000332:	f000 f96f 	bl	8000614 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8Data);
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	b29b      	uxth	r3, r3
 800033a:	4618      	mov	r0, r3
 800033c:	f000 fb58 	bl	80009f0 <MSPI_u16Tranceive>
}
 8000340:	bf00      	nop
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <HTFT_voidWriteCMD>:

void HTFT_voidWriteCMD(u8 Copy_u8CMD)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	MGPIO_voidSetPinValue(TFT_PORT,CONTROL_PIN,LOW);
 8000352:	2200      	movs	r2, #0
 8000354:	2101      	movs	r1, #1
 8000356:	2000      	movs	r0, #0
 8000358:	f000 f95c 	bl	8000614 <MGPIO_voidSetPinValue>
	(void)MSPI_u16Tranceive(Copy_u8CMD);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	b29b      	uxth	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f000 fb45 	bl	80009f0 <MSPI_u16Tranceive>
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <HTFT_voidSetWindow>:
/************************************************/
/* تنفيذ دوال الرسم الجديدة              */
/************************************************/

void HTFT_voidSetWindow(u8 Copy_u8X0, u8 Copy_u8X1, u8 Copy_u8Y0, u8 Copy_u8Y1)
{
 800036e:	b590      	push	{r4, r7, lr}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	4604      	mov	r4, r0
 8000376:	4608      	mov	r0, r1
 8000378:	4611      	mov	r1, r2
 800037a:	461a      	mov	r2, r3
 800037c:	4623      	mov	r3, r4
 800037e:	71fb      	strb	r3, [r7, #7]
 8000380:	4603      	mov	r3, r0
 8000382:	71bb      	strb	r3, [r7, #6]
 8000384:	460b      	mov	r3, r1
 8000386:	717b      	strb	r3, [r7, #5]
 8000388:	4613      	mov	r3, r2
 800038a:	713b      	strb	r3, [r7, #4]
	// Set X address
	HTFT_voidWriteCMD(X_Direction);
 800038c:	202a      	movs	r0, #42	@ 0x2a
 800038e:	f7ff ffdb 	bl	8000348 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(0);
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ffc5 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8X0);
 8000398:	79fb      	ldrb	r3, [r7, #7]
 800039a:	4618      	mov	r0, r3
 800039c:	f7ff ffc1 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(0);
 80003a0:	2000      	movs	r0, #0
 80003a2:	f7ff ffbe 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8X1);
 80003a6:	79bb      	ldrb	r3, [r7, #6]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ffba 	bl	8000322 <HTFT_voidWriteData>
	
	// Set Y address
	HTFT_voidWriteCMD(Y_Direction);
 80003ae:	202b      	movs	r0, #43	@ 0x2b
 80003b0:	f7ff ffca 	bl	8000348 <HTFT_voidWriteCMD>
	HTFT_voidWriteData(0);
 80003b4:	2000      	movs	r0, #0
 80003b6:	f7ff ffb4 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8Y0);
 80003ba:	797b      	ldrb	r3, [r7, #5]
 80003bc:	4618      	mov	r0, r3
 80003be:	f7ff ffb0 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(0);
 80003c2:	2000      	movs	r0, #0
 80003c4:	f7ff ffad 	bl	8000322 <HTFT_voidWriteData>
	HTFT_voidWriteData(Copy_u8Y1);
 80003c8:	793b      	ldrb	r3, [r7, #4]
 80003ca:	4618      	mov	r0, r3
 80003cc:	f7ff ffa9 	bl	8000322 <HTFT_voidWriteData>
	
	// Start memory write command
	HTFT_voidWriteCMD(SCREEN_WRITE);
 80003d0:	202c      	movs	r0, #44	@ 0x2c
 80003d2:	f7ff ffb9 	bl	8000348 <HTFT_voidWriteCMD>
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd90      	pop	{r4, r7, pc}

080003de <HTFT_voidFillColor>:

void HTFT_voidFillColor(u16 Copy_u16Color, u32 Copy_u32Size)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b084      	sub	sp, #16
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	4603      	mov	r3, r0
 80003e6:	6039      	str	r1, [r7, #0]
 80003e8:	80fb      	strh	r3, [r7, #6]
	u8 Local_u8HighPart = (u8)(Copy_u16Color >> 8);
 80003ea:	88fb      	ldrh	r3, [r7, #6]
 80003ec:	0a1b      	lsrs	r3, r3, #8
 80003ee:	b29b      	uxth	r3, r3
 80003f0:	72fb      	strb	r3, [r7, #11]
	u8 Local_u8LowPart  = (u8)(Copy_u16Color);
 80003f2:	88fb      	ldrh	r3, [r7, #6]
 80003f4:	72bb      	strb	r3, [r7, #10]

	for(u32 Local_u32Iterator = 0; Local_u32Iterator < Copy_u32Size; Local_u32Iterator++)
 80003f6:	2300      	movs	r3, #0
 80003f8:	60fb      	str	r3, [r7, #12]
 80003fa:	e00a      	b.n	8000412 <HTFT_voidFillColor+0x34>
	{
		HTFT_voidWriteData(Local_u8HighPart);
 80003fc:	7afb      	ldrb	r3, [r7, #11]
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff8f 	bl	8000322 <HTFT_voidWriteData>
		HTFT_voidWriteData(Local_u8LowPart);
 8000404:	7abb      	ldrb	r3, [r7, #10]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff8b 	bl	8000322 <HTFT_voidWriteData>
	for(u32 Local_u32Iterator = 0; Local_u32Iterator < Copy_u32Size; Local_u32Iterator++)
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	3301      	adds	r3, #1
 8000410:	60fb      	str	r3, [r7, #12]
 8000412:	68fa      	ldr	r2, [r7, #12]
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	429a      	cmp	r2, r3
 8000418:	d3f0      	bcc.n	80003fc <HTFT_voidFillColor+0x1e>
	}
}
 800041a:	bf00      	nop
 800041c:	bf00      	nop
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <HTFT_voidFillRect>:

void HTFT_voidFillRect(u8 Copy_u8X, u8 Copy_u8Y, u8 Copy_u8Width, u8 Copy_u8Height, u16 Copy_u16Color)
{
 8000424:	b590      	push	{r4, r7, lr}
 8000426:	b085      	sub	sp, #20
 8000428:	af00      	add	r7, sp, #0
 800042a:	4604      	mov	r4, r0
 800042c:	4608      	mov	r0, r1
 800042e:	4611      	mov	r1, r2
 8000430:	461a      	mov	r2, r3
 8000432:	4623      	mov	r3, r4
 8000434:	71fb      	strb	r3, [r7, #7]
 8000436:	4603      	mov	r3, r0
 8000438:	71bb      	strb	r3, [r7, #6]
 800043a:	460b      	mov	r3, r1
 800043c:	717b      	strb	r3, [r7, #5]
 800043e:	4613      	mov	r3, r2
 8000440:	713b      	strb	r3, [r7, #4]
    u32 Local_u32Area = (u32)Copy_u8Width * Copy_u8Height;
 8000442:	797b      	ldrb	r3, [r7, #5]
 8000444:	793a      	ldrb	r2, [r7, #4]
 8000446:	fb02 f303 	mul.w	r3, r2, r3
 800044a:	60fb      	str	r3, [r7, #12]
    HTFT_voidSetWindow(Copy_u8X, Copy_u8X + Copy_u8Width - 1, Copy_u8Y, Copy_u8Y + Copy_u8Height - 1);
 800044c:	79fa      	ldrb	r2, [r7, #7]
 800044e:	797b      	ldrb	r3, [r7, #5]
 8000450:	4413      	add	r3, r2
 8000452:	b2db      	uxtb	r3, r3
 8000454:	3b01      	subs	r3, #1
 8000456:	b2d9      	uxtb	r1, r3
 8000458:	79ba      	ldrb	r2, [r7, #6]
 800045a:	793b      	ldrb	r3, [r7, #4]
 800045c:	4413      	add	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	3b01      	subs	r3, #1
 8000462:	b2db      	uxtb	r3, r3
 8000464:	79ba      	ldrb	r2, [r7, #6]
 8000466:	79f8      	ldrb	r0, [r7, #7]
 8000468:	f7ff ff81 	bl	800036e <HTFT_voidSetWindow>
    HTFT_voidFillColor(Copy_u16Color, Local_u32Area);
 800046c:	8c3b      	ldrh	r3, [r7, #32]
 800046e:	68f9      	ldr	r1, [r7, #12]
 8000470:	4618      	mov	r0, r3
 8000472:	f7ff ffb4 	bl	80003de <HTFT_voidFillColor>
}
 8000476:	bf00      	nop
 8000478:	3714      	adds	r7, #20
 800047a:	46bd      	mov	sp, r7
 800047c:	bd90      	pop	{r4, r7, pc}
	...

08000480 <MGPIO_voidSetMode>:
#include "MGPIO_Private.h"
#include "MGPIO_Config.h"


void MGPIO_voidSetMode(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Modes_t Copy_uddtMode)
{
 8000480:	b480      	push	{r7}
 8000482:	b083      	sub	sp, #12
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	71fb      	strb	r3, [r7, #7]
 800048a:	460b      	mov	r3, r1
 800048c:	71bb      	strb	r3, [r7, #6]
 800048e:	4613      	mov	r3, r2
 8000490:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d108      	bne.n	80004aa <MGPIO_voidSetMode+0x2a>
 8000498:	79bb      	ldrb	r3, [r7, #6]
 800049a:	2b0d      	cmp	r3, #13
 800049c:	d038      	beq.n	8000510 <MGPIO_voidSetMode+0x90>
 800049e:	79bb      	ldrb	r3, [r7, #6]
 80004a0:	2b0e      	cmp	r3, #14
 80004a2:	d035      	beq.n	8000510 <MGPIO_voidSetMode+0x90>
 80004a4:	79bb      	ldrb	r3, [r7, #6]
 80004a6:	2b0f      	cmp	r3, #15
 80004a8:	d032      	beq.n	8000510 <MGPIO_voidSetMode+0x90>
	{
		return;
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d108      	bne.n	80004c2 <MGPIO_voidSetMode+0x42>
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b03      	cmp	r3, #3
 80004b4:	d02e      	beq.n	8000514 <MGPIO_voidSetMode+0x94>
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d02b      	beq.n	8000514 <MGPIO_voidSetMode+0x94>
 80004bc:	79bb      	ldrb	r3, [r7, #6]
 80004be:	2b05      	cmp	r3, #5
 80004c0:	d028      	beq.n	8000514 <MGPIO_voidSetMode+0x94>
	{
		return;
	}
	else if (Copy_uddtPort < 0 || Copy_uddtPort >= sizeof(ARRAY_BASE_ADDRESS) / sizeof(ARRAY_BASE_ADDRESS[0])) {
 80004c2:	79fb      	ldrb	r3, [r7, #7]
 80004c4:	2b02      	cmp	r3, #2
 80004c6:	d827      	bhi.n	8000518 <MGPIO_voidSetMode+0x98>
        // Handle error (invalid port)
        return;
    }
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->MODER&=~(MUSK<<(Copy_uddtPin*2));
 80004c8:	79fb      	ldrb	r3, [r7, #7]
 80004ca:	4a16      	ldr	r2, [pc, #88]	@ (8000524 <MGPIO_voidSetMode+0xa4>)
 80004cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d0:	681a      	ldr	r2, [r3, #0]
 80004d2:	79bb      	ldrb	r3, [r7, #6]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	2103      	movs	r1, #3
 80004d8:	fa01 f303 	lsl.w	r3, r1, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	4618      	mov	r0, r3
 80004e0:	79fb      	ldrb	r3, [r7, #7]
 80004e2:	4910      	ldr	r1, [pc, #64]	@ (8000524 <MGPIO_voidSetMode+0xa4>)
 80004e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004e8:	4002      	ands	r2, r0
 80004ea:	601a      	str	r2, [r3, #0]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->MODER|=(Copy_uddtMode<<(Copy_uddtPin*2));
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <MGPIO_voidSetMode+0xa4>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	7979      	ldrb	r1, [r7, #5]
 80004f8:	79bb      	ldrb	r3, [r7, #6]
 80004fa:	005b      	lsls	r3, r3, #1
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	4618      	mov	r0, r3
 8000502:	79fb      	ldrb	r3, [r7, #7]
 8000504:	4907      	ldr	r1, [pc, #28]	@ (8000524 <MGPIO_voidSetMode+0xa4>)
 8000506:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800050a:	4302      	orrs	r2, r0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e004      	b.n	800051a <MGPIO_voidSetMode+0x9a>
		return;
 8000510:	bf00      	nop
 8000512:	e002      	b.n	800051a <MGPIO_voidSetMode+0x9a>
		return;
 8000514:	bf00      	nop
 8000516:	e000      	b.n	800051a <MGPIO_voidSetMode+0x9a>
        return;
 8000518:	bf00      	nop
	}
		
}
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	20000000 	.word	0x20000000

08000528 <MGPIO_voidSetOutputConfig>:


void MGPIO_voidSetOutputConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Output_t Copy_uddtType,Speed_t Copy_uddtSpeed)
{
 8000528:	b490      	push	{r4, r7}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	4604      	mov	r4, r0
 8000530:	4608      	mov	r0, r1
 8000532:	4611      	mov	r1, r2
 8000534:	461a      	mov	r2, r3
 8000536:	4623      	mov	r3, r4
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	4603      	mov	r3, r0
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	460b      	mov	r3, r1
 8000540:	717b      	strb	r3, [r7, #5]
 8000542:	4613      	mov	r3, r2
 8000544:	713b      	strb	r3, [r7, #4]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d108      	bne.n	800055e <MGPIO_voidSetOutputConfig+0x36>
 800054c:	79bb      	ldrb	r3, [r7, #6]
 800054e:	2b0d      	cmp	r3, #13
 8000550:	d056      	beq.n	8000600 <MGPIO_voidSetOutputConfig+0xd8>
 8000552:	79bb      	ldrb	r3, [r7, #6]
 8000554:	2b0e      	cmp	r3, #14
 8000556:	d053      	beq.n	8000600 <MGPIO_voidSetOutputConfig+0xd8>
 8000558:	79bb      	ldrb	r3, [r7, #6]
 800055a:	2b0f      	cmp	r3, #15
 800055c:	d050      	beq.n	8000600 <MGPIO_voidSetOutputConfig+0xd8>
	{
		return;
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d108      	bne.n	8000576 <MGPIO_voidSetOutputConfig+0x4e>
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	2b03      	cmp	r3, #3
 8000568:	d04c      	beq.n	8000604 <MGPIO_voidSetOutputConfig+0xdc>
 800056a:	79bb      	ldrb	r3, [r7, #6]
 800056c:	2b04      	cmp	r3, #4
 800056e:	d049      	beq.n	8000604 <MGPIO_voidSetOutputConfig+0xdc>
 8000570:	79bb      	ldrb	r3, [r7, #6]
 8000572:	2b05      	cmp	r3, #5
 8000574:	d046      	beq.n	8000604 <MGPIO_voidSetOutputConfig+0xdc>
	{
		return;
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OTYPER&=~(1<<(Copy_uddtPin));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4a25      	ldr	r2, [pc, #148]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 800057a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800057e:	685a      	ldr	r2, [r3, #4]
 8000580:	79bb      	ldrb	r3, [r7, #6]
 8000582:	2101      	movs	r1, #1
 8000584:	fa01 f303 	lsl.w	r3, r1, r3
 8000588:	43db      	mvns	r3, r3
 800058a:	4618      	mov	r0, r3
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	4920      	ldr	r1, [pc, #128]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 8000590:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000594:	4002      	ands	r2, r0
 8000596:	605a      	str	r2, [r3, #4]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OTYPER|=(Copy_uddtType<<(Copy_uddtPin));
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4a1d      	ldr	r2, [pc, #116]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 800059c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a0:	685a      	ldr	r2, [r3, #4]
 80005a2:	7979      	ldrb	r1, [r7, #5]
 80005a4:	79bb      	ldrb	r3, [r7, #6]
 80005a6:	fa01 f303 	lsl.w	r3, r1, r3
 80005aa:	4618      	mov	r0, r3
 80005ac:	79fb      	ldrb	r3, [r7, #7]
 80005ae:	4918      	ldr	r1, [pc, #96]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 80005b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005b4:	4302      	orrs	r2, r0
 80005b6:	605a      	str	r2, [r3, #4]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OSPEEDER&=~(MUSK<<(Copy_uddtPin*2));
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	4a15      	ldr	r2, [pc, #84]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 80005bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	79bb      	ldrb	r3, [r7, #6]
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	2103      	movs	r1, #3
 80005c8:	fa01 f303 	lsl.w	r3, r1, r3
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4618      	mov	r0, r3
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	490f      	ldr	r1, [pc, #60]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 80005d4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d8:	4002      	ands	r2, r0
 80005da:	609a      	str	r2, [r3, #8]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->OSPEEDER|=(Copy_uddtSpeed<<(Copy_uddtPin*2));
 80005dc:	79fb      	ldrb	r3, [r7, #7]
 80005de:	4a0c      	ldr	r2, [pc, #48]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 80005e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e4:	689a      	ldr	r2, [r3, #8]
 80005e6:	7939      	ldrb	r1, [r7, #4]
 80005e8:	79bb      	ldrb	r3, [r7, #6]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	fa01 f303 	lsl.w	r3, r1, r3
 80005f0:	4618      	mov	r0, r3
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4906      	ldr	r1, [pc, #24]	@ (8000610 <MGPIO_voidSetOutputConfig+0xe8>)
 80005f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005fa:	4302      	orrs	r2, r0
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	e002      	b.n	8000606 <MGPIO_voidSetOutputConfig+0xde>
		return;
 8000600:	bf00      	nop
 8000602:	e000      	b.n	8000606 <MGPIO_voidSetOutputConfig+0xde>
		return;
 8000604:	bf00      	nop
//			GPIOC->OSPEEDER|=(Copy_uddtSpeed<<(Copy_uddtPin*2));
//
//			break;
//		}
	}
}
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bc90      	pop	{r4, r7}
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	20000000 	.word	0x20000000

08000614 <MGPIO_voidSetPinValue>:
void MGPIO_voidSetPinValue(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,PinValue_t Copy_uddtPinValue)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
 800061e:	460b      	mov	r3, r1
 8000620:	71bb      	strb	r3, [r7, #6]
 8000622:	4613      	mov	r3, r2
 8000624:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	d108      	bne.n	800063e <MGPIO_voidSetPinValue+0x2a>
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b0d      	cmp	r3, #13
 8000630:	d033      	beq.n	800069a <MGPIO_voidSetPinValue+0x86>
 8000632:	79bb      	ldrb	r3, [r7, #6]
 8000634:	2b0e      	cmp	r3, #14
 8000636:	d030      	beq.n	800069a <MGPIO_voidSetPinValue+0x86>
 8000638:	79bb      	ldrb	r3, [r7, #6]
 800063a:	2b0f      	cmp	r3, #15
 800063c:	d02d      	beq.n	800069a <MGPIO_voidSetPinValue+0x86>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d108      	bne.n	8000656 <MGPIO_voidSetPinValue+0x42>
 8000644:	79bb      	ldrb	r3, [r7, #6]
 8000646:	2b03      	cmp	r3, #3
 8000648:	d029      	beq.n	800069e <MGPIO_voidSetPinValue+0x8a>
 800064a:	79bb      	ldrb	r3, [r7, #6]
 800064c:	2b04      	cmp	r3, #4
 800064e:	d026      	beq.n	800069e <MGPIO_voidSetPinValue+0x8a>
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	2b05      	cmp	r3, #5
 8000654:	d023      	beq.n	800069e <MGPIO_voidSetPinValue+0x8a>
	{
		
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->ODR&=~(1<<(Copy_uddtPin));
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4a14      	ldr	r2, [pc, #80]	@ (80006ac <MGPIO_voidSetPinValue+0x98>)
 800065a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065e:	695a      	ldr	r2, [r3, #20]
 8000660:	79bb      	ldrb	r3, [r7, #6]
 8000662:	2101      	movs	r1, #1
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	4618      	mov	r0, r3
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	490f      	ldr	r1, [pc, #60]	@ (80006ac <MGPIO_voidSetPinValue+0x98>)
 8000670:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000674:	4002      	ands	r2, r0
 8000676:	615a      	str	r2, [r3, #20]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->ODR|=(Copy_uddtPinValue<<(Copy_uddtPin));
 8000678:	79fb      	ldrb	r3, [r7, #7]
 800067a:	4a0c      	ldr	r2, [pc, #48]	@ (80006ac <MGPIO_voidSetPinValue+0x98>)
 800067c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	7979      	ldrb	r1, [r7, #5]
 8000684:	79bb      	ldrb	r3, [r7, #6]
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	4618      	mov	r0, r3
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	4907      	ldr	r1, [pc, #28]	@ (80006ac <MGPIO_voidSetPinValue+0x98>)
 8000690:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000694:	4302      	orrs	r2, r0
 8000696:	615a      	str	r2, [r3, #20]
//			GPIOC->ODR&=~(1<<Copy_uddtPin);
//			GPIOC->ODR|=(Copy_uddtPinValue<<Copy_uddtPin);
//			break;
//		}
	}
}
 8000698:	e002      	b.n	80006a0 <MGPIO_voidSetPinValue+0x8c>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 800069a:	bf00      	nop
 800069c:	e000      	b.n	80006a0 <MGPIO_voidSetPinValue+0x8c>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 800069e:	bf00      	nop
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr
 80006ac:	20000000 	.word	0x20000000

080006b0 <MGPIO_voidSetInputConfig>:
//		}
	}
}

void MGPIO_voidSetInputConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Input_t Copy_uddtType)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
 80006ba:	460b      	mov	r3, r1
 80006bc:	71bb      	strb	r3, [r7, #6]
 80006be:	4613      	mov	r3, r2
 80006c0:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d108      	bne.n	80006da <MGPIO_voidSetInputConfig+0x2a>
 80006c8:	79bb      	ldrb	r3, [r7, #6]
 80006ca:	2b0d      	cmp	r3, #13
 80006cc:	d035      	beq.n	800073a <MGPIO_voidSetInputConfig+0x8a>
 80006ce:	79bb      	ldrb	r3, [r7, #6]
 80006d0:	2b0e      	cmp	r3, #14
 80006d2:	d032      	beq.n	800073a <MGPIO_voidSetInputConfig+0x8a>
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d02f      	beq.n	800073a <MGPIO_voidSetInputConfig+0x8a>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	2b01      	cmp	r3, #1
 80006de:	d108      	bne.n	80006f2 <MGPIO_voidSetInputConfig+0x42>
 80006e0:	79bb      	ldrb	r3, [r7, #6]
 80006e2:	2b03      	cmp	r3, #3
 80006e4:	d02b      	beq.n	800073e <MGPIO_voidSetInputConfig+0x8e>
 80006e6:	79bb      	ldrb	r3, [r7, #6]
 80006e8:	2b04      	cmp	r3, #4
 80006ea:	d028      	beq.n	800073e <MGPIO_voidSetInputConfig+0x8e>
 80006ec:	79bb      	ldrb	r3, [r7, #6]
 80006ee:	2b05      	cmp	r3, #5
 80006f0:	d025      	beq.n	800073e <MGPIO_voidSetInputConfig+0x8e>
	{
		
	}
	else
	{
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->PUPDR&=~(MUSK<<(Copy_uddtPin*2));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4a15      	ldr	r2, [pc, #84]	@ (800074c <MGPIO_voidSetInputConfig+0x9c>)
 80006f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fa:	68da      	ldr	r2, [r3, #12]
 80006fc:	79bb      	ldrb	r3, [r7, #6]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	2103      	movs	r1, #3
 8000702:	fa01 f303 	lsl.w	r3, r1, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	4618      	mov	r0, r3
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	490f      	ldr	r1, [pc, #60]	@ (800074c <MGPIO_voidSetInputConfig+0x9c>)
 800070e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000712:	4002      	ands	r2, r0
 8000714:	60da      	str	r2, [r3, #12]
		ARRAY_BASE_ADDRESS[Copy_uddtPort]->PUPDR|=(Copy_uddtType<<(Copy_uddtPin*2));
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	4a0c      	ldr	r2, [pc, #48]	@ (800074c <MGPIO_voidSetInputConfig+0x9c>)
 800071a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800071e:	68da      	ldr	r2, [r3, #12]
 8000720:	7979      	ldrb	r1, [r7, #5]
 8000722:	79bb      	ldrb	r3, [r7, #6]
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	fa01 f303 	lsl.w	r3, r1, r3
 800072a:	4618      	mov	r0, r3
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	4907      	ldr	r1, [pc, #28]	@ (800074c <MGPIO_voidSetInputConfig+0x9c>)
 8000730:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000734:	4302      	orrs	r2, r0
 8000736:	60da      	str	r2, [r3, #12]
//			GPIOC->PUPDR&=~(MUSK<<(Copy_uddtPin*2));
//			GPIOC->PUPDR|=(Copy_uddtType<<(Copy_uddtPin*2));
//			break;
//		}
	}
}
 8000738:	e002      	b.n	8000740 <MGPIO_voidSetInputConfig+0x90>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <MGPIO_voidSetInputConfig+0x90>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 800073e:	bf00      	nop
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	20000000 	.word	0x20000000

08000750 <MGPIO_u8GetPinValue>:
u8 MGPIO_u8GetPinValue(Port_t Copy_uddtPort,PIN_t Copy_uddtPin)
{
 8000750:	b480      	push	{r7}
 8000752:	b085      	sub	sp, #20
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	460a      	mov	r2, r1
 800075a:	71fb      	strb	r3, [r7, #7]
 800075c:	4613      	mov	r3, r2
 800075e:	71bb      	strb	r3, [r7, #6]
	u8 Copy_u8PinValue=0;
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d108      	bne.n	800077c <MGPIO_u8GetPinValue+0x2c>
 800076a:	79bb      	ldrb	r3, [r7, #6]
 800076c:	2b0d      	cmp	r3, #13
 800076e:	d01e      	beq.n	80007ae <MGPIO_u8GetPinValue+0x5e>
 8000770:	79bb      	ldrb	r3, [r7, #6]
 8000772:	2b0e      	cmp	r3, #14
 8000774:	d01b      	beq.n	80007ae <MGPIO_u8GetPinValue+0x5e>
 8000776:	79bb      	ldrb	r3, [r7, #6]
 8000778:	2b0f      	cmp	r3, #15
 800077a:	d018      	beq.n	80007ae <MGPIO_u8GetPinValue+0x5e>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d108      	bne.n	8000794 <MGPIO_u8GetPinValue+0x44>
 8000782:	79bb      	ldrb	r3, [r7, #6]
 8000784:	2b03      	cmp	r3, #3
 8000786:	d014      	beq.n	80007b2 <MGPIO_u8GetPinValue+0x62>
 8000788:	79bb      	ldrb	r3, [r7, #6]
 800078a:	2b04      	cmp	r3, #4
 800078c:	d011      	beq.n	80007b2 <MGPIO_u8GetPinValue+0x62>
 800078e:	79bb      	ldrb	r3, [r7, #6]
 8000790:	2b05      	cmp	r3, #5
 8000792:	d00e      	beq.n	80007b2 <MGPIO_u8GetPinValue+0x62>
	{
		
	}
	else
	{
		Copy_u8PinValue=GET_BIT(ARRAY_BASE_ADDRESS[Copy_uddtPort]->IDR,Copy_uddtPin);
 8000794:	79fb      	ldrb	r3, [r7, #7]
 8000796:	4a0b      	ldr	r2, [pc, #44]	@ (80007c4 <MGPIO_u8GetPinValue+0x74>)
 8000798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800079c:	691a      	ldr	r2, [r3, #16]
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	fa22 f303 	lsr.w	r3, r2, r3
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 0301 	and.w	r3, r3, #1
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e002      	b.n	80007b4 <MGPIO_u8GetPinValue+0x64>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 80007ae:	bf00      	nop
 80007b0:	e000      	b.n	80007b4 <MGPIO_u8GetPinValue+0x64>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 80007b2:	bf00      	nop
//			case PORTC:
//			Copy_u8PinValue=GET_BIT(GPIOC->IDR,Copy_uddtPin);
//			break;
//		}
	}
	return Copy_u8PinValue;
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	20000000 	.word	0x20000000

080007c8 <MGPIO_voidSetAlternativeConfig>:

void MGPIO_voidSetAlternativeConfig(Port_t Copy_uddtPort,PIN_t Copy_uddtPin,Alternative_t Copy_uddtType)
{
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	71fb      	strb	r3, [r7, #7]
 80007d2:	460b      	mov	r3, r1
 80007d4:	71bb      	strb	r3, [r7, #6]
 80007d6:	4613      	mov	r3, r2
 80007d8:	717b      	strb	r3, [r7, #5]
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d108      	bne.n	80007f2 <MGPIO_voidSetAlternativeConfig+0x2a>
 80007e0:	79bb      	ldrb	r3, [r7, #6]
 80007e2:	2b0d      	cmp	r3, #13
 80007e4:	d062      	beq.n	80008ac <MGPIO_voidSetAlternativeConfig+0xe4>
 80007e6:	79bb      	ldrb	r3, [r7, #6]
 80007e8:	2b0e      	cmp	r3, #14
 80007ea:	d05f      	beq.n	80008ac <MGPIO_voidSetAlternativeConfig+0xe4>
 80007ec:	79bb      	ldrb	r3, [r7, #6]
 80007ee:	2b0f      	cmp	r3, #15
 80007f0:	d05c      	beq.n	80008ac <MGPIO_voidSetAlternativeConfig+0xe4>
	{
		
	}
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d108      	bne.n	800080a <MGPIO_voidSetAlternativeConfig+0x42>
 80007f8:	79bb      	ldrb	r3, [r7, #6]
 80007fa:	2b03      	cmp	r3, #3
 80007fc:	d058      	beq.n	80008b0 <MGPIO_voidSetAlternativeConfig+0xe8>
 80007fe:	79bb      	ldrb	r3, [r7, #6]
 8000800:	2b04      	cmp	r3, #4
 8000802:	d055      	beq.n	80008b0 <MGPIO_voidSetAlternativeConfig+0xe8>
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	2b05      	cmp	r3, #5
 8000808:	d052      	beq.n	80008b0 <MGPIO_voidSetAlternativeConfig+0xe8>
	{
		
	}
	else
	{
		if(Copy_uddtPin<8)
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	2b07      	cmp	r3, #7
 800080e:	d823      	bhi.n	8000858 <MGPIO_voidSetAlternativeConfig+0x90>
		{
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRL&=~(ALT_MUSK<<(Copy_uddtPin*4));
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	4a2b      	ldr	r2, [pc, #172]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000814:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000818:	6a1a      	ldr	r2, [r3, #32]
 800081a:	79bb      	ldrb	r3, [r7, #6]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	210f      	movs	r1, #15
 8000820:	fa01 f303 	lsl.w	r3, r1, r3
 8000824:	43db      	mvns	r3, r3
 8000826:	4618      	mov	r0, r3
 8000828:	79fb      	ldrb	r3, [r7, #7]
 800082a:	4925      	ldr	r1, [pc, #148]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 800082c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000830:	4002      	ands	r2, r0
 8000832:	621a      	str	r2, [r3, #32]
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRL|=(Copy_uddtType<<(Copy_uddtPin*4));
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	4a22      	ldr	r2, [pc, #136]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800083c:	6a1a      	ldr	r2, [r3, #32]
 800083e:	7979      	ldrb	r1, [r7, #5]
 8000840:	79bb      	ldrb	r3, [r7, #6]
 8000842:	009b      	lsls	r3, r3, #2
 8000844:	fa01 f303 	lsl.w	r3, r1, r3
 8000848:	4618      	mov	r0, r3
 800084a:	79fb      	ldrb	r3, [r7, #7]
 800084c:	491c      	ldr	r1, [pc, #112]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 800084e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000852:	4302      	orrs	r2, r0
 8000854:	621a      	str	r2, [r3, #32]
//				GPIOC->AFRH|=(Copy_uddtType<<(Copy_uddtPin*4));
//			}
//			break;
//		}
	}
}
 8000856:	e02c      	b.n	80008b2 <MGPIO_voidSetAlternativeConfig+0xea>
		else if(Copy_uddtPin<16)
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b0f      	cmp	r3, #15
 800085c:	d829      	bhi.n	80008b2 <MGPIO_voidSetAlternativeConfig+0xea>
			Copy_uddtPin-=8;
 800085e:	79bb      	ldrb	r3, [r7, #6]
 8000860:	3b08      	subs	r3, #8
 8000862:	71bb      	strb	r3, [r7, #6]
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRH&=~(ALT_MUSK<<(Copy_uddtPin*4));
 8000864:	79fb      	ldrb	r3, [r7, #7]
 8000866:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800086c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800086e:	79bb      	ldrb	r3, [r7, #6]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	210f      	movs	r1, #15
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	4618      	mov	r0, r3
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	4910      	ldr	r1, [pc, #64]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 8000880:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000884:	4002      	ands	r2, r0
 8000886:	625a      	str	r2, [r3, #36]	@ 0x24
			ARRAY_BASE_ADDRESS[Copy_uddtPort]->AFRH|=(Copy_uddtType<<(Copy_uddtPin*4));
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 800088c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000890:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000892:	7979      	ldrb	r1, [r7, #5]
 8000894:	79bb      	ldrb	r3, [r7, #6]
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	fa01 f303 	lsl.w	r3, r1, r3
 800089c:	4618      	mov	r0, r3
 800089e:	79fb      	ldrb	r3, [r7, #7]
 80008a0:	4907      	ldr	r1, [pc, #28]	@ (80008c0 <MGPIO_voidSetAlternativeConfig+0xf8>)
 80008a2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008a6:	4302      	orrs	r2, r0
 80008a8:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80008aa:	e002      	b.n	80008b2 <MGPIO_voidSetAlternativeConfig+0xea>
	if(Copy_uddtPort==PORTA && (Copy_uddtPin==13 ||Copy_uddtPin==14 ||Copy_uddtPin==15))
 80008ac:	bf00      	nop
 80008ae:	e000      	b.n	80008b2 <MGPIO_voidSetAlternativeConfig+0xea>
	else if(Copy_uddtPort==PORTB && (Copy_uddtPin==3 ||Copy_uddtPin==4 ||Copy_uddtPin==5))
 80008b0:	bf00      	nop
}
 80008b2:	bf00      	nop
 80008b4:	370c      	adds	r7, #12
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000

080008c4 <MRCC_voidInit>:
#include "MRCC_Interface.h"
#include "MRCC_Private.h"


void MRCC_voidInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	#if (SYSTEM_CLOCK==HSI_CLOCK)
		//HSI ON
	     RCC->CR|=(1<<HSION);
 80008c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000904 <MRCC_voidInit+0x40>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000904 <MRCC_voidInit+0x40>)
 80008ce:	f043 0301 	orr.w	r3, r3, #1
 80008d2:	6013      	str	r3, [r2, #0]
	    //Wait till HSI ready
		while(!GET_BIT(RCC->CR,HSIRDY));
 80008d4:	bf00      	nop
 80008d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000904 <MRCC_voidInit+0x40>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	085b      	lsrs	r3, r3, #1
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d0f8      	beq.n	80008d6 <MRCC_voidInit+0x12>
		//Switch to HSI
		RCC->CFGR&=(MUSK<<SW0);
 80008e4:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <MRCC_voidInit+0x40>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	4a06      	ldr	r2, [pc, #24]	@ (8000904 <MRCC_voidInit+0x40>)
 80008ea:	f003 0303 	and.w	r3, r3, #3
 80008ee:	6093      	str	r3, [r2, #8]
		RCC->CFGR|=(HSI_Oscillator<<SW0);
 80008f0:	4b04      	ldr	r3, [pc, #16]	@ (8000904 <MRCC_voidInit+0x40>)
 80008f2:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <MRCC_voidInit+0x40>)
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	6093      	str	r3, [r2, #8]
		RCC->CR|=(1<<PLLON);
		while(!GET_BIT(RCC->CR,PLLRDY));
		RCC->CFGR&=(MUSK<<SW0);
		RCC->CFGR|=(PLL<<SW0);
	#endif
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <MRCC_voidEnablePeripheralClock>:

void MRCC_voidEnablePeripheralClock(System_Bus Copy_uddtBus,u32 Copy_u32Peripheral)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	6039      	str	r1, [r7, #0]
 8000912:	71fb      	strb	r3, [r7, #7]
	if(Copy_u32Peripheral<32)
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2b1f      	cmp	r3, #31
 8000918:	d83a      	bhi.n	8000990 <MRCC_voidEnablePeripheralClock+0x88>
	{
		switch(Copy_uddtBus)
 800091a:	79fb      	ldrb	r3, [r7, #7]
 800091c:	2b03      	cmp	r3, #3
 800091e:	d837      	bhi.n	8000990 <MRCC_voidEnablePeripheralClock+0x88>
 8000920:	a201      	add	r2, pc, #4	@ (adr r2, 8000928 <MRCC_voidEnablePeripheralClock+0x20>)
 8000922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000926:	bf00      	nop
 8000928:	08000939 	.word	0x08000939
 800092c:	0800094f 	.word	0x0800094f
 8000930:	08000965 	.word	0x08000965
 8000934:	0800097b 	.word	0x0800097b
		{
			case AHB1_BUS: RCC->AHB1ENR|=(1<<Copy_u32Peripheral);        break;
 8000938:	4b18      	ldr	r3, [pc, #96]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 800093a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093c:	2101      	movs	r1, #1
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	fa01 f202 	lsl.w	r2, r1, r2
 8000944:	4611      	mov	r1, r2
 8000946:	4a15      	ldr	r2, [pc, #84]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 8000948:	430b      	orrs	r3, r1
 800094a:	6313      	str	r3, [r2, #48]	@ 0x30
 800094c:	e020      	b.n	8000990 <MRCC_voidEnablePeripheralClock+0x88>
			case AHB2_BUS: RCC->AHB2ENR|=(1<<Copy_u32Peripheral);        break;
 800094e:	4b13      	ldr	r3, [pc, #76]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000952:	2101      	movs	r1, #1
 8000954:	683a      	ldr	r2, [r7, #0]
 8000956:	fa01 f202 	lsl.w	r2, r1, r2
 800095a:	4611      	mov	r1, r2
 800095c:	4a0f      	ldr	r2, [pc, #60]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 800095e:	430b      	orrs	r3, r1
 8000960:	6353      	str	r3, [r2, #52]	@ 0x34
 8000962:	e015      	b.n	8000990 <MRCC_voidEnablePeripheralClock+0x88>
			case APB1_BUS: RCC->APB1ENR|=(1<<Copy_u32Peripheral);        break;
 8000964:	4b0d      	ldr	r3, [pc, #52]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 8000966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000968:	2101      	movs	r1, #1
 800096a:	683a      	ldr	r2, [r7, #0]
 800096c:	fa01 f202 	lsl.w	r2, r1, r2
 8000970:	4611      	mov	r1, r2
 8000972:	4a0a      	ldr	r2, [pc, #40]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 8000974:	430b      	orrs	r3, r1
 8000976:	6413      	str	r3, [r2, #64]	@ 0x40
 8000978:	e00a      	b.n	8000990 <MRCC_voidEnablePeripheralClock+0x88>
			case APB2_BUS: RCC->APB2ENR|=(1<<Copy_u32Peripheral);        break;
 800097a:	4b08      	ldr	r3, [pc, #32]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097e:	2101      	movs	r1, #1
 8000980:	683a      	ldr	r2, [r7, #0]
 8000982:	fa01 f202 	lsl.w	r2, r1, r2
 8000986:	4611      	mov	r1, r2
 8000988:	4a04      	ldr	r2, [pc, #16]	@ (800099c <MRCC_voidEnablePeripheralClock+0x94>)
 800098a:	430b      	orrs	r3, r1
 800098c:	6453      	str	r3, [r2, #68]	@ 0x44
 800098e:	bf00      	nop
	}
	else
	{
		//Do Nothing
	}
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	40023800 	.word	0x40023800

080009a0 <MSPI_voidMasterInit>:
#include "MSPI_Interface.h"
#include "MSPI_Private.h"
#include "MSPI_Config.h"

void MSPI_voidMasterInit()
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
	SPI1->CR1|=(1<<SSM);
 80009a4:	4b11      	ldr	r3, [pc, #68]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a10      	ldr	r2, [pc, #64]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80009ae:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=(1<<SSI);
 80009b0:	4b0e      	ldr	r3, [pc, #56]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0d      	ldr	r2, [pc, #52]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009ba:	6013      	str	r3, [r2, #0]
	
	SPI1->CR1|=(1<<MSTR);
 80009bc:	4b0b      	ldr	r3, [pc, #44]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a0a      	ldr	r2, [pc, #40]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009c2:	f043 0304 	orr.w	r3, r3, #4
 80009c6:	6013      	str	r3, [r2, #0]
	SPI1->CR1|=(1<<CPOL);
 80009c8:	4b08      	ldr	r3, [pc, #32]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a07      	ldr	r2, [pc, #28]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	6013      	str	r3, [r2, #0]
	
	SPI1->CR1|=(1<<SPE);
 80009d4:	4b05      	ldr	r3, [pc, #20]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a04      	ldr	r2, [pc, #16]	@ (80009ec <MSPI_voidMasterInit+0x4c>)
 80009da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009de:	6013      	str	r3, [r2, #0]
	
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	40013000 	.word	0x40013000

080009f0 <MSPI_u16Tranceive>:
	SPI1->CR1|=(1<<CPOL);
	
	SPI1->CR1|=(1<<SPE);
}
u16 MSPI_u16Tranceive(u16 Copy_u16Data)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b083      	sub	sp, #12
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	80fb      	strh	r3, [r7, #6]
	while(!GET_BIT(SPI1->SR,TXE));
 80009fa:	bf00      	nop
 80009fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <MSPI_u16Tranceive+0x40>)
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f8      	beq.n	80009fc <MSPI_u16Tranceive+0xc>
	SPI1->DR=Copy_u16Data;
 8000a0a:	4a09      	ldr	r2, [pc, #36]	@ (8000a30 <MSPI_u16Tranceive+0x40>)
 8000a0c:	88fb      	ldrh	r3, [r7, #6]
 8000a0e:	60d3      	str	r3, [r2, #12]
	while(!GET_BIT(SPI1->SR,RXNE));
 8000a10:	bf00      	nop
 8000a12:	4b07      	ldr	r3, [pc, #28]	@ (8000a30 <MSPI_u16Tranceive+0x40>)
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f9      	beq.n	8000a12 <MSPI_u16Tranceive+0x22>
	return (u16)(SPI1->DR);
 8000a1e:	4b04      	ldr	r3, [pc, #16]	@ (8000a30 <MSPI_u16Tranceive+0x40>)
 8000a20:	68db      	ldr	r3, [r3, #12]
 8000a22:	b29b      	uxth	r3, r3
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	370c      	adds	r7, #12
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr
 8000a30:	40013000 	.word	0x40013000

08000a34 <MSTK_voidInit>:
#include "MSTK_Interface.h"
#include "MSTK_Private.h"
#include "MSTK_Config.h"

void MSTK_voidInit()
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
	#if (STK_SYSTEM_CLK==STK_AHB_8)
		STK->CTRL&=~(1<<CLOCK_SOURCE);
 8000a38:	4b08      	ldr	r3, [pc, #32]	@ (8000a5c <MSTK_voidInit+0x28>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <MSTK_voidInit+0x28>)
 8000a3e:	f023 0304 	bic.w	r3, r3, #4
 8000a42:	6013      	str	r3, [r2, #0]
	    STK->CTRL&=~(1<<STK_ENABLE);
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <MSTK_voidInit+0x28>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <MSTK_voidInit+0x28>)
 8000a4a:	f023 0301 	bic.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]
	#elif (STK_SYSTEM_CLK==STK_AHB)
		STK->CTRL|=(1<<CLOCK_SOURCE);
	STK->CTRL&=~(1<<STK_ENABLE);
	#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e010 	.word	0xe000e010

08000a60 <MSTK_voidStartTimer>:
void MSTK_voidStartTimer(u32 Copy_u32ReloadValue)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
	STK->LOAD=Copy_u32ReloadValue;
 8000a68:	4a08      	ldr	r2, [pc, #32]	@ (8000a8c <MSTK_voidStartTimer+0x2c>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	6053      	str	r3, [r2, #4]
	STK->VAL=0;
 8000a6e:	4b07      	ldr	r3, [pc, #28]	@ (8000a8c <MSTK_voidStartTimer+0x2c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
	STK->CTRL|=(1<<STK_ENABLE);
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <MSTK_voidStartTimer+0x2c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a04      	ldr	r2, [pc, #16]	@ (8000a8c <MSTK_voidStartTimer+0x2c>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000e010 	.word	0xe000e010

08000a90 <MSTK_voidCtrlIntState>:
void MSTK_voidCtrlIntState(STK_IntState Copy_uddtIntState)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
	STK->CTRL|=(Copy_uddtIntState<<TICKINT);
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <MSTK_voidCtrlIntState+0x24>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4904      	ldr	r1, [pc, #16]	@ (8000ab4 <MSTK_voidCtrlIntState+0x24>)
 8000aa4:	4313      	orrs	r3, r2
 8000aa6:	600b      	str	r3, [r1, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr
 8000ab4:	e000e010 	.word	0xe000e010

08000ab8 <MSTK_u8ReadFlag>:
u8 MSTK_u8ReadFlag()
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
	return GET_BIT(STK->CTRL,COUNT_FLAG);
 8000abc:	4b05      	ldr	r3, [pc, #20]	@ (8000ad4 <MSTK_u8ReadFlag+0x1c>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	0c1b      	lsrs	r3, r3, #16
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	b2db      	uxtb	r3, r3
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000e010 	.word	0xe000e010

08000ad8 <MSTK_voidDelayms>:
{
	return (STK->VAL);
}

void MSTK_voidDelayms(u32 Copy_u32Delayms)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f7ff ffd5 	bl	8000a90 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayms*2000);
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000aec:	fb02 f303 	mul.w	r3, r2, r3
 8000af0:	4618      	mov	r0, r3
 8000af2:	f7ff ffb5 	bl	8000a60 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 8000af6:	bf00      	nop
 8000af8:	f7ff ffde 	bl	8000ab8 <MSTK_u8ReadFlag>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d0fa      	beq.n	8000af8 <MSTK_voidDelayms+0x20>
	STK->CTRL&=~(1<<STK_ENABLE);
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <MSTK_voidDelayms+0x40>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <MSTK_voidDelayms+0x40>)
 8000b08:	f023 0301 	bic.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <MSTK_voidDelayus>:
void MSTK_voidDelayus(u32 Copy_u32Delayus)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	MSTK_voidCtrlIntState(Systick_IntDisable);
 8000b24:	2000      	movs	r0, #0
 8000b26:	f7ff ffb3 	bl	8000a90 <MSTK_voidCtrlIntState>
	MSTK_voidStartTimer(Copy_u32Delayus*2);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	005b      	lsls	r3, r3, #1
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff ff96 	bl	8000a60 <MSTK_voidStartTimer>
	while(MSTK_u8ReadFlag()==0);
 8000b34:	bf00      	nop
 8000b36:	f7ff ffbf 	bl	8000ab8 <MSTK_u8ReadFlag>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d0fa      	beq.n	8000b36 <MSTK_voidDelayus+0x1a>
	STK->CTRL&=~(1<<STK_ENABLE);
 8000b40:	4b04      	ldr	r3, [pc, #16]	@ (8000b54 <MSTK_voidDelayus+0x38>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a03      	ldr	r2, [pc, #12]	@ (8000b54 <MSTK_voidDelayus+0x38>)
 8000b46:	f023 0301 	bic.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	bf00      	nop
 8000b4e:	3708      	adds	r7, #8
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	e000e010 	.word	0xe000e010

08000b58 <XO_voidInitBoard>:
static u8 G_u8GameBoard[3][3];
static u8 G_u8CurrentPlayer;
static u8 G_u8PlayerX_Wins = 0;
static u8 G_u8PlayerO_Wins = 0;

void XO_voidInitBoard(void) {
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
    for (u8 r = 0; r < 3; r++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	71fb      	strb	r3, [r7, #7]
 8000b62:	e015      	b.n	8000b90 <XO_voidInitBoard+0x38>
        for (u8 c = 0; c < 3; c++) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	71bb      	strb	r3, [r7, #6]
 8000b68:	e00c      	b.n	8000b84 <XO_voidInitBoard+0x2c>
            G_u8GameBoard[r][c] = EMPTY;
 8000b6a:	79fa      	ldrb	r2, [r7, #7]
 8000b6c:	79b9      	ldrb	r1, [r7, #6]
 8000b6e:	480e      	ldr	r0, [pc, #56]	@ (8000ba8 <XO_voidInitBoard+0x50>)
 8000b70:	4613      	mov	r3, r2
 8000b72:	005b      	lsls	r3, r3, #1
 8000b74:	4413      	add	r3, r2
 8000b76:	4403      	add	r3, r0
 8000b78:	440b      	add	r3, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	701a      	strb	r2, [r3, #0]
        for (u8 c = 0; c < 3; c++) {
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	3301      	adds	r3, #1
 8000b82:	71bb      	strb	r3, [r7, #6]
 8000b84:	79bb      	ldrb	r3, [r7, #6]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d9ef      	bls.n	8000b6a <XO_voidInitBoard+0x12>
    for (u8 r = 0; r < 3; r++) {
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	79fb      	ldrb	r3, [r7, #7]
 8000b92:	2b02      	cmp	r3, #2
 8000b94:	d9e6      	bls.n	8000b64 <XO_voidInitBoard+0xc>
        }
    }
    // اللاعب X يبدأ اللعبة دائمًا.
    G_u8CurrentPlayer = PLAYER_X;
 8000b96:	4b05      	ldr	r3, [pc, #20]	@ (8000bac <XO_voidInitBoard+0x54>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	701a      	strb	r2, [r3, #0]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	2000007c 	.word	0x2000007c
 8000bac:	20000085 	.word	0x20000085

08000bb0 <XO_u8GetCurrentPlayer>:

u8 XO_u8GetCurrentPlayer(void) {
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
    return G_u8CurrentPlayer;
 8000bb4:	4b03      	ldr	r3, [pc, #12]	@ (8000bc4 <XO_u8GetCurrentPlayer+0x14>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	20000085 	.word	0x20000085

08000bc8 <XO_voidSwitchPlayer>:

void XO_voidSwitchPlayer(void) {
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
    if (G_u8CurrentPlayer == PLAYER_X) {
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <XO_voidSwitchPlayer+0x24>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b01      	cmp	r3, #1
 8000bd2:	d103      	bne.n	8000bdc <XO_voidSwitchPlayer+0x14>
        G_u8CurrentPlayer = PLAYER_O;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	@ (8000bec <XO_voidSwitchPlayer+0x24>)
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	701a      	strb	r2, [r3, #0]
    } else {
        G_u8CurrentPlayer = PLAYER_X;
    }
}
 8000bda:	e002      	b.n	8000be2 <XO_voidSwitchPlayer+0x1a>
        G_u8CurrentPlayer = PLAYER_X;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	@ (8000bec <XO_voidSwitchPlayer+0x24>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	701a      	strb	r2, [r3, #0]
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	20000085 	.word	0x20000085

08000bf0 <XO_u8MakeMove>:

u8 XO_u8MakeMove(u8 Copy_u8Row, u8 Copy_u8Col) {
 8000bf0:	b490      	push	{r4, r7}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	460a      	mov	r2, r1
 8000bfa:	71fb      	strb	r3, [r7, #7]
 8000bfc:	4613      	mov	r3, r2
 8000bfe:	71bb      	strb	r3, [r7, #6]
    // التحقق من الحركات غير الصالحة (خارج الحدود أو الخانة غير فارغة).
    if (Copy_u8Row >= 3 || Copy_u8Col >= 3 || G_u8GameBoard[Copy_u8Row][Copy_u8Col] != EMPTY) {
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d80d      	bhi.n	8000c22 <XO_u8MakeMove+0x32>
 8000c06:	79bb      	ldrb	r3, [r7, #6]
 8000c08:	2b02      	cmp	r3, #2
 8000c0a:	d80a      	bhi.n	8000c22 <XO_u8MakeMove+0x32>
 8000c0c:	79fa      	ldrb	r2, [r7, #7]
 8000c0e:	79b9      	ldrb	r1, [r7, #6]
 8000c10:	480e      	ldr	r0, [pc, #56]	@ (8000c4c <XO_u8MakeMove+0x5c>)
 8000c12:	4613      	mov	r3, r2
 8000c14:	005b      	lsls	r3, r3, #1
 8000c16:	4413      	add	r3, r2
 8000c18:	4403      	add	r3, r0
 8000c1a:	440b      	add	r3, r1
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <XO_u8MakeMove+0x36>
        return 0; // حركة غير صالحة.
 8000c22:	2300      	movs	r3, #0
 8000c24:	e00c      	b.n	8000c40 <XO_u8MakeMove+0x50>
    }
    // وضع علامة اللاعب الحالي على اللوحة.
    G_u8GameBoard[Copy_u8Row][Copy_u8Col] = G_u8CurrentPlayer;
 8000c26:	79fa      	ldrb	r2, [r7, #7]
 8000c28:	79b9      	ldrb	r1, [r7, #6]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <XO_u8MakeMove+0x60>)
 8000c2c:	781c      	ldrb	r4, [r3, #0]
 8000c2e:	4807      	ldr	r0, [pc, #28]	@ (8000c4c <XO_u8MakeMove+0x5c>)
 8000c30:	4613      	mov	r3, r2
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	4403      	add	r3, r0
 8000c38:	440b      	add	r3, r1
 8000c3a:	4622      	mov	r2, r4
 8000c3c:	701a      	strb	r2, [r3, #0]
    return 1; // حركة ناجحة.
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc90      	pop	{r4, r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	2000007c 	.word	0x2000007c
 8000c50:	20000085 	.word	0x20000085

08000c54 <XO_u8CheckGameState>:

u8 XO_u8CheckGameState(void) {
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
    u8 winner = EMPTY;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	71fb      	strb	r3, [r7, #7]

    // التحقق من الصفوف بحثًا عن فوز
    for (u8 i = 0; i < 3; i++) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	71bb      	strb	r3, [r7, #6]
 8000c62:	e037      	b.n	8000cd4 <XO_u8CheckGameState+0x80>
        if (G_u8GameBoard[i][0] != EMPTY && G_u8GameBoard[i][0] == G_u8GameBoard[i][1] && G_u8GameBoard[i][1] == G_u8GameBoard[i][2]) {
 8000c64:	79ba      	ldrb	r2, [r7, #6]
 8000c66:	495e      	ldr	r1, [pc, #376]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000c68:	4613      	mov	r3, r2
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	4413      	add	r3, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d02b      	beq.n	8000cce <XO_u8CheckGameState+0x7a>
 8000c76:	79ba      	ldrb	r2, [r7, #6]
 8000c78:	4959      	ldr	r1, [pc, #356]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000c7a:	4613      	mov	r3, r2
 8000c7c:	005b      	lsls	r3, r3, #1
 8000c7e:	4413      	add	r3, r2
 8000c80:	440b      	add	r3, r1
 8000c82:	7819      	ldrb	r1, [r3, #0]
 8000c84:	79ba      	ldrb	r2, [r7, #6]
 8000c86:	4856      	ldr	r0, [pc, #344]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000c88:	4613      	mov	r3, r2
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	4413      	add	r3, r2
 8000c8e:	4403      	add	r3, r0
 8000c90:	3301      	adds	r3, #1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4299      	cmp	r1, r3
 8000c96:	d11a      	bne.n	8000cce <XO_u8CheckGameState+0x7a>
 8000c98:	79ba      	ldrb	r2, [r7, #6]
 8000c9a:	4951      	ldr	r1, [pc, #324]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4413      	add	r3, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	7819      	ldrb	r1, [r3, #0]
 8000ca8:	79ba      	ldrb	r2, [r7, #6]
 8000caa:	484d      	ldr	r0, [pc, #308]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000cac:	4613      	mov	r3, r2
 8000cae:	005b      	lsls	r3, r3, #1
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4403      	add	r3, r0
 8000cb4:	3302      	adds	r3, #2
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	4299      	cmp	r1, r3
 8000cba:	d108      	bne.n	8000cce <XO_u8CheckGameState+0x7a>
            winner = G_u8GameBoard[i][0];
 8000cbc:	79ba      	ldrb	r2, [r7, #6]
 8000cbe:	4948      	ldr	r1, [pc, #288]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000cc0:	4613      	mov	r3, r2
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	4413      	add	r3, r2
 8000cc6:	440b      	add	r3, r1
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	71fb      	strb	r3, [r7, #7]
            break;
 8000ccc:	e005      	b.n	8000cda <XO_u8CheckGameState+0x86>
    for (u8 i = 0; i < 3; i++) {
 8000cce:	79bb      	ldrb	r3, [r7, #6]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	71bb      	strb	r3, [r7, #6]
 8000cd4:	79bb      	ldrb	r3, [r7, #6]
 8000cd6:	2b02      	cmp	r3, #2
 8000cd8:	d9c4      	bls.n	8000c64 <XO_u8CheckGameState+0x10>
        }
    }

    // التحقق من الأعمدة بحثًا عن فوز، إذا لم يكن هناك فائز بعد
    if (winner == EMPTY) {
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d125      	bne.n	8000d2c <XO_u8CheckGameState+0xd8>
        for (u8 i = 0; i < 3; i++) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	717b      	strb	r3, [r7, #5]
 8000ce4:	e01f      	b.n	8000d26 <XO_u8CheckGameState+0xd2>
            if (G_u8GameBoard[0][i] != EMPTY && G_u8GameBoard[0][i] == G_u8GameBoard[1][i] && G_u8GameBoard[1][i] == G_u8GameBoard[2][i]) {
 8000ce6:	797b      	ldrb	r3, [r7, #5]
 8000ce8:	4a3d      	ldr	r2, [pc, #244]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000cea:	5cd3      	ldrb	r3, [r2, r3]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d017      	beq.n	8000d20 <XO_u8CheckGameState+0xcc>
 8000cf0:	797b      	ldrb	r3, [r7, #5]
 8000cf2:	4a3b      	ldr	r2, [pc, #236]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000cf4:	5cd2      	ldrb	r2, [r2, r3]
 8000cf6:	797b      	ldrb	r3, [r7, #5]
 8000cf8:	4939      	ldr	r1, [pc, #228]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000cfa:	440b      	add	r3, r1
 8000cfc:	78db      	ldrb	r3, [r3, #3]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d10e      	bne.n	8000d20 <XO_u8CheckGameState+0xcc>
 8000d02:	797b      	ldrb	r3, [r7, #5]
 8000d04:	4a36      	ldr	r2, [pc, #216]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d06:	4413      	add	r3, r2
 8000d08:	78da      	ldrb	r2, [r3, #3]
 8000d0a:	797b      	ldrb	r3, [r7, #5]
 8000d0c:	4934      	ldr	r1, [pc, #208]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d0e:	440b      	add	r3, r1
 8000d10:	799b      	ldrb	r3, [r3, #6]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d104      	bne.n	8000d20 <XO_u8CheckGameState+0xcc>
                winner = G_u8GameBoard[0][i];
 8000d16:	797b      	ldrb	r3, [r7, #5]
 8000d18:	4a31      	ldr	r2, [pc, #196]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d1a:	5cd3      	ldrb	r3, [r2, r3]
 8000d1c:	71fb      	strb	r3, [r7, #7]
                break;
 8000d1e:	e005      	b.n	8000d2c <XO_u8CheckGameState+0xd8>
        for (u8 i = 0; i < 3; i++) {
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	3301      	adds	r3, #1
 8000d24:	717b      	strb	r3, [r7, #5]
 8000d26:	797b      	ldrb	r3, [r7, #5]
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d9dc      	bls.n	8000ce6 <XO_u8CheckGameState+0x92>
            }
        }
    }

    // التحقق من الأقطار بحثًا عن فوز، إذا لم يكن هناك فائز بعد
    if (winner == EMPTY) {
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d126      	bne.n	8000d80 <XO_u8CheckGameState+0x12c>
        if (G_u8GameBoard[0][0] != EMPTY && G_u8GameBoard[0][0] == G_u8GameBoard[1][1] && G_u8GameBoard[1][1] == G_u8GameBoard[2][2]) {
 8000d32:	4b2b      	ldr	r3, [pc, #172]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d00f      	beq.n	8000d5a <XO_u8CheckGameState+0x106>
 8000d3a:	4b29      	ldr	r3, [pc, #164]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d3c:	781a      	ldrb	r2, [r3, #0]
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d40:	791b      	ldrb	r3, [r3, #4]
 8000d42:	429a      	cmp	r2, r3
 8000d44:	d109      	bne.n	8000d5a <XO_u8CheckGameState+0x106>
 8000d46:	4b26      	ldr	r3, [pc, #152]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d48:	791a      	ldrb	r2, [r3, #4]
 8000d4a:	4b25      	ldr	r3, [pc, #148]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d4c:	7a1b      	ldrb	r3, [r3, #8]
 8000d4e:	429a      	cmp	r2, r3
 8000d50:	d103      	bne.n	8000d5a <XO_u8CheckGameState+0x106>
            winner = G_u8GameBoard[1][1];
 8000d52:	4b23      	ldr	r3, [pc, #140]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d54:	791b      	ldrb	r3, [r3, #4]
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	e012      	b.n	8000d80 <XO_u8CheckGameState+0x12c>
        } else if (G_u8GameBoard[0][2] != EMPTY && G_u8GameBoard[0][2] == G_u8GameBoard[1][1] && G_u8GameBoard[1][1] == G_u8GameBoard[2][0]) {
 8000d5a:	4b21      	ldr	r3, [pc, #132]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d5c:	789b      	ldrb	r3, [r3, #2]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00e      	beq.n	8000d80 <XO_u8CheckGameState+0x12c>
 8000d62:	4b1f      	ldr	r3, [pc, #124]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d64:	789a      	ldrb	r2, [r3, #2]
 8000d66:	4b1e      	ldr	r3, [pc, #120]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d68:	791b      	ldrb	r3, [r3, #4]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d108      	bne.n	8000d80 <XO_u8CheckGameState+0x12c>
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d70:	791a      	ldrb	r2, [r3, #4]
 8000d72:	4b1b      	ldr	r3, [pc, #108]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d74:	799b      	ldrb	r3, [r3, #6]
 8000d76:	429a      	cmp	r2, r3
 8000d78:	d102      	bne.n	8000d80 <XO_u8CheckGameState+0x12c>
            winner = G_u8GameBoard[1][1];
 8000d7a:	4b19      	ldr	r3, [pc, #100]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000d7c:	791b      	ldrb	r3, [r3, #4]
 8000d7e:	71fb      	strb	r3, [r7, #7]
        }
    }

    if (winner == PLAYER_X) return GAME_WIN_X;
 8000d80:	79fb      	ldrb	r3, [r7, #7]
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d101      	bne.n	8000d8a <XO_u8CheckGameState+0x136>
 8000d86:	2301      	movs	r3, #1
 8000d88:	e024      	b.n	8000dd4 <XO_u8CheckGameState+0x180>
    if (winner == PLAYER_O) return GAME_WIN_O;
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b02      	cmp	r3, #2
 8000d8e:	d101      	bne.n	8000d94 <XO_u8CheckGameState+0x140>
 8000d90:	2302      	movs	r3, #2
 8000d92:	e01f      	b.n	8000dd4 <XO_u8CheckGameState+0x180>

    // التحقق من التعادل (إذا لم يكن هناك فائز واللوحة ممتلئة)
    for (u8 r = 0; r < 3; r++) {
 8000d94:	2300      	movs	r3, #0
 8000d96:	713b      	strb	r3, [r7, #4]
 8000d98:	e018      	b.n	8000dcc <XO_u8CheckGameState+0x178>
        for (u8 c = 0; c < 3; c++) {
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	70fb      	strb	r3, [r7, #3]
 8000d9e:	e00f      	b.n	8000dc0 <XO_u8CheckGameState+0x16c>
            if (G_u8GameBoard[r][c] == EMPTY) {
 8000da0:	793a      	ldrb	r2, [r7, #4]
 8000da2:	78f9      	ldrb	r1, [r7, #3]
 8000da4:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <XO_u8CheckGameState+0x18c>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	4403      	add	r3, r0
 8000dae:	440b      	add	r3, r1
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d101      	bne.n	8000dba <XO_u8CheckGameState+0x166>
                return GAME_ONGOING; // اللعبة لم تنته بعد.
 8000db6:	2300      	movs	r3, #0
 8000db8:	e00c      	b.n	8000dd4 <XO_u8CheckGameState+0x180>
        for (u8 c = 0; c < 3; c++) {
 8000dba:	78fb      	ldrb	r3, [r7, #3]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	70fb      	strb	r3, [r7, #3]
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d9ec      	bls.n	8000da0 <XO_u8CheckGameState+0x14c>
    for (u8 r = 0; r < 3; r++) {
 8000dc6:	793b      	ldrb	r3, [r7, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	713b      	strb	r3, [r7, #4]
 8000dcc:	793b      	ldrb	r3, [r7, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	d9e3      	bls.n	8000d9a <XO_u8CheckGameState+0x146>
            }
        }
    }

    return GAME_DRAW; // إنها حالة تعادل.
 8000dd2:	2303      	movs	r3, #3
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	2000007c 	.word	0x2000007c

08000de4 <XO_voidIncrementWinCount>:

/************************************************/
/* تنفيذ دوال عداد الفوز                  */
/************************************************/

void XO_voidIncrementWinCount(u8 Copy_u8Player) {
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
    if (Copy_u8Player == PLAYER_X) {
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d106      	bne.n	8000e02 <XO_voidIncrementWinCount+0x1e>
        G_u8PlayerX_Wins++;
 8000df4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e20 <XO_voidIncrementWinCount+0x3c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <XO_voidIncrementWinCount+0x3c>)
 8000dfe:	701a      	strb	r2, [r3, #0]
    } else if (Copy_u8Player == PLAYER_O) {
        G_u8PlayerO_Wins++;
    }
}
 8000e00:	e008      	b.n	8000e14 <XO_voidIncrementWinCount+0x30>
    } else if (Copy_u8Player == PLAYER_O) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d105      	bne.n	8000e14 <XO_voidIncrementWinCount+0x30>
        G_u8PlayerO_Wins++;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <XO_voidIncrementWinCount+0x40>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	4b04      	ldr	r3, [pc, #16]	@ (8000e24 <XO_voidIncrementWinCount+0x40>)
 8000e12:	701a      	strb	r2, [r3, #0]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	20000086 	.word	0x20000086
 8000e24:	20000087 	.word	0x20000087

08000e28 <XO_u8GetWinCount>:

u8 XO_u8GetWinCount(u8 Copy_u8Player) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
    if (Copy_u8Player == PLAYER_X) {
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d102      	bne.n	8000e3e <XO_u8GetWinCount+0x16>
        return G_u8PlayerX_Wins;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <XO_u8GetWinCount+0x30>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	e006      	b.n	8000e4c <XO_u8GetWinCount+0x24>
    } else if (Copy_u8Player == PLAYER_O) {
 8000e3e:	79fb      	ldrb	r3, [r7, #7]
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d102      	bne.n	8000e4a <XO_u8GetWinCount+0x22>
        return G_u8PlayerO_Wins;
 8000e44:	4b05      	ldr	r3, [pc, #20]	@ (8000e5c <XO_u8GetWinCount+0x34>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	e000      	b.n	8000e4c <XO_u8GetWinCount+0x24>
    }
    return 0;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	20000086 	.word	0x20000086
 8000e5c:	20000087 	.word	0x20000087

08000e60 <XO_voidResetWinCounters>:

void XO_voidResetWinCounters(void) {
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
    G_u8PlayerX_Wins = 0;
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <XO_voidResetWinCounters+0x1c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
    G_u8PlayerO_Wins = 0;
 8000e6a:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <XO_voidResetWinCounters+0x20>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	701a      	strb	r2, [r3, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000086 	.word	0x20000086
 8000e80:	20000087 	.word	0x20000087

08000e84 <main>:

u8 debounce(Port_t port, PIN_t pin);
u8 check_long_press(Port_t port, PIN_t pin, u16 delay_ms);

int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af02      	add	r7, sp, #8
	/* تهيئة المتحكم */
	MRCC_voidInit();
 8000e8a:	f7ff fd1b 	bl	80008c4 <MRCC_voidInit>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, AHB1_GPIOA);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2000      	movs	r0, #0
 8000e92:	f7ff fd39 	bl	8000908 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(AHB1_BUS, AHB1_GPIOB);
 8000e96:	2101      	movs	r1, #1
 8000e98:	2000      	movs	r0, #0
 8000e9a:	f7ff fd35 	bl	8000908 <MRCC_voidEnablePeripheralClock>
	MRCC_voidEnablePeripheralClock(APB2_BUS, APB2_SPI1);
 8000e9e:	210c      	movs	r1, #12
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f7ff fd31 	bl	8000908 <MRCC_voidEnablePeripheralClock>
	MSTK_voidInit();
 8000ea6:	f7ff fdc5 	bl	8000a34 <MSTK_voidInit>

	/* تهيئة بنات SPI */
	MGPIO_voidSetMode(PORTA, PIN5, Alternative_Func); // SCK
 8000eaa:	2202      	movs	r2, #2
 8000eac:	2105      	movs	r1, #5
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff fae6 	bl	8000480 <MGPIO_voidSetMode>
	MGPIO_voidSetAlternativeConfig(PORTA, PIN5, AF5);
 8000eb4:	2205      	movs	r2, #5
 8000eb6:	2105      	movs	r1, #5
 8000eb8:	2000      	movs	r0, #0
 8000eba:	f7ff fc85 	bl	80007c8 <MGPIO_voidSetAlternativeConfig>
	MGPIO_voidSetMode(PORTA, PIN7, Alternative_Func); // MOSI
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	2107      	movs	r1, #7
 8000ec2:	2000      	movs	r0, #0
 8000ec4:	f7ff fadc 	bl	8000480 <MGPIO_voidSetMode>
	MGPIO_voidSetAlternativeConfig(PORTA, PIN7, AF5);
 8000ec8:	2205      	movs	r2, #5
 8000eca:	2107      	movs	r1, #7
 8000ecc:	2000      	movs	r0, #0
 8000ece:	f7ff fc7b 	bl	80007c8 <MGPIO_voidSetAlternativeConfig>

    /* تهيئة بنات الأزرار (Input with Pull-down) لتناسب توصيل VCC */
    MGPIO_voidSetMode(X_PLAYER_BUTTON_PORT, X_PLAYER_BUTTON_PIN, INPUT);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2106      	movs	r1, #6
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff fad2 	bl	8000480 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(X_PLAYER_BUTTON_PORT, X_PLAYER_BUTTON_PIN, PULLDOWN);
 8000edc:	2202      	movs	r2, #2
 8000ede:	2106      	movs	r1, #6
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f7ff fbe5 	bl	80006b0 <MGPIO_voidSetInputConfig>

    MGPIO_voidSetMode(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN, INPUT);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2107      	movs	r1, #7
 8000eea:	2001      	movs	r0, #1
 8000eec:	f7ff fac8 	bl	8000480 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN, PULLDOWN);
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2107      	movs	r1, #7
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	f7ff fbdb 	bl	80006b0 <MGPIO_voidSetInputConfig>

    MGPIO_voidSetMode(O_PLAYER_BUTTON_PORT, O_PLAYER_BUTTON_PIN, INPUT);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2108      	movs	r1, #8
 8000efe:	2001      	movs	r0, #1
 8000f00:	f7ff fabe 	bl	8000480 <MGPIO_voidSetMode>
    MGPIO_voidSetInputConfig(O_PLAYER_BUTTON_PORT, O_PLAYER_BUTTON_PIN, PULLDOWN);
 8000f04:	2202      	movs	r2, #2
 8000f06:	2108      	movs	r1, #8
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fbd1 	bl	80006b0 <MGPIO_voidSetInputConfig>

	/* تهيئة الطرفيات */
	MSPI_voidMasterInit();
 8000f0e:	f7ff fd47 	bl	80009a0 <MSPI_voidMasterInit>
	HTFT_voidInit();
 8000f12:	f7ff f9b5 	bl	8000280 <HTFT_voidInit>

GAME_START:
	XO_voidInitBoard();
 8000f16:	f7ff fe1f 	bl	8000b58 <XO_voidInitBoard>
	GUI_voidDrawBoard();
 8000f1a:	f000 f91a 	bl	8001152 <GUI_voidDrawBoard>
    GUI_voidUpdateWinCounters();
 8000f1e:	f000 fa13 	bl	8001348 <GUI_voidUpdateWinCounters>

	u8 cursor_row = 0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	71fb      	strb	r3, [r7, #7]
	u8 cursor_col = 0;
 8000f26:	2300      	movs	r3, #0
 8000f28:	71bb      	strb	r3, [r7, #6]
	u8 game_state = GAME_ONGOING;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	717b      	strb	r3, [r7, #5]

	GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW);
 8000f2e:	79b9      	ldrb	r1, [r7, #6]
 8000f30:	79fb      	ldrb	r3, [r7, #7]
 8000f32:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f9ba 	bl	80012b0 <GUI_voidDrawCursor>

	while (1)
	{
		// 1. التحقق من نهاية اللعبة أولاً
		if (game_state != GAME_ONGOING) {
 8000f3c:	797b      	ldrb	r3, [r7, #5]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d014      	beq.n	8000f6c <main+0xe8>
            // زيادة عداد الفوز إذا لم يكن تعادلاً
            if(game_state == GAME_WIN_X) XO_voidIncrementWinCount(PLAYER_X);
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d102      	bne.n	8000f4e <main+0xca>
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f7ff ff4b 	bl	8000de4 <XO_voidIncrementWinCount>
            if(game_state == GAME_WIN_O) XO_voidIncrementWinCount(PLAYER_O);
 8000f4e:	797b      	ldrb	r3, [r7, #5]
 8000f50:	2b02      	cmp	r3, #2
 8000f52:	d102      	bne.n	8000f5a <main+0xd6>
 8000f54:	2002      	movs	r0, #2
 8000f56:	f7ff ff45 	bl	8000de4 <XO_voidIncrementWinCount>

            // عرض شاشة النهاية مع النتائج المحدثة
            GUI_voidShowEndScreen(game_state);
 8000f5a:	797b      	ldrb	r3, [r7, #5]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f000 fa37 	bl	80013d0 <GUI_voidShowEndScreen>
			MSTK_voidDelayms(4000); // انتظر 4 ثوانٍ
 8000f62:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000f66:	f7ff fdb7 	bl	8000ad8 <MSTK_voidDelayms>
			goto GAME_START; // ابدأ جولة جديدة
 8000f6a:	e7d4      	b.n	8000f16 <main+0x92>
		}

		// 2. معالجة إدخال الأزرار العامة (التنقل و Reset)
        if (debounce(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN)) {
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	2001      	movs	r0, #1
 8000f70:	f000 f891 	bl	8001096 <debounce>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d01c      	beq.n	8000fb4 <main+0x130>
            GUI_voidDrawCursor(cursor_row, cursor_col, BLACK); // امسح المؤشر القديم
 8000f7a:	79b9      	ldrb	r1, [r7, #6]
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 f995 	bl	80012b0 <GUI_voidDrawCursor>
            cursor_col++;
 8000f86:	79bb      	ldrb	r3, [r7, #6]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	71bb      	strb	r3, [r7, #6]
            if (cursor_col > 2) {
 8000f8c:	79bb      	ldrb	r3, [r7, #6]
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d909      	bls.n	8000fa6 <main+0x122>
                cursor_col = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	71bb      	strb	r3, [r7, #6]
                cursor_row++;
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	71fb      	strb	r3, [r7, #7]
                if (cursor_row > 2) {
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d901      	bls.n	8000fa6 <main+0x122>
                    cursor_row = 0;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	71fb      	strb	r3, [r7, #7]
                }
            }
            GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW); // ارسم المؤشر الجديد
 8000fa6:	79b9      	ldrb	r1, [r7, #6]
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 f97e 	bl	80012b0 <GUI_voidDrawCursor>
        }

        if (check_long_press(MOVE_BUTTON_PORT, MOVE_BUTTON_PIN, 1500)) {
 8000fb4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000fb8:	2107      	movs	r1, #7
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f000 f899 	bl	80010f2 <check_long_press>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d01a      	beq.n	8000ffc <main+0x178>
            XO_voidResetWinCounters();
 8000fc6:	f7ff ff4b 	bl	8000e60 <XO_voidResetWinCounters>
            GUI_voidUpdateWinCounters();
 8000fca:	f000 f9bd 	bl	8001348 <GUI_voidUpdateWinCounters>
            // وميض الشاشة لتأكيد إعادة التعيين
            HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, WHITE);
 8000fce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fd2:	9300      	str	r3, [sp, #0]
 8000fd4:	23a0      	movs	r3, #160	@ 0xa0
 8000fd6:	2280      	movs	r2, #128	@ 0x80
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff fa22 	bl	8000424 <HTFT_voidFillRect>
            MSTK_voidDelayms(150);
 8000fe0:	2096      	movs	r0, #150	@ 0x96
 8000fe2:	f7ff fd79 	bl	8000ad8 <MSTK_voidDelayms>
            GUI_voidDrawBoard();
 8000fe6:	f000 f8b4 	bl	8001152 <GUI_voidDrawBoard>
            GUI_voidUpdateWinCounters();
 8000fea:	f000 f9ad 	bl	8001348 <GUI_voidUpdateWinCounters>
            GUI_voidDrawCursor(cursor_row, cursor_col, YELLOW);
 8000fee:	79b9      	ldrb	r1, [r7, #6]
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f95a 	bl	80012b0 <GUI_voidDrawCursor>
        }

        // 3. معالجة إدخال أزرار اللاعبين (المنطق الجديد)
        u8 current_player = XO_u8GetCurrentPlayer();
 8000ffc:	f7ff fdd8 	bl	8000bb0 <XO_u8GetCurrentPlayer>
 8001000:	4603      	mov	r3, r0
 8001002:	713b      	strb	r3, [r7, #4]

        // إذا كان دور اللاعب X
        if (current_player == PLAYER_X) {
 8001004:	793b      	ldrb	r3, [r7, #4]
 8001006:	2b01      	cmp	r3, #1
 8001008:	d11f      	bne.n	800104a <main+0x1c6>
            if (debounce(X_PLAYER_BUTTON_PORT, X_PLAYER_BUTTON_PIN)) {
 800100a:	2106      	movs	r1, #6
 800100c:	2001      	movs	r0, #1
 800100e:	f000 f842 	bl	8001096 <debounce>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d03a      	beq.n	800108e <main+0x20a>
                if (XO_u8MakeMove(cursor_row, cursor_col)) {
 8001018:	79ba      	ldrb	r2, [r7, #6]
 800101a:	79fb      	ldrb	r3, [r7, #7]
 800101c:	4611      	mov	r1, r2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff fde6 	bl	8000bf0 <XO_u8MakeMove>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d031      	beq.n	800108e <main+0x20a>
                    GUI_voidDrawSymbol(cursor_row, cursor_col, current_player);
 800102a:	793a      	ldrb	r2, [r7, #4]
 800102c:	79b9      	ldrb	r1, [r7, #6]
 800102e:	79fb      	ldrb	r3, [r7, #7]
 8001030:	4618      	mov	r0, r3
 8001032:	f000 f8c0 	bl	80011b6 <GUI_voidDrawSymbol>
                    game_state = XO_u8CheckGameState(); // تحقق من الفوز بعد اللعب
 8001036:	f7ff fe0d 	bl	8000c54 <XO_u8CheckGameState>
 800103a:	4603      	mov	r3, r0
 800103c:	717b      	strb	r3, [r7, #5]
                    if(game_state == GAME_ONGOING) {
 800103e:	797b      	ldrb	r3, [r7, #5]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d124      	bne.n	800108e <main+0x20a>
                        XO_voidSwitchPlayer();
 8001044:	f7ff fdc0 	bl	8000bc8 <XO_voidSwitchPlayer>
 8001048:	e021      	b.n	800108e <main+0x20a>
                    }
                }
            }
        }
        // إذا كان دور اللاعب O
        else if (current_player == PLAYER_O) {
 800104a:	793b      	ldrb	r3, [r7, #4]
 800104c:	2b02      	cmp	r3, #2
 800104e:	d11e      	bne.n	800108e <main+0x20a>
            if (debounce(O_PLAYER_BUTTON_PORT, O_PLAYER_BUTTON_PIN)) {
 8001050:	2108      	movs	r1, #8
 8001052:	2001      	movs	r0, #1
 8001054:	f000 f81f 	bl	8001096 <debounce>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d017      	beq.n	800108e <main+0x20a>
                if (XO_u8MakeMove(cursor_row, cursor_col)) {
 800105e:	79ba      	ldrb	r2, [r7, #6]
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	4611      	mov	r1, r2
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff fdc3 	bl	8000bf0 <XO_u8MakeMove>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <main+0x20a>
                    GUI_voidDrawSymbol(cursor_row, cursor_col, current_player);
 8001070:	793a      	ldrb	r2, [r7, #4]
 8001072:	79b9      	ldrb	r1, [r7, #6]
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f89d 	bl	80011b6 <GUI_voidDrawSymbol>
                    game_state = XO_u8CheckGameState(); // تحقق من الفوز بعد اللعب
 800107c:	f7ff fdea 	bl	8000c54 <XO_u8CheckGameState>
 8001080:	4603      	mov	r3, r0
 8001082:	717b      	strb	r3, [r7, #5]
                    if(game_state == GAME_ONGOING) {
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <main+0x20a>
                        XO_voidSwitchPlayer();
 800108a:	f7ff fd9d 	bl	8000bc8 <XO_voidSwitchPlayer>
                    }
                }
            }
        }

        MSTK_voidDelayms(50);
 800108e:	2032      	movs	r0, #50	@ 0x32
 8001090:	f7ff fd22 	bl	8000ad8 <MSTK_voidDelayms>
	{
 8001094:	e752      	b.n	8000f3c <main+0xb8>

08001096 <debounce>:
	}
}

// دوال قراءة الأزرار (تتحقق من HIGH بسبب توصيل VCC)
u8 debounce(Port_t port, PIN_t pin) {
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	460a      	mov	r2, r1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	4613      	mov	r3, r2
 80010a4:	71bb      	strb	r3, [r7, #6]
    if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 80010a6:	79ba      	ldrb	r2, [r7, #6]
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	4611      	mov	r1, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fb4f 	bl	8000750 <MGPIO_u8GetPinValue>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d117      	bne.n	80010e8 <debounce+0x52>
        MSTK_voidDelayms(50);
 80010b8:	2032      	movs	r0, #50	@ 0x32
 80010ba:	f7ff fd0d 	bl	8000ad8 <MSTK_voidDelayms>
        if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 80010be:	79ba      	ldrb	r2, [r7, #6]
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fb43 	bl	8000750 <MGPIO_u8GetPinValue>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d10b      	bne.n	80010e8 <debounce+0x52>
            while(MGPIO_u8GetPinValue(port, pin) == HIGH);
 80010d0:	bf00      	nop
 80010d2:	79ba      	ldrb	r2, [r7, #6]
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	4611      	mov	r1, r2
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fb39 	bl	8000750 <MGPIO_u8GetPinValue>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d0f6      	beq.n	80010d2 <debounce+0x3c>
            return 1;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <debounce+0x54>
        }
    }
    return 0;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <check_long_press>:

u8 check_long_press(Port_t port, PIN_t pin, u16 delay_ms) {
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	71fb      	strb	r3, [r7, #7]
 80010fc:	460b      	mov	r3, r1
 80010fe:	71bb      	strb	r3, [r7, #6]
 8001100:	4613      	mov	r3, r2
 8001102:	80bb      	strh	r3, [r7, #4]
    if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 8001104:	79ba      	ldrb	r2, [r7, #6]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fb20 	bl	8000750 <MGPIO_u8GetPinValue>
 8001110:	4603      	mov	r3, r0
 8001112:	2b01      	cmp	r3, #1
 8001114:	d118      	bne.n	8001148 <check_long_press+0x56>
        MSTK_voidDelayms(delay_ms);
 8001116:	88bb      	ldrh	r3, [r7, #4]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fcdd 	bl	8000ad8 <MSTK_voidDelayms>
        if (MGPIO_u8GetPinValue(port, pin) == HIGH) {
 800111e:	79ba      	ldrb	r2, [r7, #6]
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	4611      	mov	r1, r2
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff fb13 	bl	8000750 <MGPIO_u8GetPinValue>
 800112a:	4603      	mov	r3, r0
 800112c:	2b01      	cmp	r3, #1
 800112e:	d10b      	bne.n	8001148 <check_long_press+0x56>
            while(MGPIO_u8GetPinValue(port, pin) == HIGH);
 8001130:	bf00      	nop
 8001132:	79ba      	ldrb	r2, [r7, #6]
 8001134:	79fb      	ldrb	r3, [r7, #7]
 8001136:	4611      	mov	r1, r2
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fb09 	bl	8000750 <MGPIO_u8GetPinValue>
 800113e:	4603      	mov	r3, r0
 8001140:	2b01      	cmp	r3, #1
 8001142:	d0f6      	beq.n	8001132 <check_long_press+0x40>
            return 1;
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <check_long_press+0x58>
        }
    }
    return 0;
 8001148:	2300      	movs	r3, #0
}
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <GUI_voidDrawBoard>:

// دوال الرسم
void GUI_voidDrawBoard(void) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af02      	add	r7, sp, #8
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);
 8001158:	2300      	movs	r3, #0
 800115a:	9300      	str	r3, [sp, #0]
 800115c:	23a0      	movs	r3, #160	@ 0xa0
 800115e:	2280      	movs	r2, #128	@ 0x80
 8001160:	2100      	movs	r1, #0
 8001162:	2000      	movs	r0, #0
 8001164:	f7ff f95e 	bl	8000424 <HTFT_voidFillRect>
    HTFT_voidFillRect(BOARD_ORIGIN_X + CELL_SIZE - (GRID_THICKNESS/2), BOARD_ORIGIN_Y, GRID_THICKNESS, CELL_SIZE * 3, WHITE);
 8001168:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2378      	movs	r3, #120	@ 0x78
 8001170:	2204      	movs	r2, #4
 8001172:	2114      	movs	r1, #20
 8001174:	202a      	movs	r0, #42	@ 0x2a
 8001176:	f7ff f955 	bl	8000424 <HTFT_voidFillRect>
    HTFT_voidFillRect(BOARD_ORIGIN_X + CELL_SIZE * 2 - (GRID_THICKNESS/2), BOARD_ORIGIN_Y, GRID_THICKNESS, CELL_SIZE * 3, WHITE);
 800117a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	2378      	movs	r3, #120	@ 0x78
 8001182:	2204      	movs	r2, #4
 8001184:	2114      	movs	r1, #20
 8001186:	2052      	movs	r0, #82	@ 0x52
 8001188:	f7ff f94c 	bl	8000424 <HTFT_voidFillRect>
    HTFT_voidFillRect(BOARD_ORIGIN_X, BOARD_ORIGIN_Y + CELL_SIZE - (GRID_THICKNESS/2), CELL_SIZE * 3, GRID_THICKNESS, WHITE);
 800118c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2304      	movs	r3, #4
 8001194:	2278      	movs	r2, #120	@ 0x78
 8001196:	213a      	movs	r1, #58	@ 0x3a
 8001198:	2004      	movs	r0, #4
 800119a:	f7ff f943 	bl	8000424 <HTFT_voidFillRect>
    HTFT_voidFillRect(BOARD_ORIGIN_X, BOARD_ORIGIN_Y + CELL_SIZE * 2 - (GRID_THICKNESS/2), CELL_SIZE * 3, GRID_THICKNESS, WHITE);
 800119e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2304      	movs	r3, #4
 80011a6:	2278      	movs	r2, #120	@ 0x78
 80011a8:	2162      	movs	r1, #98	@ 0x62
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff f93a 	bl	8000424 <HTFT_voidFillRect>
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}

080011b6 <GUI_voidDrawSymbol>:

void GUI_voidDrawSymbol(u8 Copy_u8Row, u8 Copy_u8Col, u8 Copy_u8Player) {
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b086      	sub	sp, #24
 80011ba:	af02      	add	r7, sp, #8
 80011bc:	4603      	mov	r3, r0
 80011be:	71fb      	strb	r3, [r7, #7]
 80011c0:	460b      	mov	r3, r1
 80011c2:	71bb      	strb	r3, [r7, #6]
 80011c4:	4613      	mov	r3, r2
 80011c6:	717b      	strb	r3, [r7, #5]
    u8 x_start = BOARD_ORIGIN_X + (Copy_u8Col * CELL_SIZE) + SYMBOL_PADDING;
 80011c8:	79bb      	ldrb	r3, [r7, #6]
 80011ca:	461a      	mov	r2, r3
 80011cc:	0092      	lsls	r2, r2, #2
 80011ce:	4413      	add	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	3309      	adds	r3, #9
 80011d6:	73bb      	strb	r3, [r7, #14]
    u8 y_start = BOARD_ORIGIN_Y + (Copy_u8Row * CELL_SIZE) + SYMBOL_PADDING;
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	461a      	mov	r2, r3
 80011dc:	0092      	lsls	r2, r2, #2
 80011de:	4413      	add	r3, r2
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	3319      	adds	r3, #25
 80011e6:	737b      	strb	r3, [r7, #13]
    u8 symbol_size = CELL_SIZE - (2 * SYMBOL_PADDING);
 80011e8:	231e      	movs	r3, #30
 80011ea:	733b      	strb	r3, [r7, #12]

    if (Copy_u8Player == PLAYER_X) {
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d12d      	bne.n	800124e <GUI_voidDrawSymbol+0x98>
        for(u8 i=0; i < symbol_size; i++) {
 80011f2:	2300      	movs	r3, #0
 80011f4:	73fb      	strb	r3, [r7, #15]
 80011f6:	e025      	b.n	8001244 <GUI_voidDrawSymbol+0x8e>
            HTFT_voidFillRect(x_start + i, y_start + i, 2, 2, RED);
 80011f8:	7bba      	ldrb	r2, [r7, #14]
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	4413      	add	r3, r2
 80011fe:	b2d8      	uxtb	r0, r3
 8001200:	7b7a      	ldrb	r2, [r7, #13]
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	4413      	add	r3, r2
 8001206:	b2d9      	uxtb	r1, r3
 8001208:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800120c:	9300      	str	r3, [sp, #0]
 800120e:	2302      	movs	r3, #2
 8001210:	2202      	movs	r2, #2
 8001212:	f7ff f907 	bl	8000424 <HTFT_voidFillRect>
            HTFT_voidFillRect(x_start + (symbol_size - i - 1), y_start + i, 2, 2, RED);
 8001216:	7b3a      	ldrb	r2, [r7, #12]
 8001218:	7bfb      	ldrb	r3, [r7, #15]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	7bbb      	ldrb	r3, [r7, #14]
 8001220:	4413      	add	r3, r2
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3b01      	subs	r3, #1
 8001226:	b2d8      	uxtb	r0, r3
 8001228:	7b7a      	ldrb	r2, [r7, #13]
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4413      	add	r3, r2
 800122e:	b2d9      	uxtb	r1, r3
 8001230:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2302      	movs	r3, #2
 8001238:	2202      	movs	r2, #2
 800123a:	f7ff f8f3 	bl	8000424 <HTFT_voidFillRect>
        for(u8 i=0; i < symbol_size; i++) {
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	3301      	adds	r3, #1
 8001242:	73fb      	strb	r3, [r7, #15]
 8001244:	7bfa      	ldrb	r2, [r7, #15]
 8001246:	7b3b      	ldrb	r3, [r7, #12]
 8001248:	429a      	cmp	r2, r3
 800124a:	d3d5      	bcc.n	80011f8 <GUI_voidDrawSymbol+0x42>
        HTFT_voidFillRect(x_start, y_start, symbol_size, 3, BLUE);
        HTFT_voidFillRect(x_start, y_start + symbol_size - 3, symbol_size, 3, BLUE);
        HTFT_voidFillRect(x_start, y_start, 3, symbol_size, BLUE);
        HTFT_voidFillRect(x_start + symbol_size - 3, y_start, 3, symbol_size, BLUE);
    }
}
 800124c:	e02c      	b.n	80012a8 <GUI_voidDrawSymbol+0xf2>
    } else if (Copy_u8Player == PLAYER_O) {
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	2b02      	cmp	r3, #2
 8001252:	d129      	bne.n	80012a8 <GUI_voidDrawSymbol+0xf2>
        HTFT_voidFillRect(x_start, y_start, symbol_size, 3, BLUE);
 8001254:	7b3a      	ldrb	r2, [r7, #12]
 8001256:	7b79      	ldrb	r1, [r7, #13]
 8001258:	7bb8      	ldrb	r0, [r7, #14]
 800125a:	231f      	movs	r3, #31
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2303      	movs	r3, #3
 8001260:	f7ff f8e0 	bl	8000424 <HTFT_voidFillRect>
        HTFT_voidFillRect(x_start, y_start + symbol_size - 3, symbol_size, 3, BLUE);
 8001264:	7b7a      	ldrb	r2, [r7, #13]
 8001266:	7b3b      	ldrb	r3, [r7, #12]
 8001268:	4413      	add	r3, r2
 800126a:	b2db      	uxtb	r3, r3
 800126c:	3b03      	subs	r3, #3
 800126e:	b2d9      	uxtb	r1, r3
 8001270:	7b3a      	ldrb	r2, [r7, #12]
 8001272:	7bb8      	ldrb	r0, [r7, #14]
 8001274:	231f      	movs	r3, #31
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2303      	movs	r3, #3
 800127a:	f7ff f8d3 	bl	8000424 <HTFT_voidFillRect>
        HTFT_voidFillRect(x_start, y_start, 3, symbol_size, BLUE);
 800127e:	7b3b      	ldrb	r3, [r7, #12]
 8001280:	7b79      	ldrb	r1, [r7, #13]
 8001282:	7bb8      	ldrb	r0, [r7, #14]
 8001284:	221f      	movs	r2, #31
 8001286:	9200      	str	r2, [sp, #0]
 8001288:	2203      	movs	r2, #3
 800128a:	f7ff f8cb 	bl	8000424 <HTFT_voidFillRect>
        HTFT_voidFillRect(x_start + symbol_size - 3, y_start, 3, symbol_size, BLUE);
 800128e:	7bba      	ldrb	r2, [r7, #14]
 8001290:	7b3b      	ldrb	r3, [r7, #12]
 8001292:	4413      	add	r3, r2
 8001294:	b2db      	uxtb	r3, r3
 8001296:	3b03      	subs	r3, #3
 8001298:	b2d8      	uxtb	r0, r3
 800129a:	7b3b      	ldrb	r3, [r7, #12]
 800129c:	7b79      	ldrb	r1, [r7, #13]
 800129e:	221f      	movs	r2, #31
 80012a0:	9200      	str	r2, [sp, #0]
 80012a2:	2203      	movs	r2, #3
 80012a4:	f7ff f8be 	bl	8000424 <HTFT_voidFillRect>
}
 80012a8:	bf00      	nop
 80012aa:	3710      	adds	r7, #16
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}

080012b0 <GUI_voidDrawCursor>:

void GUI_voidDrawCursor(u8 Copy_u8Row, u8 Copy_u8Col, u16 Copy_u16Color) {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b086      	sub	sp, #24
 80012b4:	af02      	add	r7, sp, #8
 80012b6:	4603      	mov	r3, r0
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	460b      	mov	r3, r1
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	4613      	mov	r3, r2
 80012c0:	80bb      	strh	r3, [r7, #4]
	u8 x = BOARD_ORIGIN_X + Copy_u8Col * CELL_SIZE;
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	461a      	mov	r2, r3
 80012c6:	0092      	lsls	r2, r2, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	00db      	lsls	r3, r3, #3
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	3304      	adds	r3, #4
 80012d0:	73fb      	strb	r3, [r7, #15]
	u8 y = BOARD_ORIGIN_Y + Copy_u8Row * CELL_SIZE;
 80012d2:	79fb      	ldrb	r3, [r7, #7]
 80012d4:	461a      	mov	r2, r3
 80012d6:	0092      	lsls	r2, r2, #2
 80012d8:	4413      	add	r3, r2
 80012da:	00db      	lsls	r3, r3, #3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	3314      	adds	r3, #20
 80012e0:	73bb      	strb	r3, [r7, #14]
	u8 thick = 2;
 80012e2:	2302      	movs	r3, #2
 80012e4:	737b      	strb	r3, [r7, #13]
	HTFT_voidFillRect(x, y, CELL_SIZE, thick, Copy_u16Color);
 80012e6:	7b7a      	ldrb	r2, [r7, #13]
 80012e8:	7bb9      	ldrb	r1, [r7, #14]
 80012ea:	7bf8      	ldrb	r0, [r7, #15]
 80012ec:	88bb      	ldrh	r3, [r7, #4]
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4613      	mov	r3, r2
 80012f2:	2228      	movs	r2, #40	@ 0x28
 80012f4:	f7ff f896 	bl	8000424 <HTFT_voidFillRect>
	HTFT_voidFillRect(x, y + CELL_SIZE - thick, CELL_SIZE, thick, Copy_u16Color);
 80012f8:	7bba      	ldrb	r2, [r7, #14]
 80012fa:	7b7b      	ldrb	r3, [r7, #13]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	3328      	adds	r3, #40	@ 0x28
 8001302:	b2d9      	uxtb	r1, r3
 8001304:	7b7a      	ldrb	r2, [r7, #13]
 8001306:	7bf8      	ldrb	r0, [r7, #15]
 8001308:	88bb      	ldrh	r3, [r7, #4]
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	4613      	mov	r3, r2
 800130e:	2228      	movs	r2, #40	@ 0x28
 8001310:	f7ff f888 	bl	8000424 <HTFT_voidFillRect>
	HTFT_voidFillRect(x, y, thick, CELL_SIZE, Copy_u16Color);
 8001314:	7b7a      	ldrb	r2, [r7, #13]
 8001316:	7bb9      	ldrb	r1, [r7, #14]
 8001318:	7bf8      	ldrb	r0, [r7, #15]
 800131a:	88bb      	ldrh	r3, [r7, #4]
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2328      	movs	r3, #40	@ 0x28
 8001320:	f7ff f880 	bl	8000424 <HTFT_voidFillRect>
	HTFT_voidFillRect(x + CELL_SIZE - thick, y, thick, CELL_SIZE, Copy_u16Color);
 8001324:	7bfa      	ldrb	r2, [r7, #15]
 8001326:	7b7b      	ldrb	r3, [r7, #13]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	3328      	adds	r3, #40	@ 0x28
 800132e:	b2d8      	uxtb	r0, r3
 8001330:	7b7a      	ldrb	r2, [r7, #13]
 8001332:	7bb9      	ldrb	r1, [r7, #14]
 8001334:	88bb      	ldrh	r3, [r7, #4]
 8001336:	9300      	str	r3, [sp, #0]
 8001338:	2328      	movs	r3, #40	@ 0x28
 800133a:	f7ff f873 	bl	8000424 <HTFT_voidFillRect>
}
 800133e:	bf00      	nop
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <GUI_voidUpdateWinCounters>:

void GUI_voidUpdateWinCounters() {
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af02      	add	r7, sp, #8
    char score_str[10];
    HTFT_voidFillRect(0, 0, SCREEN_WIDTH, 18, BLACK);
 800134e:	2300      	movs	r3, #0
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2312      	movs	r3, #18
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	2100      	movs	r1, #0
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff f863 	bl	8000424 <HTFT_voidFillRect>

    GUI_voidDrawString(5, 5, "X:", RED);
 800135e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8001362:	4a18      	ldr	r2, [pc, #96]	@ (80013c4 <GUI_voidUpdateWinCounters+0x7c>)
 8001364:	2105      	movs	r1, #5
 8001366:	2005      	movs	r0, #5
 8001368:	f000 f882 	bl	8001470 <GUI_voidDrawString>
    sprintf(score_str, "%d", XO_u8GetWinCount(PLAYER_X));
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff fd5b 	bl	8000e28 <XO_u8GetWinCount>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	4913      	ldr	r1, [pc, #76]	@ (80013c8 <GUI_voidUpdateWinCounters+0x80>)
 800137a:	4618      	mov	r0, r3
 800137c:	f000 f958 	bl	8001630 <siprintf>
    GUI_voidDrawString(25, 5, score_str, WHITE);
 8001380:	1d3a      	adds	r2, r7, #4
 8001382:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001386:	2105      	movs	r1, #5
 8001388:	2019      	movs	r0, #25
 800138a:	f000 f871 	bl	8001470 <GUI_voidDrawString>

    GUI_voidDrawString(80, 5, "O:", BLUE);
 800138e:	231f      	movs	r3, #31
 8001390:	4a0e      	ldr	r2, [pc, #56]	@ (80013cc <GUI_voidUpdateWinCounters+0x84>)
 8001392:	2105      	movs	r1, #5
 8001394:	2050      	movs	r0, #80	@ 0x50
 8001396:	f000 f86b 	bl	8001470 <GUI_voidDrawString>
    sprintf(score_str, "%d", XO_u8GetWinCount(PLAYER_O));
 800139a:	2002      	movs	r0, #2
 800139c:	f7ff fd44 	bl	8000e28 <XO_u8GetWinCount>
 80013a0:	4603      	mov	r3, r0
 80013a2:	461a      	mov	r2, r3
 80013a4:	1d3b      	adds	r3, r7, #4
 80013a6:	4908      	ldr	r1, [pc, #32]	@ (80013c8 <GUI_voidUpdateWinCounters+0x80>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f000 f941 	bl	8001630 <siprintf>
    GUI_voidDrawString(100, 5, score_str, WHITE);
 80013ae:	1d3a      	adds	r2, r7, #4
 80013b0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013b4:	2105      	movs	r1, #5
 80013b6:	2064      	movs	r0, #100	@ 0x64
 80013b8:	f000 f85a 	bl	8001470 <GUI_voidDrawString>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08001f78 	.word	0x08001f78
 80013c8:	08001f7c 	.word	0x08001f7c
 80013cc:	08001f80 	.word	0x08001f80

080013d0 <GUI_voidShowEndScreen>:

void GUI_voidShowEndScreen(u8 game_state) {
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b08b      	sub	sp, #44	@ 0x2c
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	4603      	mov	r3, r0
 80013d8:	71fb      	strb	r3, [r7, #7]
    char score_str[20];
	HTFT_voidFillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT, BLACK);
 80013da:	2300      	movs	r3, #0
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	23a0      	movs	r3, #160	@ 0xa0
 80013e0:	2280      	movs	r2, #128	@ 0x80
 80013e2:	2100      	movs	r1, #0
 80013e4:	2000      	movs	r0, #0
 80013e6:	f7ff f81d 	bl	8000424 <HTFT_voidFillRect>

	if (game_state == GAME_WIN_X) {
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d107      	bne.n	8001400 <GUI_voidShowEndScreen+0x30>
		GUI_voidDrawString(30, 40, "PLAYER X WINS!", RED);
 80013f0:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80013f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001460 <GUI_voidShowEndScreen+0x90>)
 80013f6:	2128      	movs	r1, #40	@ 0x28
 80013f8:	201e      	movs	r0, #30
 80013fa:	f000 f839 	bl	8001470 <GUI_voidDrawString>
 80013fe:	e013      	b.n	8001428 <GUI_voidShowEndScreen+0x58>
	} else if (game_state == GAME_WIN_O) {
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d106      	bne.n	8001414 <GUI_voidShowEndScreen+0x44>
		GUI_voidDrawString(30, 40, "PLAYER O WINS!", BLUE);
 8001406:	231f      	movs	r3, #31
 8001408:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <GUI_voidShowEndScreen+0x94>)
 800140a:	2128      	movs	r1, #40	@ 0x28
 800140c:	201e      	movs	r0, #30
 800140e:	f000 f82f 	bl	8001470 <GUI_voidDrawString>
 8001412:	e009      	b.n	8001428 <GUI_voidShowEndScreen+0x58>
	} else if (game_state == GAME_DRAW) {
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	2b03      	cmp	r3, #3
 8001418:	d106      	bne.n	8001428 <GUI_voidShowEndScreen+0x58>
		GUI_voidDrawString(45, 40, "DRAW!", WHITE);
 800141a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800141e:	4a12      	ldr	r2, [pc, #72]	@ (8001468 <GUI_voidShowEndScreen+0x98>)
 8001420:	2128      	movs	r1, #40	@ 0x28
 8001422:	202d      	movs	r0, #45	@ 0x2d
 8001424:	f000 f824 	bl	8001470 <GUI_voidDrawString>
	}

    // عرض النتيجة النهائية
    sprintf(score_str, "SCORE X:%d O:%d", XO_u8GetWinCount(PLAYER_X), XO_u8GetWinCount(PLAYER_O));
 8001428:	2001      	movs	r0, #1
 800142a:	f7ff fcfd 	bl	8000e28 <XO_u8GetWinCount>
 800142e:	4603      	mov	r3, r0
 8001430:	461c      	mov	r4, r3
 8001432:	2002      	movs	r0, #2
 8001434:	f7ff fcf8 	bl	8000e28 <XO_u8GetWinCount>
 8001438:	4603      	mov	r3, r0
 800143a:	f107 000c 	add.w	r0, r7, #12
 800143e:	4622      	mov	r2, r4
 8001440:	490a      	ldr	r1, [pc, #40]	@ (800146c <GUI_voidShowEndScreen+0x9c>)
 8001442:	f000 f8f5 	bl	8001630 <siprintf>
    GUI_voidDrawString(15, 80, score_str, YELLOW);
 8001446:	f107 020c 	add.w	r2, r7, #12
 800144a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 800144e:	2150      	movs	r1, #80	@ 0x50
 8001450:	200f      	movs	r0, #15
 8001452:	f000 f80d 	bl	8001470 <GUI_voidDrawString>
}
 8001456:	bf00      	nop
 8001458:	3724      	adds	r7, #36	@ 0x24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	08001f84 	.word	0x08001f84
 8001464:	08001f94 	.word	0x08001f94
 8001468:	08001fa4 	.word	0x08001fa4
 800146c:	08001fac 	.word	0x08001fac

08001470 <GUI_voidDrawString>:

// دالة بسيطة جدًا لرسم النصوص
void GUI_voidDrawString(u8 x, u8 y, char* str, u16 color) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af02      	add	r7, sp, #8
 8001476:	603a      	str	r2, [r7, #0]
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	71fb      	strb	r3, [r7, #7]
 800147e:	460b      	mov	r3, r1
 8001480:	71bb      	strb	r3, [r7, #6]
 8001482:	4613      	mov	r3, r2
 8001484:	80bb      	strh	r3, [r7, #4]
    // هذه دالة بدائية جدًا، للحصول على نتيجة أفضل، تحتاج مكتبة خطوط
    while (*str) {
 8001486:	e015      	b.n	80014b4 <GUI_voidDrawString+0x44>
        HTFT_voidFillRect(x, y, 5, 7, color);
 8001488:	79b9      	ldrb	r1, [r7, #6]
 800148a:	79f8      	ldrb	r0, [r7, #7]
 800148c:	88bb      	ldrh	r3, [r7, #4]
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	2307      	movs	r3, #7
 8001492:	2205      	movs	r2, #5
 8001494:	f7fe ffc6 	bl	8000424 <HTFT_voidFillRect>
        x += 6;
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	3306      	adds	r3, #6
 800149c:	71fb      	strb	r3, [r7, #7]
        if (x > SCREEN_WIDTH - 5) { // انزل سطر جديد اذا امتلأ السطر
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b7b      	cmp	r3, #123	@ 0x7b
 80014a2:	d904      	bls.n	80014ae <GUI_voidDrawString+0x3e>
            x = 10;
 80014a4:	230a      	movs	r3, #10
 80014a6:	71fb      	strb	r3, [r7, #7]
            y += 10;
 80014a8:	79bb      	ldrb	r3, [r7, #6]
 80014aa:	330a      	adds	r3, #10
 80014ac:	71bb      	strb	r3, [r7, #6]
        }
        str++;
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
    while (*str) {
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e5      	bne.n	8001488 <GUI_voidDrawString+0x18>
    }
}
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ca:	bf00      	nop
 80014cc:	e7fd      	b.n	80014ca <NMI_Handler+0x4>

080014ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d2:	bf00      	nop
 80014d4:	e7fd      	b.n	80014d2 <HardFault_Handler+0x4>

080014d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014da:	bf00      	nop
 80014dc:	e7fd      	b.n	80014da <MemManage_Handler+0x4>

080014de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014de:	b480      	push	{r7}
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e2:	bf00      	nop
 80014e4:	e7fd      	b.n	80014e2 <BusFault_Handler+0x4>

080014e6 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e6:	b480      	push	{r7}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ea:	bf00      	nop
 80014ec:	e7fd      	b.n	80014ea <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f874 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800152c:	4a14      	ldr	r2, [pc, #80]	@ (8001580 <_sbrk+0x5c>)
 800152e:	4b15      	ldr	r3, [pc, #84]	@ (8001584 <_sbrk+0x60>)
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d102      	bne.n	8001546 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001540:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <_sbrk+0x64>)
 8001542:	4a12      	ldr	r2, [pc, #72]	@ (800158c <_sbrk+0x68>)
 8001544:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <_sbrk+0x64>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4413      	add	r3, r2
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	429a      	cmp	r2, r3
 8001552:	d207      	bcs.n	8001564 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001554:	f000 f88e 	bl	8001674 <__errno>
 8001558:	4603      	mov	r3, r0
 800155a:	220c      	movs	r2, #12
 800155c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800155e:	f04f 33ff 	mov.w	r3, #4294967295
 8001562:	e009      	b.n	8001578 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001564:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800156a:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <_sbrk+0x64>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4413      	add	r3, r2
 8001572:	4a05      	ldr	r2, [pc, #20]	@ (8001588 <_sbrk+0x64>)
 8001574:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001576:	68fb      	ldr	r3, [r7, #12]
}
 8001578:	4618      	mov	r0, r3
 800157a:	3718      	adds	r7, #24
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20010000 	.word	0x20010000
 8001584:	00000400 	.word	0x00000400
 8001588:	20000088 	.word	0x20000088
 800158c:	200001d8 	.word	0x200001d8

08001590 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001594:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <SystemInit+0x20>)
 8001596:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800159a:	4a05      	ldr	r2, [pc, #20]	@ (80015b0 <SystemInit+0x20>)
 800159c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	e000ed00 	.word	0xe000ed00

080015b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80015b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80015b8:	f7ff ffea 	bl	8001590 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80015bc:	480c      	ldr	r0, [pc, #48]	@ (80015f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015be:	490d      	ldr	r1, [pc, #52]	@ (80015f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015c0:	4a0d      	ldr	r2, [pc, #52]	@ (80015f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015c4:	e002      	b.n	80015cc <LoopCopyDataInit>

080015c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015ca:	3304      	adds	r3, #4

080015cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015d0:	d3f9      	bcc.n	80015c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015d2:	4a0a      	ldr	r2, [pc, #40]	@ (80015fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001600 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015d8:	e001      	b.n	80015de <LoopFillZerobss>

080015da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015dc:	3204      	adds	r2, #4

080015de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015e0:	d3fb      	bcc.n	80015da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015e2:	f000 f84d 	bl	8001680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015e6:	f7ff fc4d 	bl	8000e84 <main>
  bx  lr    
 80015ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80015f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015f8:	08002000 	.word	0x08002000
  ldr r2, =_sbss
 80015fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001600:	200001d8 	.word	0x200001d8

08001604 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001604:	e7fe      	b.n	8001604 <ADC_IRQHandler>
	...

08001608 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b06      	ldr	r3, [pc, #24]	@ (8001628 <HAL_IncTick+0x20>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	461a      	mov	r2, r3
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_IncTick+0x24>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4413      	add	r3, r2
 8001618:	4a04      	ldr	r2, [pc, #16]	@ (800162c <HAL_IncTick+0x24>)
 800161a:	6013      	str	r3, [r2, #0]
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	2000000c 	.word	0x2000000c
 800162c:	2000008c 	.word	0x2000008c

08001630 <siprintf>:
 8001630:	b40e      	push	{r1, r2, r3}
 8001632:	b510      	push	{r4, lr}
 8001634:	b09d      	sub	sp, #116	@ 0x74
 8001636:	ab1f      	add	r3, sp, #124	@ 0x7c
 8001638:	9002      	str	r0, [sp, #8]
 800163a:	9006      	str	r0, [sp, #24]
 800163c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001640:	480a      	ldr	r0, [pc, #40]	@ (800166c <siprintf+0x3c>)
 8001642:	9107      	str	r1, [sp, #28]
 8001644:	9104      	str	r1, [sp, #16]
 8001646:	490a      	ldr	r1, [pc, #40]	@ (8001670 <siprintf+0x40>)
 8001648:	f853 2b04 	ldr.w	r2, [r3], #4
 800164c:	9105      	str	r1, [sp, #20]
 800164e:	2400      	movs	r4, #0
 8001650:	a902      	add	r1, sp, #8
 8001652:	6800      	ldr	r0, [r0, #0]
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	941b      	str	r4, [sp, #108]	@ 0x6c
 8001658:	f000 f98c 	bl	8001974 <_svfiprintf_r>
 800165c:	9b02      	ldr	r3, [sp, #8]
 800165e:	701c      	strb	r4, [r3, #0]
 8001660:	b01d      	add	sp, #116	@ 0x74
 8001662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001666:	b003      	add	sp, #12
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	20000010 	.word	0x20000010
 8001670:	ffff0208 	.word	0xffff0208

08001674 <__errno>:
 8001674:	4b01      	ldr	r3, [pc, #4]	@ (800167c <__errno+0x8>)
 8001676:	6818      	ldr	r0, [r3, #0]
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000010 	.word	0x20000010

08001680 <__libc_init_array>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	4d0d      	ldr	r5, [pc, #52]	@ (80016b8 <__libc_init_array+0x38>)
 8001684:	4c0d      	ldr	r4, [pc, #52]	@ (80016bc <__libc_init_array+0x3c>)
 8001686:	1b64      	subs	r4, r4, r5
 8001688:	10a4      	asrs	r4, r4, #2
 800168a:	2600      	movs	r6, #0
 800168c:	42a6      	cmp	r6, r4
 800168e:	d109      	bne.n	80016a4 <__libc_init_array+0x24>
 8001690:	4d0b      	ldr	r5, [pc, #44]	@ (80016c0 <__libc_init_array+0x40>)
 8001692:	4c0c      	ldr	r4, [pc, #48]	@ (80016c4 <__libc_init_array+0x44>)
 8001694:	f000 fc64 	bl	8001f60 <_init>
 8001698:	1b64      	subs	r4, r4, r5
 800169a:	10a4      	asrs	r4, r4, #2
 800169c:	2600      	movs	r6, #0
 800169e:	42a6      	cmp	r6, r4
 80016a0:	d105      	bne.n	80016ae <__libc_init_array+0x2e>
 80016a2:	bd70      	pop	{r4, r5, r6, pc}
 80016a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a8:	4798      	blx	r3
 80016aa:	3601      	adds	r6, #1
 80016ac:	e7ee      	b.n	800168c <__libc_init_array+0xc>
 80016ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b2:	4798      	blx	r3
 80016b4:	3601      	adds	r6, #1
 80016b6:	e7f2      	b.n	800169e <__libc_init_array+0x1e>
 80016b8:	08001ff8 	.word	0x08001ff8
 80016bc:	08001ff8 	.word	0x08001ff8
 80016c0:	08001ff8 	.word	0x08001ff8
 80016c4:	08001ffc 	.word	0x08001ffc

080016c8 <__retarget_lock_acquire_recursive>:
 80016c8:	4770      	bx	lr

080016ca <__retarget_lock_release_recursive>:
 80016ca:	4770      	bx	lr

080016cc <_free_r>:
 80016cc:	b538      	push	{r3, r4, r5, lr}
 80016ce:	4605      	mov	r5, r0
 80016d0:	2900      	cmp	r1, #0
 80016d2:	d041      	beq.n	8001758 <_free_r+0x8c>
 80016d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80016d8:	1f0c      	subs	r4, r1, #4
 80016da:	2b00      	cmp	r3, #0
 80016dc:	bfb8      	it	lt
 80016de:	18e4      	addlt	r4, r4, r3
 80016e0:	f000 f8e0 	bl	80018a4 <__malloc_lock>
 80016e4:	4a1d      	ldr	r2, [pc, #116]	@ (800175c <_free_r+0x90>)
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	b933      	cbnz	r3, 80016f8 <_free_r+0x2c>
 80016ea:	6063      	str	r3, [r4, #4]
 80016ec:	6014      	str	r4, [r2, #0]
 80016ee:	4628      	mov	r0, r5
 80016f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80016f4:	f000 b8dc 	b.w	80018b0 <__malloc_unlock>
 80016f8:	42a3      	cmp	r3, r4
 80016fa:	d908      	bls.n	800170e <_free_r+0x42>
 80016fc:	6820      	ldr	r0, [r4, #0]
 80016fe:	1821      	adds	r1, r4, r0
 8001700:	428b      	cmp	r3, r1
 8001702:	bf01      	itttt	eq
 8001704:	6819      	ldreq	r1, [r3, #0]
 8001706:	685b      	ldreq	r3, [r3, #4]
 8001708:	1809      	addeq	r1, r1, r0
 800170a:	6021      	streq	r1, [r4, #0]
 800170c:	e7ed      	b.n	80016ea <_free_r+0x1e>
 800170e:	461a      	mov	r2, r3
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	b10b      	cbz	r3, 8001718 <_free_r+0x4c>
 8001714:	42a3      	cmp	r3, r4
 8001716:	d9fa      	bls.n	800170e <_free_r+0x42>
 8001718:	6811      	ldr	r1, [r2, #0]
 800171a:	1850      	adds	r0, r2, r1
 800171c:	42a0      	cmp	r0, r4
 800171e:	d10b      	bne.n	8001738 <_free_r+0x6c>
 8001720:	6820      	ldr	r0, [r4, #0]
 8001722:	4401      	add	r1, r0
 8001724:	1850      	adds	r0, r2, r1
 8001726:	4283      	cmp	r3, r0
 8001728:	6011      	str	r1, [r2, #0]
 800172a:	d1e0      	bne.n	80016ee <_free_r+0x22>
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	6053      	str	r3, [r2, #4]
 8001732:	4408      	add	r0, r1
 8001734:	6010      	str	r0, [r2, #0]
 8001736:	e7da      	b.n	80016ee <_free_r+0x22>
 8001738:	d902      	bls.n	8001740 <_free_r+0x74>
 800173a:	230c      	movs	r3, #12
 800173c:	602b      	str	r3, [r5, #0]
 800173e:	e7d6      	b.n	80016ee <_free_r+0x22>
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	1821      	adds	r1, r4, r0
 8001744:	428b      	cmp	r3, r1
 8001746:	bf04      	itt	eq
 8001748:	6819      	ldreq	r1, [r3, #0]
 800174a:	685b      	ldreq	r3, [r3, #4]
 800174c:	6063      	str	r3, [r4, #4]
 800174e:	bf04      	itt	eq
 8001750:	1809      	addeq	r1, r1, r0
 8001752:	6021      	streq	r1, [r4, #0]
 8001754:	6054      	str	r4, [r2, #4]
 8001756:	e7ca      	b.n	80016ee <_free_r+0x22>
 8001758:	bd38      	pop	{r3, r4, r5, pc}
 800175a:	bf00      	nop
 800175c:	200001d4 	.word	0x200001d4

08001760 <sbrk_aligned>:
 8001760:	b570      	push	{r4, r5, r6, lr}
 8001762:	4e0f      	ldr	r6, [pc, #60]	@ (80017a0 <sbrk_aligned+0x40>)
 8001764:	460c      	mov	r4, r1
 8001766:	6831      	ldr	r1, [r6, #0]
 8001768:	4605      	mov	r5, r0
 800176a:	b911      	cbnz	r1, 8001772 <sbrk_aligned+0x12>
 800176c:	f000 fba4 	bl	8001eb8 <_sbrk_r>
 8001770:	6030      	str	r0, [r6, #0]
 8001772:	4621      	mov	r1, r4
 8001774:	4628      	mov	r0, r5
 8001776:	f000 fb9f 	bl	8001eb8 <_sbrk_r>
 800177a:	1c43      	adds	r3, r0, #1
 800177c:	d103      	bne.n	8001786 <sbrk_aligned+0x26>
 800177e:	f04f 34ff 	mov.w	r4, #4294967295
 8001782:	4620      	mov	r0, r4
 8001784:	bd70      	pop	{r4, r5, r6, pc}
 8001786:	1cc4      	adds	r4, r0, #3
 8001788:	f024 0403 	bic.w	r4, r4, #3
 800178c:	42a0      	cmp	r0, r4
 800178e:	d0f8      	beq.n	8001782 <sbrk_aligned+0x22>
 8001790:	1a21      	subs	r1, r4, r0
 8001792:	4628      	mov	r0, r5
 8001794:	f000 fb90 	bl	8001eb8 <_sbrk_r>
 8001798:	3001      	adds	r0, #1
 800179a:	d1f2      	bne.n	8001782 <sbrk_aligned+0x22>
 800179c:	e7ef      	b.n	800177e <sbrk_aligned+0x1e>
 800179e:	bf00      	nop
 80017a0:	200001d0 	.word	0x200001d0

080017a4 <_malloc_r>:
 80017a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80017a8:	1ccd      	adds	r5, r1, #3
 80017aa:	f025 0503 	bic.w	r5, r5, #3
 80017ae:	3508      	adds	r5, #8
 80017b0:	2d0c      	cmp	r5, #12
 80017b2:	bf38      	it	cc
 80017b4:	250c      	movcc	r5, #12
 80017b6:	2d00      	cmp	r5, #0
 80017b8:	4606      	mov	r6, r0
 80017ba:	db01      	blt.n	80017c0 <_malloc_r+0x1c>
 80017bc:	42a9      	cmp	r1, r5
 80017be:	d904      	bls.n	80017ca <_malloc_r+0x26>
 80017c0:	230c      	movs	r3, #12
 80017c2:	6033      	str	r3, [r6, #0]
 80017c4:	2000      	movs	r0, #0
 80017c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80017ca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80018a0 <_malloc_r+0xfc>
 80017ce:	f000 f869 	bl	80018a4 <__malloc_lock>
 80017d2:	f8d8 3000 	ldr.w	r3, [r8]
 80017d6:	461c      	mov	r4, r3
 80017d8:	bb44      	cbnz	r4, 800182c <_malloc_r+0x88>
 80017da:	4629      	mov	r1, r5
 80017dc:	4630      	mov	r0, r6
 80017de:	f7ff ffbf 	bl	8001760 <sbrk_aligned>
 80017e2:	1c43      	adds	r3, r0, #1
 80017e4:	4604      	mov	r4, r0
 80017e6:	d158      	bne.n	800189a <_malloc_r+0xf6>
 80017e8:	f8d8 4000 	ldr.w	r4, [r8]
 80017ec:	4627      	mov	r7, r4
 80017ee:	2f00      	cmp	r7, #0
 80017f0:	d143      	bne.n	800187a <_malloc_r+0xd6>
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	d04b      	beq.n	800188e <_malloc_r+0xea>
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	4639      	mov	r1, r7
 80017fa:	4630      	mov	r0, r6
 80017fc:	eb04 0903 	add.w	r9, r4, r3
 8001800:	f000 fb5a 	bl	8001eb8 <_sbrk_r>
 8001804:	4581      	cmp	r9, r0
 8001806:	d142      	bne.n	800188e <_malloc_r+0xea>
 8001808:	6821      	ldr	r1, [r4, #0]
 800180a:	1a6d      	subs	r5, r5, r1
 800180c:	4629      	mov	r1, r5
 800180e:	4630      	mov	r0, r6
 8001810:	f7ff ffa6 	bl	8001760 <sbrk_aligned>
 8001814:	3001      	adds	r0, #1
 8001816:	d03a      	beq.n	800188e <_malloc_r+0xea>
 8001818:	6823      	ldr	r3, [r4, #0]
 800181a:	442b      	add	r3, r5
 800181c:	6023      	str	r3, [r4, #0]
 800181e:	f8d8 3000 	ldr.w	r3, [r8]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	bb62      	cbnz	r2, 8001880 <_malloc_r+0xdc>
 8001826:	f8c8 7000 	str.w	r7, [r8]
 800182a:	e00f      	b.n	800184c <_malloc_r+0xa8>
 800182c:	6822      	ldr	r2, [r4, #0]
 800182e:	1b52      	subs	r2, r2, r5
 8001830:	d420      	bmi.n	8001874 <_malloc_r+0xd0>
 8001832:	2a0b      	cmp	r2, #11
 8001834:	d917      	bls.n	8001866 <_malloc_r+0xc2>
 8001836:	1961      	adds	r1, r4, r5
 8001838:	42a3      	cmp	r3, r4
 800183a:	6025      	str	r5, [r4, #0]
 800183c:	bf18      	it	ne
 800183e:	6059      	strne	r1, [r3, #4]
 8001840:	6863      	ldr	r3, [r4, #4]
 8001842:	bf08      	it	eq
 8001844:	f8c8 1000 	streq.w	r1, [r8]
 8001848:	5162      	str	r2, [r4, r5]
 800184a:	604b      	str	r3, [r1, #4]
 800184c:	4630      	mov	r0, r6
 800184e:	f000 f82f 	bl	80018b0 <__malloc_unlock>
 8001852:	f104 000b 	add.w	r0, r4, #11
 8001856:	1d23      	adds	r3, r4, #4
 8001858:	f020 0007 	bic.w	r0, r0, #7
 800185c:	1ac2      	subs	r2, r0, r3
 800185e:	bf1c      	itt	ne
 8001860:	1a1b      	subne	r3, r3, r0
 8001862:	50a3      	strne	r3, [r4, r2]
 8001864:	e7af      	b.n	80017c6 <_malloc_r+0x22>
 8001866:	6862      	ldr	r2, [r4, #4]
 8001868:	42a3      	cmp	r3, r4
 800186a:	bf0c      	ite	eq
 800186c:	f8c8 2000 	streq.w	r2, [r8]
 8001870:	605a      	strne	r2, [r3, #4]
 8001872:	e7eb      	b.n	800184c <_malloc_r+0xa8>
 8001874:	4623      	mov	r3, r4
 8001876:	6864      	ldr	r4, [r4, #4]
 8001878:	e7ae      	b.n	80017d8 <_malloc_r+0x34>
 800187a:	463c      	mov	r4, r7
 800187c:	687f      	ldr	r7, [r7, #4]
 800187e:	e7b6      	b.n	80017ee <_malloc_r+0x4a>
 8001880:	461a      	mov	r2, r3
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	42a3      	cmp	r3, r4
 8001886:	d1fb      	bne.n	8001880 <_malloc_r+0xdc>
 8001888:	2300      	movs	r3, #0
 800188a:	6053      	str	r3, [r2, #4]
 800188c:	e7de      	b.n	800184c <_malloc_r+0xa8>
 800188e:	230c      	movs	r3, #12
 8001890:	6033      	str	r3, [r6, #0]
 8001892:	4630      	mov	r0, r6
 8001894:	f000 f80c 	bl	80018b0 <__malloc_unlock>
 8001898:	e794      	b.n	80017c4 <_malloc_r+0x20>
 800189a:	6005      	str	r5, [r0, #0]
 800189c:	e7d6      	b.n	800184c <_malloc_r+0xa8>
 800189e:	bf00      	nop
 80018a0:	200001d4 	.word	0x200001d4

080018a4 <__malloc_lock>:
 80018a4:	4801      	ldr	r0, [pc, #4]	@ (80018ac <__malloc_lock+0x8>)
 80018a6:	f7ff bf0f 	b.w	80016c8 <__retarget_lock_acquire_recursive>
 80018aa:	bf00      	nop
 80018ac:	200001cc 	.word	0x200001cc

080018b0 <__malloc_unlock>:
 80018b0:	4801      	ldr	r0, [pc, #4]	@ (80018b8 <__malloc_unlock+0x8>)
 80018b2:	f7ff bf0a 	b.w	80016ca <__retarget_lock_release_recursive>
 80018b6:	bf00      	nop
 80018b8:	200001cc 	.word	0x200001cc

080018bc <__ssputs_r>:
 80018bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018c0:	688e      	ldr	r6, [r1, #8]
 80018c2:	461f      	mov	r7, r3
 80018c4:	42be      	cmp	r6, r7
 80018c6:	680b      	ldr	r3, [r1, #0]
 80018c8:	4682      	mov	sl, r0
 80018ca:	460c      	mov	r4, r1
 80018cc:	4690      	mov	r8, r2
 80018ce:	d82d      	bhi.n	800192c <__ssputs_r+0x70>
 80018d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80018d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80018d8:	d026      	beq.n	8001928 <__ssputs_r+0x6c>
 80018da:	6965      	ldr	r5, [r4, #20]
 80018dc:	6909      	ldr	r1, [r1, #16]
 80018de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80018e2:	eba3 0901 	sub.w	r9, r3, r1
 80018e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80018ea:	1c7b      	adds	r3, r7, #1
 80018ec:	444b      	add	r3, r9
 80018ee:	106d      	asrs	r5, r5, #1
 80018f0:	429d      	cmp	r5, r3
 80018f2:	bf38      	it	cc
 80018f4:	461d      	movcc	r5, r3
 80018f6:	0553      	lsls	r3, r2, #21
 80018f8:	d527      	bpl.n	800194a <__ssputs_r+0x8e>
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7ff ff52 	bl	80017a4 <_malloc_r>
 8001900:	4606      	mov	r6, r0
 8001902:	b360      	cbz	r0, 800195e <__ssputs_r+0xa2>
 8001904:	6921      	ldr	r1, [r4, #16]
 8001906:	464a      	mov	r2, r9
 8001908:	f000 fae6 	bl	8001ed8 <memcpy>
 800190c:	89a3      	ldrh	r3, [r4, #12]
 800190e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001916:	81a3      	strh	r3, [r4, #12]
 8001918:	6126      	str	r6, [r4, #16]
 800191a:	6165      	str	r5, [r4, #20]
 800191c:	444e      	add	r6, r9
 800191e:	eba5 0509 	sub.w	r5, r5, r9
 8001922:	6026      	str	r6, [r4, #0]
 8001924:	60a5      	str	r5, [r4, #8]
 8001926:	463e      	mov	r6, r7
 8001928:	42be      	cmp	r6, r7
 800192a:	d900      	bls.n	800192e <__ssputs_r+0x72>
 800192c:	463e      	mov	r6, r7
 800192e:	6820      	ldr	r0, [r4, #0]
 8001930:	4632      	mov	r2, r6
 8001932:	4641      	mov	r1, r8
 8001934:	f000 faa6 	bl	8001e84 <memmove>
 8001938:	68a3      	ldr	r3, [r4, #8]
 800193a:	1b9b      	subs	r3, r3, r6
 800193c:	60a3      	str	r3, [r4, #8]
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	4433      	add	r3, r6
 8001942:	6023      	str	r3, [r4, #0]
 8001944:	2000      	movs	r0, #0
 8001946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800194a:	462a      	mov	r2, r5
 800194c:	f000 fad2 	bl	8001ef4 <_realloc_r>
 8001950:	4606      	mov	r6, r0
 8001952:	2800      	cmp	r0, #0
 8001954:	d1e0      	bne.n	8001918 <__ssputs_r+0x5c>
 8001956:	6921      	ldr	r1, [r4, #16]
 8001958:	4650      	mov	r0, sl
 800195a:	f7ff feb7 	bl	80016cc <_free_r>
 800195e:	230c      	movs	r3, #12
 8001960:	f8ca 3000 	str.w	r3, [sl]
 8001964:	89a3      	ldrh	r3, [r4, #12]
 8001966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800196a:	81a3      	strh	r3, [r4, #12]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	e7e9      	b.n	8001946 <__ssputs_r+0x8a>
	...

08001974 <_svfiprintf_r>:
 8001974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001978:	4698      	mov	r8, r3
 800197a:	898b      	ldrh	r3, [r1, #12]
 800197c:	061b      	lsls	r3, r3, #24
 800197e:	b09d      	sub	sp, #116	@ 0x74
 8001980:	4607      	mov	r7, r0
 8001982:	460d      	mov	r5, r1
 8001984:	4614      	mov	r4, r2
 8001986:	d510      	bpl.n	80019aa <_svfiprintf_r+0x36>
 8001988:	690b      	ldr	r3, [r1, #16]
 800198a:	b973      	cbnz	r3, 80019aa <_svfiprintf_r+0x36>
 800198c:	2140      	movs	r1, #64	@ 0x40
 800198e:	f7ff ff09 	bl	80017a4 <_malloc_r>
 8001992:	6028      	str	r0, [r5, #0]
 8001994:	6128      	str	r0, [r5, #16]
 8001996:	b930      	cbnz	r0, 80019a6 <_svfiprintf_r+0x32>
 8001998:	230c      	movs	r3, #12
 800199a:	603b      	str	r3, [r7, #0]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	b01d      	add	sp, #116	@ 0x74
 80019a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019a6:	2340      	movs	r3, #64	@ 0x40
 80019a8:	616b      	str	r3, [r5, #20]
 80019aa:	2300      	movs	r3, #0
 80019ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80019ae:	2320      	movs	r3, #32
 80019b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80019b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80019b8:	2330      	movs	r3, #48	@ 0x30
 80019ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8001b58 <_svfiprintf_r+0x1e4>
 80019be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80019c2:	f04f 0901 	mov.w	r9, #1
 80019c6:	4623      	mov	r3, r4
 80019c8:	469a      	mov	sl, r3
 80019ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80019ce:	b10a      	cbz	r2, 80019d4 <_svfiprintf_r+0x60>
 80019d0:	2a25      	cmp	r2, #37	@ 0x25
 80019d2:	d1f9      	bne.n	80019c8 <_svfiprintf_r+0x54>
 80019d4:	ebba 0b04 	subs.w	fp, sl, r4
 80019d8:	d00b      	beq.n	80019f2 <_svfiprintf_r+0x7e>
 80019da:	465b      	mov	r3, fp
 80019dc:	4622      	mov	r2, r4
 80019de:	4629      	mov	r1, r5
 80019e0:	4638      	mov	r0, r7
 80019e2:	f7ff ff6b 	bl	80018bc <__ssputs_r>
 80019e6:	3001      	adds	r0, #1
 80019e8:	f000 80a7 	beq.w	8001b3a <_svfiprintf_r+0x1c6>
 80019ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80019ee:	445a      	add	r2, fp
 80019f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80019f2:	f89a 3000 	ldrb.w	r3, [sl]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 809f 	beq.w	8001b3a <_svfiprintf_r+0x1c6>
 80019fc:	2300      	movs	r3, #0
 80019fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001a06:	f10a 0a01 	add.w	sl, sl, #1
 8001a0a:	9304      	str	r3, [sp, #16]
 8001a0c:	9307      	str	r3, [sp, #28]
 8001a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8001a14:	4654      	mov	r4, sl
 8001a16:	2205      	movs	r2, #5
 8001a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001a1c:	484e      	ldr	r0, [pc, #312]	@ (8001b58 <_svfiprintf_r+0x1e4>)
 8001a1e:	f7fe fbdf 	bl	80001e0 <memchr>
 8001a22:	9a04      	ldr	r2, [sp, #16]
 8001a24:	b9d8      	cbnz	r0, 8001a5e <_svfiprintf_r+0xea>
 8001a26:	06d0      	lsls	r0, r2, #27
 8001a28:	bf44      	itt	mi
 8001a2a:	2320      	movmi	r3, #32
 8001a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a30:	0711      	lsls	r1, r2, #28
 8001a32:	bf44      	itt	mi
 8001a34:	232b      	movmi	r3, #43	@ 0x2b
 8001a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8001a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a40:	d015      	beq.n	8001a6e <_svfiprintf_r+0xfa>
 8001a42:	9a07      	ldr	r2, [sp, #28]
 8001a44:	4654      	mov	r4, sl
 8001a46:	2000      	movs	r0, #0
 8001a48:	f04f 0c0a 	mov.w	ip, #10
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a52:	3b30      	subs	r3, #48	@ 0x30
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d94b      	bls.n	8001af0 <_svfiprintf_r+0x17c>
 8001a58:	b1b0      	cbz	r0, 8001a88 <_svfiprintf_r+0x114>
 8001a5a:	9207      	str	r2, [sp, #28]
 8001a5c:	e014      	b.n	8001a88 <_svfiprintf_r+0x114>
 8001a5e:	eba0 0308 	sub.w	r3, r0, r8
 8001a62:	fa09 f303 	lsl.w	r3, r9, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	9304      	str	r3, [sp, #16]
 8001a6a:	46a2      	mov	sl, r4
 8001a6c:	e7d2      	b.n	8001a14 <_svfiprintf_r+0xa0>
 8001a6e:	9b03      	ldr	r3, [sp, #12]
 8001a70:	1d19      	adds	r1, r3, #4
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	9103      	str	r1, [sp, #12]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfbb      	ittet	lt
 8001a7a:	425b      	neglt	r3, r3
 8001a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8001a80:	9307      	strge	r3, [sp, #28]
 8001a82:	9307      	strlt	r3, [sp, #28]
 8001a84:	bfb8      	it	lt
 8001a86:	9204      	strlt	r2, [sp, #16]
 8001a88:	7823      	ldrb	r3, [r4, #0]
 8001a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a8c:	d10a      	bne.n	8001aa4 <_svfiprintf_r+0x130>
 8001a8e:	7863      	ldrb	r3, [r4, #1]
 8001a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8001a92:	d132      	bne.n	8001afa <_svfiprintf_r+0x186>
 8001a94:	9b03      	ldr	r3, [sp, #12]
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	9203      	str	r2, [sp, #12]
 8001a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001aa0:	3402      	adds	r4, #2
 8001aa2:	9305      	str	r3, [sp, #20]
 8001aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8001b68 <_svfiprintf_r+0x1f4>
 8001aa8:	7821      	ldrb	r1, [r4, #0]
 8001aaa:	2203      	movs	r2, #3
 8001aac:	4650      	mov	r0, sl
 8001aae:	f7fe fb97 	bl	80001e0 <memchr>
 8001ab2:	b138      	cbz	r0, 8001ac4 <_svfiprintf_r+0x150>
 8001ab4:	9b04      	ldr	r3, [sp, #16]
 8001ab6:	eba0 000a 	sub.w	r0, r0, sl
 8001aba:	2240      	movs	r2, #64	@ 0x40
 8001abc:	4082      	lsls	r2, r0
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	3401      	adds	r4, #1
 8001ac2:	9304      	str	r3, [sp, #16]
 8001ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ac8:	4824      	ldr	r0, [pc, #144]	@ (8001b5c <_svfiprintf_r+0x1e8>)
 8001aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001ace:	2206      	movs	r2, #6
 8001ad0:	f7fe fb86 	bl	80001e0 <memchr>
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d036      	beq.n	8001b46 <_svfiprintf_r+0x1d2>
 8001ad8:	4b21      	ldr	r3, [pc, #132]	@ (8001b60 <_svfiprintf_r+0x1ec>)
 8001ada:	bb1b      	cbnz	r3, 8001b24 <_svfiprintf_r+0x1b0>
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	3307      	adds	r3, #7
 8001ae0:	f023 0307 	bic.w	r3, r3, #7
 8001ae4:	3308      	adds	r3, #8
 8001ae6:	9303      	str	r3, [sp, #12]
 8001ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001aea:	4433      	add	r3, r6
 8001aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8001aee:	e76a      	b.n	80019c6 <_svfiprintf_r+0x52>
 8001af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8001af4:	460c      	mov	r4, r1
 8001af6:	2001      	movs	r0, #1
 8001af8:	e7a8      	b.n	8001a4c <_svfiprintf_r+0xd8>
 8001afa:	2300      	movs	r3, #0
 8001afc:	3401      	adds	r4, #1
 8001afe:	9305      	str	r3, [sp, #20]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0c0a 	mov.w	ip, #10
 8001b06:	4620      	mov	r0, r4
 8001b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001b0c:	3a30      	subs	r2, #48	@ 0x30
 8001b0e:	2a09      	cmp	r2, #9
 8001b10:	d903      	bls.n	8001b1a <_svfiprintf_r+0x1a6>
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0c6      	beq.n	8001aa4 <_svfiprintf_r+0x130>
 8001b16:	9105      	str	r1, [sp, #20]
 8001b18:	e7c4      	b.n	8001aa4 <_svfiprintf_r+0x130>
 8001b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8001b1e:	4604      	mov	r4, r0
 8001b20:	2301      	movs	r3, #1
 8001b22:	e7f0      	b.n	8001b06 <_svfiprintf_r+0x192>
 8001b24:	ab03      	add	r3, sp, #12
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	462a      	mov	r2, r5
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b64 <_svfiprintf_r+0x1f0>)
 8001b2c:	a904      	add	r1, sp, #16
 8001b2e:	4638      	mov	r0, r7
 8001b30:	f3af 8000 	nop.w
 8001b34:	1c42      	adds	r2, r0, #1
 8001b36:	4606      	mov	r6, r0
 8001b38:	d1d6      	bne.n	8001ae8 <_svfiprintf_r+0x174>
 8001b3a:	89ab      	ldrh	r3, [r5, #12]
 8001b3c:	065b      	lsls	r3, r3, #25
 8001b3e:	f53f af2d 	bmi.w	800199c <_svfiprintf_r+0x28>
 8001b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001b44:	e72c      	b.n	80019a0 <_svfiprintf_r+0x2c>
 8001b46:	ab03      	add	r3, sp, #12
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	462a      	mov	r2, r5
 8001b4c:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <_svfiprintf_r+0x1f0>)
 8001b4e:	a904      	add	r1, sp, #16
 8001b50:	4638      	mov	r0, r7
 8001b52:	f000 f879 	bl	8001c48 <_printf_i>
 8001b56:	e7ed      	b.n	8001b34 <_svfiprintf_r+0x1c0>
 8001b58:	08001fbc 	.word	0x08001fbc
 8001b5c:	08001fc6 	.word	0x08001fc6
 8001b60:	00000000 	.word	0x00000000
 8001b64:	080018bd 	.word	0x080018bd
 8001b68:	08001fc2 	.word	0x08001fc2

08001b6c <_printf_common>:
 8001b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001b70:	4616      	mov	r6, r2
 8001b72:	4698      	mov	r8, r3
 8001b74:	688a      	ldr	r2, [r1, #8]
 8001b76:	690b      	ldr	r3, [r1, #16]
 8001b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	bfb8      	it	lt
 8001b80:	4613      	movlt	r3, r2
 8001b82:	6033      	str	r3, [r6, #0]
 8001b84:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001b88:	4607      	mov	r7, r0
 8001b8a:	460c      	mov	r4, r1
 8001b8c:	b10a      	cbz	r2, 8001b92 <_printf_common+0x26>
 8001b8e:	3301      	adds	r3, #1
 8001b90:	6033      	str	r3, [r6, #0]
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	0699      	lsls	r1, r3, #26
 8001b96:	bf42      	ittt	mi
 8001b98:	6833      	ldrmi	r3, [r6, #0]
 8001b9a:	3302      	addmi	r3, #2
 8001b9c:	6033      	strmi	r3, [r6, #0]
 8001b9e:	6825      	ldr	r5, [r4, #0]
 8001ba0:	f015 0506 	ands.w	r5, r5, #6
 8001ba4:	d106      	bne.n	8001bb4 <_printf_common+0x48>
 8001ba6:	f104 0a19 	add.w	sl, r4, #25
 8001baa:	68e3      	ldr	r3, [r4, #12]
 8001bac:	6832      	ldr	r2, [r6, #0]
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	42ab      	cmp	r3, r5
 8001bb2:	dc26      	bgt.n	8001c02 <_printf_common+0x96>
 8001bb4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001bb8:	6822      	ldr	r2, [r4, #0]
 8001bba:	3b00      	subs	r3, #0
 8001bbc:	bf18      	it	ne
 8001bbe:	2301      	movne	r3, #1
 8001bc0:	0692      	lsls	r2, r2, #26
 8001bc2:	d42b      	bmi.n	8001c1c <_printf_common+0xb0>
 8001bc4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001bc8:	4641      	mov	r1, r8
 8001bca:	4638      	mov	r0, r7
 8001bcc:	47c8      	blx	r9
 8001bce:	3001      	adds	r0, #1
 8001bd0:	d01e      	beq.n	8001c10 <_printf_common+0xa4>
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	6922      	ldr	r2, [r4, #16]
 8001bd6:	f003 0306 	and.w	r3, r3, #6
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	bf02      	ittt	eq
 8001bde:	68e5      	ldreq	r5, [r4, #12]
 8001be0:	6833      	ldreq	r3, [r6, #0]
 8001be2:	1aed      	subeq	r5, r5, r3
 8001be4:	68a3      	ldr	r3, [r4, #8]
 8001be6:	bf0c      	ite	eq
 8001be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001bec:	2500      	movne	r5, #0
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	bfc4      	itt	gt
 8001bf2:	1a9b      	subgt	r3, r3, r2
 8001bf4:	18ed      	addgt	r5, r5, r3
 8001bf6:	2600      	movs	r6, #0
 8001bf8:	341a      	adds	r4, #26
 8001bfa:	42b5      	cmp	r5, r6
 8001bfc:	d11a      	bne.n	8001c34 <_printf_common+0xc8>
 8001bfe:	2000      	movs	r0, #0
 8001c00:	e008      	b.n	8001c14 <_printf_common+0xa8>
 8001c02:	2301      	movs	r3, #1
 8001c04:	4652      	mov	r2, sl
 8001c06:	4641      	mov	r1, r8
 8001c08:	4638      	mov	r0, r7
 8001c0a:	47c8      	blx	r9
 8001c0c:	3001      	adds	r0, #1
 8001c0e:	d103      	bne.n	8001c18 <_printf_common+0xac>
 8001c10:	f04f 30ff 	mov.w	r0, #4294967295
 8001c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c18:	3501      	adds	r5, #1
 8001c1a:	e7c6      	b.n	8001baa <_printf_common+0x3e>
 8001c1c:	18e1      	adds	r1, r4, r3
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	2030      	movs	r0, #48	@ 0x30
 8001c22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001c26:	4422      	add	r2, r4
 8001c28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001c2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001c30:	3302      	adds	r3, #2
 8001c32:	e7c7      	b.n	8001bc4 <_printf_common+0x58>
 8001c34:	2301      	movs	r3, #1
 8001c36:	4622      	mov	r2, r4
 8001c38:	4641      	mov	r1, r8
 8001c3a:	4638      	mov	r0, r7
 8001c3c:	47c8      	blx	r9
 8001c3e:	3001      	adds	r0, #1
 8001c40:	d0e6      	beq.n	8001c10 <_printf_common+0xa4>
 8001c42:	3601      	adds	r6, #1
 8001c44:	e7d9      	b.n	8001bfa <_printf_common+0x8e>
	...

08001c48 <_printf_i>:
 8001c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001c4c:	7e0f      	ldrb	r7, [r1, #24]
 8001c4e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001c50:	2f78      	cmp	r7, #120	@ 0x78
 8001c52:	4691      	mov	r9, r2
 8001c54:	4680      	mov	r8, r0
 8001c56:	460c      	mov	r4, r1
 8001c58:	469a      	mov	sl, r3
 8001c5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001c5e:	d807      	bhi.n	8001c70 <_printf_i+0x28>
 8001c60:	2f62      	cmp	r7, #98	@ 0x62
 8001c62:	d80a      	bhi.n	8001c7a <_printf_i+0x32>
 8001c64:	2f00      	cmp	r7, #0
 8001c66:	f000 80d1 	beq.w	8001e0c <_printf_i+0x1c4>
 8001c6a:	2f58      	cmp	r7, #88	@ 0x58
 8001c6c:	f000 80b8 	beq.w	8001de0 <_printf_i+0x198>
 8001c70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001c74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001c78:	e03a      	b.n	8001cf0 <_printf_i+0xa8>
 8001c7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001c7e:	2b15      	cmp	r3, #21
 8001c80:	d8f6      	bhi.n	8001c70 <_printf_i+0x28>
 8001c82:	a101      	add	r1, pc, #4	@ (adr r1, 8001c88 <_printf_i+0x40>)
 8001c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001c88:	08001ce1 	.word	0x08001ce1
 8001c8c:	08001cf5 	.word	0x08001cf5
 8001c90:	08001c71 	.word	0x08001c71
 8001c94:	08001c71 	.word	0x08001c71
 8001c98:	08001c71 	.word	0x08001c71
 8001c9c:	08001c71 	.word	0x08001c71
 8001ca0:	08001cf5 	.word	0x08001cf5
 8001ca4:	08001c71 	.word	0x08001c71
 8001ca8:	08001c71 	.word	0x08001c71
 8001cac:	08001c71 	.word	0x08001c71
 8001cb0:	08001c71 	.word	0x08001c71
 8001cb4:	08001df3 	.word	0x08001df3
 8001cb8:	08001d1f 	.word	0x08001d1f
 8001cbc:	08001dad 	.word	0x08001dad
 8001cc0:	08001c71 	.word	0x08001c71
 8001cc4:	08001c71 	.word	0x08001c71
 8001cc8:	08001e15 	.word	0x08001e15
 8001ccc:	08001c71 	.word	0x08001c71
 8001cd0:	08001d1f 	.word	0x08001d1f
 8001cd4:	08001c71 	.word	0x08001c71
 8001cd8:	08001c71 	.word	0x08001c71
 8001cdc:	08001db5 	.word	0x08001db5
 8001ce0:	6833      	ldr	r3, [r6, #0]
 8001ce2:	1d1a      	adds	r2, r3, #4
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	6032      	str	r2, [r6, #0]
 8001ce8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001cec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e09c      	b.n	8001e2e <_printf_i+0x1e6>
 8001cf4:	6833      	ldr	r3, [r6, #0]
 8001cf6:	6820      	ldr	r0, [r4, #0]
 8001cf8:	1d19      	adds	r1, r3, #4
 8001cfa:	6031      	str	r1, [r6, #0]
 8001cfc:	0606      	lsls	r6, r0, #24
 8001cfe:	d501      	bpl.n	8001d04 <_printf_i+0xbc>
 8001d00:	681d      	ldr	r5, [r3, #0]
 8001d02:	e003      	b.n	8001d0c <_printf_i+0xc4>
 8001d04:	0645      	lsls	r5, r0, #25
 8001d06:	d5fb      	bpl.n	8001d00 <_printf_i+0xb8>
 8001d08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d0c:	2d00      	cmp	r5, #0
 8001d0e:	da03      	bge.n	8001d18 <_printf_i+0xd0>
 8001d10:	232d      	movs	r3, #45	@ 0x2d
 8001d12:	426d      	negs	r5, r5
 8001d14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001d18:	4858      	ldr	r0, [pc, #352]	@ (8001e7c <_printf_i+0x234>)
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	e011      	b.n	8001d42 <_printf_i+0xfa>
 8001d1e:	6821      	ldr	r1, [r4, #0]
 8001d20:	6833      	ldr	r3, [r6, #0]
 8001d22:	0608      	lsls	r0, r1, #24
 8001d24:	f853 5b04 	ldr.w	r5, [r3], #4
 8001d28:	d402      	bmi.n	8001d30 <_printf_i+0xe8>
 8001d2a:	0649      	lsls	r1, r1, #25
 8001d2c:	bf48      	it	mi
 8001d2e:	b2ad      	uxthmi	r5, r5
 8001d30:	2f6f      	cmp	r7, #111	@ 0x6f
 8001d32:	4852      	ldr	r0, [pc, #328]	@ (8001e7c <_printf_i+0x234>)
 8001d34:	6033      	str	r3, [r6, #0]
 8001d36:	bf14      	ite	ne
 8001d38:	230a      	movne	r3, #10
 8001d3a:	2308      	moveq	r3, #8
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001d42:	6866      	ldr	r6, [r4, #4]
 8001d44:	60a6      	str	r6, [r4, #8]
 8001d46:	2e00      	cmp	r6, #0
 8001d48:	db05      	blt.n	8001d56 <_printf_i+0x10e>
 8001d4a:	6821      	ldr	r1, [r4, #0]
 8001d4c:	432e      	orrs	r6, r5
 8001d4e:	f021 0104 	bic.w	r1, r1, #4
 8001d52:	6021      	str	r1, [r4, #0]
 8001d54:	d04b      	beq.n	8001dee <_printf_i+0x1a6>
 8001d56:	4616      	mov	r6, r2
 8001d58:	fbb5 f1f3 	udiv	r1, r5, r3
 8001d5c:	fb03 5711 	mls	r7, r3, r1, r5
 8001d60:	5dc7      	ldrb	r7, [r0, r7]
 8001d62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001d66:	462f      	mov	r7, r5
 8001d68:	42bb      	cmp	r3, r7
 8001d6a:	460d      	mov	r5, r1
 8001d6c:	d9f4      	bls.n	8001d58 <_printf_i+0x110>
 8001d6e:	2b08      	cmp	r3, #8
 8001d70:	d10b      	bne.n	8001d8a <_printf_i+0x142>
 8001d72:	6823      	ldr	r3, [r4, #0]
 8001d74:	07df      	lsls	r7, r3, #31
 8001d76:	d508      	bpl.n	8001d8a <_printf_i+0x142>
 8001d78:	6923      	ldr	r3, [r4, #16]
 8001d7a:	6861      	ldr	r1, [r4, #4]
 8001d7c:	4299      	cmp	r1, r3
 8001d7e:	bfde      	ittt	le
 8001d80:	2330      	movle	r3, #48	@ 0x30
 8001d82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001d86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001d8a:	1b92      	subs	r2, r2, r6
 8001d8c:	6122      	str	r2, [r4, #16]
 8001d8e:	f8cd a000 	str.w	sl, [sp]
 8001d92:	464b      	mov	r3, r9
 8001d94:	aa03      	add	r2, sp, #12
 8001d96:	4621      	mov	r1, r4
 8001d98:	4640      	mov	r0, r8
 8001d9a:	f7ff fee7 	bl	8001b6c <_printf_common>
 8001d9e:	3001      	adds	r0, #1
 8001da0:	d14a      	bne.n	8001e38 <_printf_i+0x1f0>
 8001da2:	f04f 30ff 	mov.w	r0, #4294967295
 8001da6:	b004      	add	sp, #16
 8001da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dac:	6823      	ldr	r3, [r4, #0]
 8001dae:	f043 0320 	orr.w	r3, r3, #32
 8001db2:	6023      	str	r3, [r4, #0]
 8001db4:	4832      	ldr	r0, [pc, #200]	@ (8001e80 <_printf_i+0x238>)
 8001db6:	2778      	movs	r7, #120	@ 0x78
 8001db8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001dbc:	6823      	ldr	r3, [r4, #0]
 8001dbe:	6831      	ldr	r1, [r6, #0]
 8001dc0:	061f      	lsls	r7, r3, #24
 8001dc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8001dc6:	d402      	bmi.n	8001dce <_printf_i+0x186>
 8001dc8:	065f      	lsls	r7, r3, #25
 8001dca:	bf48      	it	mi
 8001dcc:	b2ad      	uxthmi	r5, r5
 8001dce:	6031      	str	r1, [r6, #0]
 8001dd0:	07d9      	lsls	r1, r3, #31
 8001dd2:	bf44      	itt	mi
 8001dd4:	f043 0320 	orrmi.w	r3, r3, #32
 8001dd8:	6023      	strmi	r3, [r4, #0]
 8001dda:	b11d      	cbz	r5, 8001de4 <_printf_i+0x19c>
 8001ddc:	2310      	movs	r3, #16
 8001dde:	e7ad      	b.n	8001d3c <_printf_i+0xf4>
 8001de0:	4826      	ldr	r0, [pc, #152]	@ (8001e7c <_printf_i+0x234>)
 8001de2:	e7e9      	b.n	8001db8 <_printf_i+0x170>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f023 0320 	bic.w	r3, r3, #32
 8001dea:	6023      	str	r3, [r4, #0]
 8001dec:	e7f6      	b.n	8001ddc <_printf_i+0x194>
 8001dee:	4616      	mov	r6, r2
 8001df0:	e7bd      	b.n	8001d6e <_printf_i+0x126>
 8001df2:	6833      	ldr	r3, [r6, #0]
 8001df4:	6825      	ldr	r5, [r4, #0]
 8001df6:	6961      	ldr	r1, [r4, #20]
 8001df8:	1d18      	adds	r0, r3, #4
 8001dfa:	6030      	str	r0, [r6, #0]
 8001dfc:	062e      	lsls	r6, r5, #24
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	d501      	bpl.n	8001e06 <_printf_i+0x1be>
 8001e02:	6019      	str	r1, [r3, #0]
 8001e04:	e002      	b.n	8001e0c <_printf_i+0x1c4>
 8001e06:	0668      	lsls	r0, r5, #25
 8001e08:	d5fb      	bpl.n	8001e02 <_printf_i+0x1ba>
 8001e0a:	8019      	strh	r1, [r3, #0]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	6123      	str	r3, [r4, #16]
 8001e10:	4616      	mov	r6, r2
 8001e12:	e7bc      	b.n	8001d8e <_printf_i+0x146>
 8001e14:	6833      	ldr	r3, [r6, #0]
 8001e16:	1d1a      	adds	r2, r3, #4
 8001e18:	6032      	str	r2, [r6, #0]
 8001e1a:	681e      	ldr	r6, [r3, #0]
 8001e1c:	6862      	ldr	r2, [r4, #4]
 8001e1e:	2100      	movs	r1, #0
 8001e20:	4630      	mov	r0, r6
 8001e22:	f7fe f9dd 	bl	80001e0 <memchr>
 8001e26:	b108      	cbz	r0, 8001e2c <_printf_i+0x1e4>
 8001e28:	1b80      	subs	r0, r0, r6
 8001e2a:	6060      	str	r0, [r4, #4]
 8001e2c:	6863      	ldr	r3, [r4, #4]
 8001e2e:	6123      	str	r3, [r4, #16]
 8001e30:	2300      	movs	r3, #0
 8001e32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e36:	e7aa      	b.n	8001d8e <_printf_i+0x146>
 8001e38:	6923      	ldr	r3, [r4, #16]
 8001e3a:	4632      	mov	r2, r6
 8001e3c:	4649      	mov	r1, r9
 8001e3e:	4640      	mov	r0, r8
 8001e40:	47d0      	blx	sl
 8001e42:	3001      	adds	r0, #1
 8001e44:	d0ad      	beq.n	8001da2 <_printf_i+0x15a>
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	079b      	lsls	r3, r3, #30
 8001e4a:	d413      	bmi.n	8001e74 <_printf_i+0x22c>
 8001e4c:	68e0      	ldr	r0, [r4, #12]
 8001e4e:	9b03      	ldr	r3, [sp, #12]
 8001e50:	4298      	cmp	r0, r3
 8001e52:	bfb8      	it	lt
 8001e54:	4618      	movlt	r0, r3
 8001e56:	e7a6      	b.n	8001da6 <_printf_i+0x15e>
 8001e58:	2301      	movs	r3, #1
 8001e5a:	4632      	mov	r2, r6
 8001e5c:	4649      	mov	r1, r9
 8001e5e:	4640      	mov	r0, r8
 8001e60:	47d0      	blx	sl
 8001e62:	3001      	adds	r0, #1
 8001e64:	d09d      	beq.n	8001da2 <_printf_i+0x15a>
 8001e66:	3501      	adds	r5, #1
 8001e68:	68e3      	ldr	r3, [r4, #12]
 8001e6a:	9903      	ldr	r1, [sp, #12]
 8001e6c:	1a5b      	subs	r3, r3, r1
 8001e6e:	42ab      	cmp	r3, r5
 8001e70:	dcf2      	bgt.n	8001e58 <_printf_i+0x210>
 8001e72:	e7eb      	b.n	8001e4c <_printf_i+0x204>
 8001e74:	2500      	movs	r5, #0
 8001e76:	f104 0619 	add.w	r6, r4, #25
 8001e7a:	e7f5      	b.n	8001e68 <_printf_i+0x220>
 8001e7c:	08001fcd 	.word	0x08001fcd
 8001e80:	08001fde 	.word	0x08001fde

08001e84 <memmove>:
 8001e84:	4288      	cmp	r0, r1
 8001e86:	b510      	push	{r4, lr}
 8001e88:	eb01 0402 	add.w	r4, r1, r2
 8001e8c:	d902      	bls.n	8001e94 <memmove+0x10>
 8001e8e:	4284      	cmp	r4, r0
 8001e90:	4623      	mov	r3, r4
 8001e92:	d807      	bhi.n	8001ea4 <memmove+0x20>
 8001e94:	1e43      	subs	r3, r0, #1
 8001e96:	42a1      	cmp	r1, r4
 8001e98:	d008      	beq.n	8001eac <memmove+0x28>
 8001e9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001e9e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001ea2:	e7f8      	b.n	8001e96 <memmove+0x12>
 8001ea4:	4402      	add	r2, r0
 8001ea6:	4601      	mov	r1, r0
 8001ea8:	428a      	cmp	r2, r1
 8001eaa:	d100      	bne.n	8001eae <memmove+0x2a>
 8001eac:	bd10      	pop	{r4, pc}
 8001eae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eb2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001eb6:	e7f7      	b.n	8001ea8 <memmove+0x24>

08001eb8 <_sbrk_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d06      	ldr	r5, [pc, #24]	@ (8001ed4 <_sbrk_r+0x1c>)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	602b      	str	r3, [r5, #0]
 8001ec4:	f7ff fb2e 	bl	8001524 <_sbrk>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_sbrk_r+0x1a>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_sbrk_r+0x1a>
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	200001c8 	.word	0x200001c8

08001ed8 <memcpy>:
 8001ed8:	440a      	add	r2, r1
 8001eda:	4291      	cmp	r1, r2
 8001edc:	f100 33ff 	add.w	r3, r0, #4294967295
 8001ee0:	d100      	bne.n	8001ee4 <memcpy+0xc>
 8001ee2:	4770      	bx	lr
 8001ee4:	b510      	push	{r4, lr}
 8001ee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001eea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001eee:	4291      	cmp	r1, r2
 8001ef0:	d1f9      	bne.n	8001ee6 <memcpy+0xe>
 8001ef2:	bd10      	pop	{r4, pc}

08001ef4 <_realloc_r>:
 8001ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ef8:	4607      	mov	r7, r0
 8001efa:	4614      	mov	r4, r2
 8001efc:	460d      	mov	r5, r1
 8001efe:	b921      	cbnz	r1, 8001f0a <_realloc_r+0x16>
 8001f00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001f04:	4611      	mov	r1, r2
 8001f06:	f7ff bc4d 	b.w	80017a4 <_malloc_r>
 8001f0a:	b92a      	cbnz	r2, 8001f18 <_realloc_r+0x24>
 8001f0c:	f7ff fbde 	bl	80016cc <_free_r>
 8001f10:	4625      	mov	r5, r4
 8001f12:	4628      	mov	r0, r5
 8001f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f18:	f000 f81a 	bl	8001f50 <_malloc_usable_size_r>
 8001f1c:	4284      	cmp	r4, r0
 8001f1e:	4606      	mov	r6, r0
 8001f20:	d802      	bhi.n	8001f28 <_realloc_r+0x34>
 8001f22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001f26:	d8f4      	bhi.n	8001f12 <_realloc_r+0x1e>
 8001f28:	4621      	mov	r1, r4
 8001f2a:	4638      	mov	r0, r7
 8001f2c:	f7ff fc3a 	bl	80017a4 <_malloc_r>
 8001f30:	4680      	mov	r8, r0
 8001f32:	b908      	cbnz	r0, 8001f38 <_realloc_r+0x44>
 8001f34:	4645      	mov	r5, r8
 8001f36:	e7ec      	b.n	8001f12 <_realloc_r+0x1e>
 8001f38:	42b4      	cmp	r4, r6
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	4629      	mov	r1, r5
 8001f3e:	bf28      	it	cs
 8001f40:	4632      	movcs	r2, r6
 8001f42:	f7ff ffc9 	bl	8001ed8 <memcpy>
 8001f46:	4629      	mov	r1, r5
 8001f48:	4638      	mov	r0, r7
 8001f4a:	f7ff fbbf 	bl	80016cc <_free_r>
 8001f4e:	e7f1      	b.n	8001f34 <_realloc_r+0x40>

08001f50 <_malloc_usable_size_r>:
 8001f50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f54:	1f18      	subs	r0, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	bfbc      	itt	lt
 8001f5a:	580b      	ldrlt	r3, [r1, r0]
 8001f5c:	18c0      	addlt	r0, r0, r3
 8001f5e:	4770      	bx	lr

08001f60 <_init>:
 8001f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f62:	bf00      	nop
 8001f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f66:	bc08      	pop	{r3}
 8001f68:	469e      	mov	lr, r3
 8001f6a:	4770      	bx	lr

08001f6c <_fini>:
 8001f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f6e:	bf00      	nop
 8001f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f72:	bc08      	pop	{r3}
 8001f74:	469e      	mov	lr, r3
 8001f76:	4770      	bx	lr
